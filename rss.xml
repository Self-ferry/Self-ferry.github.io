<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>1asy</title>
        <subtitle>Till I no longer can</subtitle>
        <icon>https://self-ferry.github.io/images/favicon.ico</icon>
        <link>https://Self-ferry.github.io</link>
        <author>
          <name>1asy</name>
        </author>
        <description>临渊羡鱼，不如退而结网</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 May 2021 20:23:15 +0800</pubDate>
        <lastBuildDate>Fri, 07 May 2021 20:23:15 +0800</lastBuildDate>
        <category term="学习" />
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/07/%E5%AF%BC%E5%85%A5%E8%A1%A8/</guid>
            <title>导入表</title>
            <link>https://self-ferry.github.io/2021/05/07/%E5%AF%BC%E5%85%A5%E8%A1%A8/</link>
            <pubDate>Fri, 07 May 2021 20:23:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/07/%E5%AF%BC%E5%87%BA%E8%A1%A8/</guid>
            <title>导出表</title>
            <link>https://self-ferry.github.io/2021/05/07/%E5%AF%BC%E5%87%BA%E8%A1%A8/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="导出表" scheme="https://self-ferry.github.io/tags/%E5%AF%BC%E5%87%BA%E8%A1%A8/" />
            <pubDate>Fri, 07 May 2021 20:23:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;如何定位导出表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何定位导出表&#34;&gt;#&lt;/a&gt; 如何定位导出表：&lt;/h1&gt;
&lt;p&gt;数据目录项的第一个结构，就是导出表.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef struct _IMAGE_DATA_DIRECTORY &amp;#123;
    DWORD   VirtualAddress;
    DWORD   Size;
&amp;#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

//VirtualAddress  导出表的RVA

//Size 导出表大小 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;导出表结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导出表结构&#34;&gt;#&lt;/a&gt; 导出表结构&lt;/h1&gt;
&lt;p&gt;上面的结构，只是说明导出表在哪里，有多大，并不是真正的导出表.&lt;/p&gt;
&lt;p&gt;如何在 FileBuffer 中找到这个结构呢？在 VirtualAddress 中存储的是 RVA, 如果想在 FileBuffer 中定位&lt;/p&gt;
&lt;p&gt;必须要先将该 RVA 转换成 FOA.&lt;/p&gt;
&lt;p&gt;真正的导出表结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;addressoffunctions说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addressoffunctions说明&#34;&gt;#&lt;/a&gt; AddressOfFunctions 说明：&lt;/h1&gt;
&lt;p&gt;该表中元素宽度为 4 个字节&lt;/p&gt;
&lt;p&gt;该表中存储所有导出函数的地址&lt;/p&gt;
&lt;p&gt;该表中个数由 NumberOfFunctions 决定&lt;/p&gt;
&lt;p&gt;该表项中的值是 RVA, 加上 ImageBase 才是函数真正的地址&lt;/p&gt;
&lt;p&gt;定位：&lt;/p&gt;
&lt;p&gt;IMAGE_EXPORT_DIRECTORY-&amp;gt;AddressOfFunctions 中存储的是该表的 RVA 需要先转换成 FOA&lt;/p&gt;
&lt;h1 id=&#34;addressofnames说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addressofnames说明&#34;&gt;#&lt;/a&gt; AddressOfNames 说明：&lt;/h1&gt;
&lt;p&gt;该表中元素宽度为 4 个字节&lt;/p&gt;
&lt;p&gt;该表中存储所有以名字导出函数的名字的 RVA&lt;/p&gt;
&lt;p&gt;该表项中的值是 RVA, 指向函数真正的名称&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;addressofnameordinals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addressofnameordinals&#34;&gt;#&lt;/a&gt; AddressOfNameOrdinals&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结：&lt;/h1&gt;
&lt;p&gt;为什么要分成 3 张表？&lt;/p&gt;
&lt;p&gt;1、函数导出的个数与函数名的个数未必一样。所以要将函数地址表和函数名称表分开.&lt;/p&gt;
&lt;p&gt;2、函数地址表是不是一定大于函数名称表？&lt;/p&gt;
&lt;p&gt;未必，一个相同的函数地址，可能有多个不同的名字.&lt;/p&gt;
&lt;p&gt;3、如何根据函数的名字获取一个函数的地址？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4、如何根据函数的导出序号获取一个函数的地址？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/06/%E9%9D%99%E6%80%81%E3%80%81%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</guid>
            <title>静态、动态链接库、句柄</title>
            <link>https://self-ferry.github.io/2021/05/06/%E9%9D%99%E6%80%81%E3%80%81%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="静态链接库" scheme="https://self-ferry.github.io/tags/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/" />
            <category term="动态链接库" scheme="https://self-ferry.github.io/tags/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/" />
            <category term="句柄" scheme="https://self-ferry.github.io/tags/%E5%8F%A5%E6%9F%84/" />
            <pubDate>Thu, 06 May 2021 14:23:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;库的介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#库的介绍&#34;&gt;#&lt;/a&gt; 库的介绍&lt;/h1&gt;
&lt;p&gt;库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在意义非同寻常。&lt;/p&gt;
&lt;p&gt;本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。&lt;br /&gt;
库有两种：静态库（.a、.lib）和动态库（.so、.dll）&lt;br /&gt;
windows 上对应的是.lib .dll&lt;br /&gt;
linux 上对应的是.a .so&lt;/p&gt;
&lt;p&gt;超详细内容:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZy1scHMvcC83NzU3OTE5Lmh0bWw=&#34;&gt;https://www.cnblogs.com/king-lps/p/7757919.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;代码复用的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码复用的实现&#34;&gt;#&lt;/a&gt; 代码复用的实现&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态链接库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态链接库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用.def 导出&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;静态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态链接库&#34;&gt;#&lt;/a&gt; 静态链接库&lt;/h1&gt;
&lt;p&gt;例子为滴水逆向教程中的。&lt;/p&gt;
&lt;h2 id=&#34;vc60创建静态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vc60创建静态链接库&#34;&gt;#&lt;/a&gt; VC6.0 创建静态链接库&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 VC6 中创建项目：Win32 Static Library&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在项目中创建两个文件：xxx.h 和 xxx.cpp&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;xxx.h 文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#if !defined(AFX_TEST_H__DB32E837_3E66_4BE7_B873_C079BC621AF0__INCLUDED_)
#define AFX_TEST_H__DB32E837_3E66_4BE7_B873_C079BC621AF0__INCLUDED_

#if _MSC_VER &amp;gt; 1000
#pragma once
#endif // _MSC_VER &amp;gt; 1000


int Plus(int x, int y);
int Sub(int x, int y);
int Mul(int x, int y);
int Div(int x, int y);


#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;xxx.cpp 文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int Plus(int x, int y)
&amp;#123;
  return x+y;
&amp;#125;
int Sub(int x, int y)
&amp;#123;
  return x-y;
&amp;#125;
int Mul(int x, int y)
&amp;#123;
    return x*y;
&amp;#125;
int Div(int x, int y)
&amp;#123;
  return x/y;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用静态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用静态链接库&#34;&gt;#&lt;/a&gt; 使用静态链接库&lt;/h2&gt;
&lt;p&gt;方式一：&lt;/p&gt;
&lt;p&gt;将 xxx.h 和 xxx.lib 复制到要使用的项目中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在需要使用的文件中包含：#include &amp;quot;xxx.h&amp;quot;&lt;/p&gt;
&lt;p&gt;在需要使用的文件中包含：#pragma comment (lib, &amp;quot;xxx.lib&amp;quot;)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;方式二：&lt;/p&gt;
&lt;p&gt;将 xxx.h 和 xxx.lib 复制到要使用的项目中&lt;/p&gt;
&lt;p&gt;在需要使用的文件中包含：#include &amp;quot;xxx.h&amp;quot;&lt;/p&gt;
&lt;p&gt;需要让编译器自己 LINK&amp;quot;lib 库&amp;quot;&lt;br /&gt;
&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;动态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态链接库&#34;&gt;#&lt;/a&gt; 动态链接库&lt;/h1&gt;
&lt;h2 id=&#34;创建dll&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建dll&#34;&gt;#&lt;/a&gt; 创建 DLL&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 VC6 中创建项目：win32 Dynamic-link library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源文件中：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int __stdcall Plus(int x,int y)
&amp;#123;
  return x+y;
&amp;#125;
int __stdcall Sub(int x,int y)
&amp;#123;
  return x-y;
&amp;#125;
int __stdcall Mul(int x,int y)
&amp;#123;
  return x*y;
&amp;#125;
int __stdcall Div(int x,int y)
&amp;#123;
  return x/y;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;头文件中&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;extern &amp;quot;C&amp;quot; _declspec(dllexport) __stdcall int Plus (int x,int y);
extern &amp;quot;C&amp;quot; _declspec(dllexport) __stdcall int Sub (int x,int y);
extern &amp;quot;C&amp;quot; _declspec(dllexport) __stdcall int Mul (int x,int y);
extern &amp;quot;C&amp;quot; _declspec(dllexport) __stdcall int Div (int x,int y);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;1、extern 表示这是个全局函数，可以供各个其他的函数调用；&lt;/p&gt;
&lt;p&gt;2、&amp;quot;C&amp;quot; 按照 C 语言的方式进行编译、链接； __declspec (dllexport) 告诉编译器此函数为导出函数；__stdcall 是为了保持导出与导入时函数调用规则一致，要么都加，要么都不加。&lt;/p&gt;
&lt;h2 id=&#34;使用dll&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用dll&#34;&gt;#&lt;/a&gt; 使用 DLL&lt;/h2&gt;
&lt;h3 id=&#34;方式一隐式连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式一隐式连接&#34;&gt;#&lt;/a&gt; 方式一：隐式连接&lt;/h3&gt;
&lt;p&gt;步骤 1：将 *.dll  *.lib 放到工程目录下面&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;步骤 2：将 #pragma comment (lib,&amp;quot;DLL 名.lib&amp;quot;) 添加到调用文件中&lt;/p&gt;
&lt;p&gt;步骤 3：加入函数的声明&lt;/p&gt;
&lt;p&gt;extern &amp;quot;C&amp;quot; __declspec(dllimport) __stdcall int Plus (int x,int y);&lt;br /&gt;
extern &amp;quot;C&amp;quot; __declspec(dllimport) __stdcall int Sub (int x,int y);&lt;br /&gt;
extern &amp;quot;C&amp;quot; __declspec(dllimport) __stdcall int Mul (int x,int y);&lt;br /&gt;
extern &amp;quot;C&amp;quot; __declspec(dllimport) __stdcall int Div (int x,int y);&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;__declspec (dllimport) 告诉编译器此函数为导入函数；&lt;/p&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;方式二显示连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式二显示连接&#34;&gt;#&lt;/a&gt; 方式二：显示连接&lt;/h3&gt;
&lt;p&gt;步骤 1：	// 定义函数指针&lt;br /&gt;
 typedef int (__stdcall *lpPlus)(int,int);&lt;br /&gt;
typedef int (__stdcall *lpSub)(int,int);&lt;br /&gt;
typedef int (__stdcall *lpMul)(int,int);&lt;br /&gt;
typedef int (__stdcall *lpDiv)(int,int);&lt;/p&gt;
&lt;p&gt;步骤 2：  // 声明函数指针变量&lt;br /&gt;
 lpPlus myPlus;&lt;br /&gt;
lpSub mySub;&lt;br /&gt;
lpMul myMul;&lt;br /&gt;
lpDiv myDiv;&lt;/p&gt;
&lt;p&gt;步骤 3：  //	// 动态加载 dll 到内存中&lt;br /&gt;
 HINSTANCE   hModule = LoadLibrary (&amp;quot;Dll 名.dll&amp;quot;);&lt;/p&gt;
&lt;p&gt;步骤 4：  // 获取函数地址	&lt;br /&gt;
myPlus = (lpPlus) GetProcAddress (hModule,   &amp;quot;函数名&amp;quot;);&lt;br /&gt;
mySub = (lpSub) GetProcAddress (hModule,   &amp;quot;函数名&amp;quot;);&lt;br /&gt;
myMul = (lpMul) GetProcAddress (hModule,   &amp;quot;函数名&amp;quot;);&lt;br /&gt;
myDiv = (lpDiv) GetProcAddress (hModule,   &amp;quot;函数名&amp;quot;);&lt;/p&gt;
&lt;p&gt;步骤 5：	// 调用函数&lt;br /&gt;
 int a = myPlus (10,2);&lt;br /&gt;
int b = mySub(10,2);&lt;br /&gt;
int c = myMul(10,2);&lt;br /&gt;
int d = myDiv(10,2);&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label danger&#34;&gt;💔注意&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;关于在 DLL 中的函数名&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;其实取决于函数名是否更改的关键在于 两个函数转变字__stdcall 和__cdecl&lt;br /&gt;
 如果你用了__stdcall 那 dll 中的函数就会在函数名前加 &amp;quot;-&amp;quot;, 函数名后加 &amp;quot;@x&amp;quot;&lt;br /&gt;
 而__cdecl 则不会将函数改名，因为__cdecl 是函数缺省的状态，所以只要将&lt;br /&gt;
__stdcall 在你的函数声明中去掉就可以了，更详细的区别可以参阅 msdn 中&lt;br /&gt;
的内容。&lt;/p&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;句柄&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#句柄&#34;&gt;#&lt;/a&gt; 句柄&lt;/h1&gt;
&lt;p&gt;Handle 是代表系统的内核对象，如文件句柄，线程句柄，进程句柄。&lt;/p&gt;
&lt;p&gt;HMODULE 是代表应用程序载入的模块&lt;/p&gt;
&lt;p&gt;HINSTANCE 在 win32 下与 HMODULE 是相同的东西 Win16 遗留&lt;/p&gt;
&lt;p&gt;HWND 是窗口句柄&lt;/p&gt;
&lt;p&gt;其实就是一个无符号整型 (四个字节),Windows 之所以这样设计有 2 个目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可读性更好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免在无意中进行运算&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/04/%E6%96%B0%E5%A2%9E%E8%8A%82/</guid>
            <title>新增节</title>
            <link>https://self-ferry.github.io/2021/05/04/%E6%96%B0%E5%A2%9E%E8%8A%82/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="新增节" scheme="https://self-ferry.github.io/tags/%E6%96%B0%E5%A2%9E%E8%8A%82/" />
            <pubDate>Tue, 04 May 2021 04:49:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;为什么新增节以及新增节的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么新增节以及新增节的步骤&#34;&gt;#&lt;/a&gt; 为什么新增节。以及新增节的步骤&lt;/h1&gt;
&lt;p&gt;我们的 PE 文件在空白区可以添加代码，但是这样是由一个弊端的，因为你的空白区节属性可能是只读的不能执行，如果你修改了属性。那么程序就可能出现问题，所以新增一个节可以实现我们的代码。&lt;/p&gt;
&lt;h1 id=&#34;新增节的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新增节的步骤&#34;&gt;#&lt;/a&gt; 新增节的步骤&lt;/h1&gt;
&lt;p&gt;1. 在最后一个节位置添加一个节。如果没有空白位置。自己需要给扩展头扩大。并且自己修正节的偏移.&lt;/p&gt;
&lt;p&gt;2. 修改文件头中节表个数.&lt;/p&gt;
&lt;p&gt;3. 添加的新节表修改节表的属性 【节.VirtualAddress】 . 这个成员指定了这个节在内存哪里展开。所以需要修改.&lt;/p&gt;
&lt;p&gt;4. 修改节表文件偏移  【节.PointerToRawData】   我们指定了内存中从哪里展开节。那么也需要指定这个节在文件中在哪里展开&lt;/p&gt;
&lt;p&gt;5. 修改节表中的 节数据对齐后的大小 【节.SizeofRawData】  我们新增的节。自己需要在 PE 文件添加一段节数据。数据的大小按照文件对齐添加。并且填写到这个成员中.&lt;/p&gt;
&lt;p&gt;6. 修改扩展头的 PE 镜像大小. 【sizeofImage】 这个成员才是关键。如果不按照内存对齐修改镜像大小。那么我们的节就不会映射到内存中。或者 PE 文件根本无法执行.&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;在 PE 中，新增节，添加代码&lt;/p&gt;
&lt;h2 id=&#34;一-先判断节表后是否有空闲位置添加节表信息必须多出两个节表位置最后以零结尾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-先判断节表后是否有空闲位置添加节表信息必须多出两个节表位置最后以零结尾&#34;&gt;#&lt;/a&gt; 一、先判断节表后是否有空闲位置，添加节表信息，必须多出两个节表位置，最后以零结尾。&lt;/h2&gt;
&lt;h2 id=&#34;二-新增节后需要修改以下信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-新增节后需要修改以下信息&#34;&gt;#&lt;/a&gt; 二、新增节后，需要修改以下信息&lt;/h2&gt;
&lt;p&gt;1、添加一个新节，可以复制一份，最好是拥有可执行属性的节，如.text。&lt;/p&gt;
&lt;p&gt;2、在节表区，新增节的后面，填充一个节，用零填充。&lt;/p&gt;
&lt;p&gt;3、修改标准 PE 头中节的数量。&lt;/p&gt;
&lt;p&gt;4、修改 SizeOfImage 的大小。&lt;/p&gt;
&lt;p&gt;5、在原有数据的后面，新增一个节的数据（内存对齐的整倍数）。&lt;/p&gt;
&lt;p&gt;6、修正新增节表的属性。&lt;/p&gt;
&lt;h2 id=&#34;三-新节各个属性修改说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-新节各个属性修改说明&#34;&gt;#&lt;/a&gt; 三、新节各个属性修改说明&lt;/h2&gt;
&lt;p&gt;1、Name: 名字随便修改，不能超过八个字节。&lt;/p&gt;
&lt;p&gt;2、VirtualSize: 申请的新节空间大小，比如 1000&lt;/p&gt;
&lt;p&gt;3、VirtualAddress: 等于上一个节的 VirtualAddress  +  SizeOfRawData&lt;/p&gt;
&lt;p&gt;4、SizeOfRawData：设置可以和 VirtualSize 一样，比如 1000&lt;/p&gt;
&lt;p&gt;5、PointerToRawData：等于上一个节的 PointerToRawData+  SizeOfRawData&lt;/p&gt;
&lt;p&gt;6、PointerToRelocation：设置成零&lt;/p&gt;
&lt;p&gt;7、PointerToLineNumbers：设置成零&lt;/p&gt;
&lt;p&gt;8、NumberOfLineRelocations：设置成零&lt;/p&gt;
&lt;p&gt;9、NumberOfLineNumbers：设置成零&lt;/p&gt;
&lt;p&gt;10、Characteristics：块属性 0x20000060  可以取上一个节表和本节表的属性值，进行异或  如 x|y&lt;/p&gt;
&lt;h2 id=&#34;标志属性块-常用特征值对照表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标志属性块-常用特征值对照表&#34;&gt;#&lt;/a&gt; 标志 (属性块) 常用特征值对照表：&lt;/h2&gt;
&lt;p&gt;[值：00000020h] [IMAGE_SCN_CNT_CODE                // Section contains code.(包含可执行代码)]&lt;/p&gt;
&lt;p&gt;[值：00000040h] [IMAGE_SCN_CNT_INITIALIZED_DATA    // Section contains initialized data.(该块包含已初始化的数据)]&lt;/p&gt;
&lt;p&gt;[值：00000080h] [IMAGE_SCN_CNT_UNINITIALIZED_DATA  // Section contains uninitialized data.(该块包含未初始化的数据)]&lt;/p&gt;
&lt;p&gt;[值：00000200h] [IMAGE_SCN_LNK_INFO                // Section contains comments or some other type of information.]&lt;/p&gt;
&lt;p&gt;[值：00000800h] [IMAGE_SCN_LNK_REMOVE              // Section contents will not become part of image.]&lt;/p&gt;
&lt;p&gt;[值：00001000h] [IMAGE_SCN_LNK_COMDAT              // Section contents comdat.]&lt;/p&gt;
&lt;p&gt;[值：00004000h] [IMAGE_SCN_NO_DEFER_SPEC_EXC       // Reset speculative exceptions handling bits in the TLB entries for this section.]&lt;/p&gt;
&lt;p&gt;[值：00008000h] [IMAGE_SCN_GPREL                   // Section content can be accessed relative to GP.]&lt;/p&gt;
&lt;p&gt;[值：00500000h] [IMAGE_SCN_ALIGN_16BYTES           // Default alignment if no others are specified.]&lt;/p&gt;
&lt;p&gt;[值：01000000h] [IMAGE_SCN_LNK_NRELOC_OVFL         // Section contains extended relocations.]&lt;/p&gt;
&lt;p&gt;[值：02000000h] [IMAGE_SCN_MEM_DISCARDABLE         // Section can be discarded.]&lt;/p&gt;
&lt;p&gt;[值：04000000h] [IMAGE_SCN_MEM_NOT_CACHED          // Section is not cachable.]&lt;/p&gt;
&lt;p&gt;[值：08000000h] [IMAGE_SCN_MEM_NOT_PAGED           // Section is not pageable.]&lt;/p&gt;
&lt;p&gt;[值：10000000h] [IMAGE_SCN_MEM_SHARED              // Section is shareable (该块为共享块).]&lt;/p&gt;
&lt;p&gt;[值：20000000h] [IMAGE_SCN_MEM_EXECUTE             // Section is executable.(该块可执行)]&lt;/p&gt;
&lt;p&gt;[值：40000000h] [IMAGE_SCN_MEM_READ                // Section is readable.(该块可读)]&lt;/p&gt;
&lt;p&gt;[值：80000000h] [IMAGE_SCN_MEM_WRITE               // Section is writeable.(该块可写)]&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;很详细：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3VtYWMvcC81Mjc0NTU5Lmh0bWw=&#34;&gt;https://www.cnblogs.com/wumac/p/5274559.html&lt;/span&gt;&lt;br /&gt;
 有详细实操步骤：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzk3Mzc3MTkuaHRtbA==&#34;&gt;https://www.cnblogs.com/iBinary/p/9737719.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;实操了一篇还行。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/02/%E6%89%A9%E5%A4%A7%E8%8A%82/</guid>
            <title>扩大节</title>
            <link>https://self-ferry.github.io/2021/05/02/%E6%89%A9%E5%A4%A7%E8%8A%82/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="扩大节" scheme="https://self-ferry.github.io/tags/%E6%89%A9%E5%A4%A7%E8%8A%82/" />
            <pubDate>Sun, 02 May 2021 17:26:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;为什么扩大节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么扩大节&#34;&gt;#&lt;/a&gt; 为什么扩大节？&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;我们可以在任意空白区添加自己的代码，但如果添加的代码比较多，空白区不够怎么办？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面我们讲了，空白区添加我们的代码。但是有的时候。我们的空白区不够了怎么办。所以需要进行扩大节.&lt;/p&gt;
&lt;p&gt;扩大节其实很简单。修改节数据对齐后的大小即可。并且在 PE 文件中添加 0 数据进行填充即可.&lt;/p&gt;
&lt;p&gt;首先看一下我们的节表&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef struct _IMAGE_SECTION_HEADER &amp;#123;
    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; //8个字节名字.自己可以起.编译器也可以给定.不重要.
    union &amp;#123;
            DWORD   PhysicalAddress;       
            DWORD   VirtualSize;           //节数据没有对齐后的大小.也就是没有对齐.节数据有多大.
    &amp;#125; Misc;
    DWORD   VirtualAddress;　　　　　　　　　　//加载到内存中的第一个字节的地址.也就是虚拟地址.节在内存中哪里开始.内存中的VA + ImageBase 才是真正的节开始位置
    DWORD   SizeOfRawData;　　　　　　　　　　 //修改这个属性的值,即可扩大节.并且在PE文件中添加相应的0数据进行填充.
    DWORD   PointerToRawData;　　　　　　　　  //在文件中的偏移.是文件对齐成员倍数.
    DWORD   PointerToRelocations;           //一下都是调试相关.
    DWORD   PointerToLinenumbers;           //
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;　　　　　　　　　　//节的属性
&amp;#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;扩大哪一个节呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩大哪一个节呢&#34;&gt;#&lt;/a&gt; 扩大哪一个节呢？&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;若是扩大前面几个节，则后面的节都要改动。所以一般扩大最后一个节。&lt;/p&gt;
&lt;h1 id=&#34;扩大节的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩大节的步骤&#34;&gt;#&lt;/a&gt; 扩大节的步骤&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分配一块新的空间，大小为 &lt;code&gt;S&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将最后一个节的 SizeOfRawData 和 VirtualSize 改为 N&lt;br /&gt;
 &lt;code&gt;N = (SizeOfRawData或者VirtualSize内存对齐后的值) + S&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 SizeOflmage 大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;推荐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#推荐&#34;&gt;#&lt;/a&gt; 推荐&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzk3MzUyNzYuaHRtbA==&#34;&gt;https://www.cnblogs.com/iBinary/p/9735276.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/02/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</guid>
            <title>在空白区添加代码</title>
            <link>https://self-ferry.github.io/2021/05/02/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="空白区添加代码" scheme="https://self-ferry.github.io/tags/%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/" />
            <pubDate>Sun, 02 May 2021 16:58:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;在代码空白区添加代码手动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在代码空白区添加代码手动&#34;&gt;#&lt;/a&gt; 在代码空白区添加代码 (手动)&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;添加的是硬编码&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1、获取 MessageBox 地址，构造 ShellCode 代码&lt;/p&gt;
&lt;p&gt;2、E8 E9 计算公式&lt;/p&gt;
&lt;p&gt;3、在代码区手动添加代码&lt;/p&gt;
&lt;p&gt;4、修改入口地址，指向 ShellCode&lt;br /&gt;
 入口地址:xxxx&lt;/p&gt;
&lt;p&gt;call 0x12345678 			Call 0x77E5425F&lt;/p&gt;
&lt;p&gt;E8 53 FE FF FF&lt;/p&gt;
&lt;p&gt;jmp 0x2345678&lt;/p&gt;
&lt;p&gt;E9 2B 2B 00 00&lt;/p&gt;
&lt;p&gt;真正要跳转的地址 = E8 这条指令的下一行地址 + X&lt;/p&gt;
&lt;p&gt;X = 真正要跳转的地址 - E8 这条指令的下一行地址&lt;/p&gt;
&lt;p&gt;X = 00401050 - 004011FD&lt;/p&gt;
&lt;p&gt;X = 00403b80 - 00401055&lt;/p&gt;
&lt;p&gt;要跳转的地方 = E8 当前的地址 + 5 + X&lt;/p&gt;
&lt;p&gt;X = 要跳转的地址 - (E8 的地址 + 5)&lt;/p&gt;
&lt;p&gt;6A 00 6A 00 6A 00 6A 00 E8 00 00 00 00 E9 00 00 00 00&lt;/p&gt;
&lt;h1 id=&#34;实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实战&#34;&gt;#&lt;/a&gt; 实战&lt;/h1&gt;
&lt;p&gt;OD 查找 MessageBox 位置。&lt;/p&gt;
&lt;p&gt;显示模块窗口。&lt;/p&gt;
&lt;p&gt;找到 USER32.dll, 双击进入后， &lt;code&gt;Ctrl+N&lt;/code&gt;  打开当前模块的名称（标签）列表。在里面查找 MessageBox。&lt;/p&gt;
&lt;p&gt;MessageBox:0x76321930&lt;br /&gt;
MessageBox - ImageBase -508 - 5 =  75F2 1423&lt;br /&gt;
401000&lt;/p&gt;
&lt;p&gt;3F FAEE&lt;/p&gt;
&lt;p&gt;6A 00 6A 00 6A 00 6A 00 E8 23 14 F2 75 E9 EE FA 3F 00&lt;/p&gt;
&lt;p&gt;00007FFDA9672180&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/02/RVA%E4%B8%8EFOA%E8%BD%AC%E6%8D%A2/</guid>
            <title>RVA与FOA转换</title>
            <link>https://self-ferry.github.io/2021/05/02/RVA%E4%B8%8EFOA%E8%BD%AC%E6%8D%A2/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="RVA与FOA" scheme="https://self-ferry.github.io/tags/RVA%E4%B8%8EFOA/" />
            <pubDate>Sun, 02 May 2021 16:05:32 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;引出问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引出问题&#34;&gt;#&lt;/a&gt; 引出问题&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;如果想改变一个全区变量的初始值，该怎么做？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果一个变量有值，那这个值是存储在 PE 中的。&lt;/p&gt;
&lt;p&gt;有一个小细节：定义一个变量，当它加载在内存中的时候才会有默认初始值的。在 C 中定义一个整型变量，不给它赋值打印它，默认是为 0 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;面临的问题是什么？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转换&#34;&gt;#&lt;/a&gt; 转换&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;RVA: 相对虚拟地址&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;label&#34;&gt; FOA: 文件偏移地址&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RVA TO FOA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即我们现在知道内存状态下的偏移，需要找到文件状态下的偏移。&lt;br /&gt;
步骤如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;step1：内存中的地址减去内存基址得到偏移，即 RVA。&lt;br /&gt;
step2：循环遍历节表中各个节的信息，判断在哪个节中。（需要满足：内存偏移 + 节数据没对齐的大小 &amp;gt; image_panyi &amp;gt; 内存偏移）&lt;br /&gt;
step3: 找出在哪个节后，减去该节在内存中的偏移（VirturalAddress）得到在该节中的相对偏移。&lt;br /&gt;
step4: 上一步得到的该节的相对偏移 + 该节在文件中的偏移 (PointToRawData)，即得到 FOA&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;FOA TO RVA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在我们已经知道如何从内存中的偏移转化为文件中的偏移。现在是它的逆过程&lt;br /&gt;
 step1: 文件中的地址减去文件基址，得到在文件中的偏移，即 FOA。&lt;br /&gt;
step2: 循环遍历节表中各个节的信息，判断在哪个节中。（文件对齐 + 文件偏移 &amp;gt; file_panyi &amp;gt; 文件偏移）&lt;br /&gt;
step3: 找出在哪个节后，减去该节在文件中的偏移（VirturalAddress）得到在该节中的相对偏移。&lt;br /&gt;
step4: 上一步得到的该节的相对偏移 + 该节在内存中的偏移 (VirtualAddress)，即得到 RVA。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;RVA 转换 FOA，在以后的破解或者保护中只是基本功而已！基础要打牢。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oxNzgwNTAwODc3NS9hcnRpY2xlL2RldGFpbHMvMTA1Mzc0NTAz&#34;&gt;https://blog.csdn.net/z17805008775/article/details/105374503&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/04/25/C%E3%80%81C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <title>C、C++学习笔记</title>
            <link>https://self-ferry.github.io/2021/04/25/C%E3%80%81C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Sun, 25 Apr 2021 16:49:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/04/20/Linux%E4%B8%AD%E7%9A%84su%E4%B8%8Esu-%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
            <title>Linux中的su与su -命令的区别</title>
            <link>https://self-ferry.github.io/2021/04/20/Linux%E4%B8%AD%E7%9A%84su%E4%B8%8Esu-%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
            <category term="Linux" scheme="https://self-ferry.github.io/categories/Linux/" />
            <category term="Linux" scheme="https://self-ferry.github.io/tags/Linux/" />
            <pubDate>Tue, 20 Apr 2021 22:26:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;详情见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5oYTk3LmNvbS80MDAxLmh0bWw=&#34;&gt; http://www.ha97.com/4001.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区别&#34;&gt;#&lt;/a&gt; 区别&lt;/h2&gt;
&lt;p&gt;su 命令和 su - 命令最大的本质区别就是：前者只是切换了 root 身份，但 Shell 环境仍然是普通用户的 Shell；而后者连用户和 Shell 环境一起切换成 root 身份了。只有切换了 Shell 环境才不会出现 PATH 环境变量错误。su 切换成 root 用户以后，pwd 一下，发现工作目录仍然是普通用户的工作目录；而用 su - 命令切换以后，工作目录变成 root 的工作目录了。用 echo $PATH 命令看一下 su 和 su - 以后的环境变量有何不同。以此类推，要从当前用户切换到其它用户也一样，应该使用 su - 命令。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/04/20/Linux%E9%85%8D%E7%BD%AEvsftp/</guid>
            <title>Linux配置vsftp</title>
            <link>https://self-ferry.github.io/2021/04/20/Linux%E9%85%8D%E7%BD%AEvsftp/</link>
            <category term="Linux" scheme="https://self-ferry.github.io/categories/Linux/" />
            <category term="CentOS7配置vsftp" scheme="https://self-ferry.github.io/tags/CentOS7%E9%85%8D%E7%BD%AEvsftp/" />
            <pubDate>Tue, 20 Apr 2021 10:41:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;Linux 网络服务课的作业。虽然简单，但也让我踩了不少坑，记个笔记吧。&lt;br /&gt;
作业的内容是可以匿名上传或删除文件就可。&lt;/p&gt;
&lt;h1 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h1&gt;
&lt;p&gt;先换个 yum 的源，下载的快一点。&lt;br /&gt;
 &lt;code&gt;wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;换源前也可以先备份一下。&lt;br /&gt;
这里的详细内容可以参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1ZGluYW5peWEvYXJ0aWNsZS9kZXRhaWxzLzEwNTc1ODczOQ==&#34;&gt; https://blog.csdn.net/wudinaniya/article/details/105758739&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载vsftp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载vsftp&#34;&gt;#&lt;/a&gt; 下载 vsftp&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;yum -y install vsftpd&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;查看是否安装成功&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看是否安装成功&#34;&gt;#&lt;/a&gt; 查看是否安装成功&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rpm -qa|grep vsftpd&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;关闭一切墙策略selinux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关闭一切墙策略selinux&#34;&gt;#&lt;/a&gt; 关闭一切墙 | 策略 | SELINUX&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;systemctl stop firewalld&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;iptables -F&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关闭 SELINUX，有两种方法：&lt;br /&gt;
临时关闭：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# getenforce&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Enforcing&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# setenforce 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# getenforce&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Permissive&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;永久关闭：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# vim /etc/sysconfig/selinux&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;SELINUX&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;enforcing 改为 &lt;span class=&#34;token assign-left variable&#34;&gt;SELINUX&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;disabled&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;重启服务 reboot&lt;/p&gt;
&lt;h2 id=&#34;修改vsftpdconfig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改vsftpdconfig&#34;&gt;#&lt;/a&gt; 修改 vsftpd.config&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;修改配置文件 /etc/vsftpd.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anonymous_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;write_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许写文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anon_upload_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名用户上传文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anon_mkdir_write_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名用户创建目录和写权限&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anon_other_write_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名用户删除、重命名等其它权限  这个在配置文件里默认找不到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;这里附上详细的vsftpconfig配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这里附上详细的vsftpconfig配置&#34;&gt;#&lt;/a&gt; 这里附上详细的 vsftp.config 配置&lt;/h2&gt;
&lt;p&gt;vsftpd 的配置文件在为 vsftpd.conf，一般在 /etc/vsftpd/ 目录下。&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;属性&lt;/th&gt;
        &lt;th&gt;属性值&lt;/th&gt;
        &lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anonymous_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许匿名用户（anonymous）登录 &lt;code&gt;FTP&lt;/code&gt;，如果该设置被注释，则默认允许&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;local_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许本地系统用户登录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;write_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启任何形式的 &lt;code&gt;FTP&lt;/code&gt; 写入命令，上传文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;local_umask&lt;/td&gt;
        &lt;td&gt;xxx&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;本地用户的 &lt;code&gt;umask&lt;/code&gt; 设置，如果注释该设置则默认为 &lt;code&gt;077&lt;/code&gt;，但一般都设置成 &lt;code&gt;022&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anon_upload_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许匿名用户上传文件，如果要设置为允许，则需要先开启 &lt;code&gt;write_enable&lt;/code&gt;，否则无效，此外对应目录还要具有写权限&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anon_mkdir_write_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许匿名用户创建新目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;dirmessage_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;当进入某个目录时，发送信息提示给远程用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;xferlog_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启 上传/下载 的日志记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;connect_from_port_20&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否使用 &lt;code&gt;20&lt;/code&gt; 端口来连接 &lt;code&gt;FTP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chown_uploads&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;匿名上传的文件是否由某一指定用户 &lt;code&gt;chown_username&lt;/code&gt; 所有&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chown_username&lt;/td&gt;
        &lt;td&gt;有效用户名&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;匿名上传的文件由该设定用户所有&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;xferlog_file&lt;/td&gt;
        &lt;td&gt;有效路径&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置日志文件的保存位置，默认为 &lt;code&gt;/var/log/xferlog&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;xferlog_std_format&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否使用标准的 &lt;code&gt;ftpd xferlog&lt;/code&gt;日志格式，该格式日志默认保存在 &lt;code&gt;/var/log/xferlog&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;idle_session_timeout&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置空闲连接的超时时间，单位 秒&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;data_connection_timeout&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置等待数据传输的最大时间，单位 秒（&lt;code&gt;data_connection_timeout&lt;/code&gt; 与 &lt;code&gt;idle_session_timeout&lt;/code&gt;
            在同一时间只有一个有效）
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;nopriv_user&lt;/td&gt;
        &lt;td&gt;有效用户名&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;指定一个非特权用户，用于运行 &lt;code&gt;vsftpd&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;async_abor_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否支持异步 &lt;code&gt;ABOR&lt;/code&gt; 请求&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ascii_upload_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启 &lt;code&gt;ASCII&lt;/code&gt; 模式进行文件上传，一般不开启&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ascii_download_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启 &lt;code&gt;ASCII&lt;/code&gt; 模式进行文件下载，一般不开启&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ftpd_banner&lt;/td&gt;
        &lt;td&gt;…&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;自定义登录标语&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;deny_email_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;如果匿名登录，则会要求输入 email 地址，如果不希望一些 email 地址具有登录权限，则可以开启此项，并在 &lt;code&gt;banned_email_file&lt;/code&gt;
            指定的文件中写入对应的 email 地址
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;banned_email_file&lt;/td&gt;
        &lt;td&gt;有效文件&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;当开启 &lt;code&gt;deny_email_enable&lt;/code&gt; 时，需要通过此项指定一个保存登录无效 email 的文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chroot_local_user&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否将所有用户限制在主目录，当为 &lt;code&gt;NO&lt;/code&gt; 时， &lt;code&gt;FTP&lt;/code&gt; 用户可以切换到其他目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chroot_list_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否启用限制用户的名单列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chroot_list_file&lt;/td&gt;
        &lt;td&gt;有效文件&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;用户列表，其作用与 &lt;code&gt;chroot_local_user&lt;/code&gt; 和 &lt;code&gt;chroot_local_user&lt;/code&gt; 的组合有关，详见下表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;allow_writeable_chroot&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许用户对 ftp 根目录具有写权限，如果设置成不允许而目录实际上却具备写权限，则会报错&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ls_recurse_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许 &lt;code&gt;ls -R&lt;/code&gt; 指令来递归查询，递归查询比较耗资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;listen&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;如果为 &lt;code&gt;YES&lt;/code&gt;，&lt;code&gt;vsftpd&lt;/code&gt; 将以独立模式运行并监听 &lt;code&gt;IPv4&lt;/code&gt; 的套接字，处理相关连接请求（该指令不能与
            &lt;code&gt;listen_ipv6&lt;/code&gt; 一起使用）
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;listen_ipv6&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许监听 &lt;code&gt;IPv6&lt;/code&gt; 套接字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;pam_service_name&lt;/td&gt;
        &lt;td&gt;…&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置 &lt;code&gt;PAM&lt;/code&gt; 外挂模块提供的认证服务所使用的配置文件名 ，即 &lt;code&gt;/etc/pam.d/vsftpd&lt;/code&gt; 文件，此文件中 &lt;code&gt;file=/etc/vsftpd/ftpusers&lt;/code&gt;
            字段，说明了 &lt;code&gt;PAM&lt;/code&gt; 模块能抵挡的帐号内容来自文件 &lt;code&gt;/etc/vsftpd/ftpusers&lt;/code&gt; 中
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;userlist_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否启用 &lt;code&gt;user_list&lt;/code&gt; 文件来控制用户登录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;userlist_deny&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否拒绝 &lt;code&gt;user_list&lt;/code&gt; 中的用户登录，此属性设置需在 &lt;code&gt;userlist_enable = YES&lt;/code&gt; 时才有效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;tcp_wrappers&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否使用 &lt;code&gt;tcp_wrappers&lt;/code&gt; 作为主机访问控制方式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;max_clients&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;同一时间允许的最大连接数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;max_per_ip&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;同一个IP客户端连接的最大值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;local_root&lt;/td&gt;
        &lt;td&gt;有效目录&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;系统用户登录后的根目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anon_root&lt;/td&gt;
        &lt;td&gt;有效目录&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;匿名用户登录后的根目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;user_config_dir&lt;/td&gt;
        &lt;td&gt;有效目录&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;用户单独配置文件存放目录，该目录下用户的文件名就是对应用户名&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;以上搞完之后还要把ftp目录的权限给更改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以上搞完之后还要把ftp目录的权限给更改&#34;&gt;#&lt;/a&gt; 以上搞完之后还要把 ftp 目录的权限给更改&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;chmod 777 /var/ftp/pub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里只能更改 ftp 目录下的子目录的权限。这就是个坑，当更改 /etc/ftp/ 这个目录的权限时，都没法登陆这个 ftp 服务器了。&lt;br /&gt;
当然是可以更改 ftp 下的目录的，在 vsftpd.config 中配置。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/30/win32%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%8B%E4%BB%B6%E6%B6%88%E6%81%AF/</guid>
            <title>win32（二）事件消息</title>
            <link>https://self-ferry.github.io/2021/03/30/win32%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%8B%E4%BB%B6%E6%B6%88%E6%81%AF/</link>
            <category term="win32" scheme="https://self-ferry.github.io/categories/win32/" />
            <category term="widows" scheme="https://self-ferry.github.io/tags/widows/" />
            <pubDate>Tue, 30 Mar 2021 22:32:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;事件-消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件-消息&#34;&gt;#&lt;/a&gt; 事件 消息&lt;/h1&gt;
&lt;p&gt;Windows 中的事件是一个 &amp;quot;动作&amp;quot;，这个动作可能是用户操作应用程序产生的，也可能是 Windows 自己产生的.&lt;/p&gt;
&lt;p&gt;而消息，就是用来描述这些 &amp;quot;动作&amp;quot; 的，比如：&lt;/p&gt;
&lt;p&gt;这个动作是什么时候产生的？&lt;/p&gt;
&lt;p&gt;哪个应用程序产生的？&lt;/p&gt;
&lt;p&gt;在什么位置产生的？&lt;br /&gt;
等等。。。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;事件驱动消息，消息封装事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Windows 为了能够准确的描述这些信息，提供了一个结构体：MSG，该结构体里面记录的事件的详细信息.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef struct tagMSG &amp;#123;    

HWND hwnd;     // 窗口句柄

UINT message;     //消息类型

WPARAM wParam;     // 对消息类型进一步描述

LPARAM lParam;     //同上

DWORD time;     // 动作发生时间

POINT pt;     //坐标，结构体封装了，内部是x，y

&amp;#125; MSG, *PMSG;     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;1、hwnd：&lt;/p&gt;
&lt;p&gt;表示消息所属的窗口&lt;/p&gt;
&lt;p&gt;一个消息一般都是与某个窗口相关联的&lt;/p&gt;
&lt;p&gt;在 Windows 中 HWND 类型的变量通常用来标识窗口。&lt;/p&gt;
&lt;p&gt;2、message&lt;/p&gt;
&lt;p&gt;在 Windows 中，消息是由一个数值来表示的&lt;/p&gt;
&lt;p&gt;但是由于数值不便于记忆，所以 Windows 将消息对应的数值定义为 WM_XXX 宏（WM == Window Message）&lt;/p&gt;
&lt;p&gt;鼠标左键按下 WM_LBUTTONDOWN        键盘按下 WM_KEYDOWN&lt;/p&gt;
&lt;p&gt;3、wParam 和 lParam&lt;/p&gt;
&lt;p&gt;32 位消息的特定附加信息，具体表示什么处决于 message&lt;/p&gt;
&lt;p&gt;4、time&lt;/p&gt;
&lt;p&gt;消息创建时的时间&lt;/p&gt;
&lt;p&gt;5、消息创建时的鼠标位置&lt;/p&gt;
&lt;p&gt;具体来说：如下图，用户输入后，封装成消息，加入系统的消息队列，然后应用程序那还有队列&lt;/p&gt;
&lt;p&gt;用来存储自己的消息队列，所以系统队列到应用程序队列是分流而治的过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从队列中取出消息，使用的是循环机制，就是不停的取出消息，而后面的判断消息类型是不是我们关心的意思其实是&lt;/p&gt;
&lt;p&gt;我们是否写了该消息下的响应函数，或者说回调函数。&lt;/p&gt;
&lt;p&gt;具体流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;创建一个窗口程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建一个窗口程序&#34;&gt;#&lt;/a&gt; 创建一个窗口程序&lt;/h1&gt;
&lt;p&gt;步骤 1：创建 Windows 应用程序 选择空项目&lt;/p&gt;
&lt;p&gt;步骤 2：在新建项窗口中选 C++ 代码文件 创建一个新的 cpp 文件&lt;/p&gt;
&lt;p&gt;步骤 3：在新的 cpp 文件中添加: &lt;code&gt;#include &amp;lt;Windows.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并添加入口函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int CALLBACK WinMain(                 CALLBACK 是一个宏             

_In_ HINSTANCE hInstance,         #define CALLBACK __stdcall    

_In_ HINSTANCE hPrevInstance,     

_In_ LPSTR lpCmdLine,                 

_In_ int nCmdShow             

)                     所有的Win32 API函数都遵循该约定    

&amp;#123;                     

return 0;             

&amp;#125;                     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 4：设计窗口类&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
//窗口的类名    

TCHAR className[] = &amp;quot;My First Window&amp;quot;;     

// 创建窗口类的对象     

WNDCLASS wndclass = &amp;#123;0&amp;#125;;        //一定要先将所有值赋值    

wndclass.hbrBackground = (HBRUSH)COLOR_MENU;        //窗口的背景色    

wndclass.lpfnWndProc = WindowProc;        //窗口过程函数    

wndclass.lpszClassName = className;        //窗口类的名字    

wndclass.hInstance = hInstance;        //定义窗口类的应用程序的实例句柄    

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 5：注册窗口类    ，这是什么？哈哈哈，就是把结构体赋值后传参调用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;RegisterClass(&amp;amp;wndclass);     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 6：创建窗口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 创建窗口     

HWND hwnd = CreateWindow(     

className,        //类名    

TEXT(&amp;quot;我的第一个窗口&amp;quot;),        //窗口标题    

WS_OVERLAPPEDWINDOW,        //窗口外观样式     

10,        //相对于父窗口的X坐标    

10,        //相对于父窗口的Y坐标    

600,        //窗口的宽度     

300,        //窗口的高度     

NULL,        //父窗口句柄，为NULL     

NULL,        //菜单句柄，为NULL     

hInstance,        //当前应用程序的句柄     

NULL);        //附加数据一般为NULL    

if(hwnd == NULL)        //是否创建成功     

return 0;     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 7：显示窗口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 显示窗口     

ShowWindow(hwnd, SW_SHOW);     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 8：消息循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;MSG msg;     

while(GetMessage(&amp;amp;msg, NULL, 0, 0))     

&amp;#123;     

TranslateMessage(&amp;amp;msg);     

DispatchMessage(&amp;amp;msg);     

&amp;#125;     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 9：回调函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/*                        

窗口消息处理程序 窗口回调函数：            

1、窗口回调函数处理过的消息，必须传回0.        

2、窗口回调不处理的消息，由DefWindowProc来处理.    

*/                        

LRESULT CALLBACK WindowProc(         

IN HWND hwnd,     

IN UINT uMsg,     

IN WPARAM wParam,     

IN LPARAM lParam     

)     

&amp;#123;     

switch(uMsg)    

&amp;#123;    

//窗口消息    

case WM_CREATE:     

&amp;#123;    

DbgPrintf(&amp;quot;WM_CREATE %d %d\n&amp;quot;,wParam,lParam);    

CREATESTRUCT* createst = (CREATESTRUCT*)lParam;    

DbgPrintf(&amp;quot;CREATESTRUCT %s\n&amp;quot;,createst-&amp;gt;lpszClass);    

return 0;    

&amp;#125;    

case WM_MOVE:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_MOVE %d %d\n&amp;quot;,wParam,lParam);    

POINTS points = MAKEPOINTS(lParam);    

DbgPrintf(&amp;quot;X Y %d %d\n&amp;quot;,points.x,points.y);    

return 0;    

&amp;#125;    

case WM_SIZE:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_SIZE %d %d\n&amp;quot;,wParam,lParam);    

int newWidth = (int)(short) LOWORD(lParam);     

int newHeight = (int)(short) HIWORD(lParam);     

DbgPrintf(&amp;quot;WM_SIZE %d %d\n&amp;quot;,newWidth,newHeight);    

return 0;    

&amp;#125;    

case WM_DESTROY:    //销毁

&amp;#123;    

DbgPrintf(&amp;quot;WM_DESTROY %d %d\n&amp;quot;,wParam,lParam);    

PostQuitMessage(0);    

return 0;    

&amp;#125;    

//键盘消息    

case WM_KEYUP:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_KEYUP %d %d\n&amp;quot;,wParam,lParam);    

return 0;    

&amp;#125;    

case WM_KEYDOWN:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_KEYDOWN %d %d\n&amp;quot;,wParam,lParam);    

return 0;    

&amp;#125;    

//鼠标消息    

case WM_LBUTTONDOWN:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_LBUTTONDOWN %d %d\n&amp;quot;,wParam,lParam);    

POINTS points = MAKEPOINTS(lParam);    

DbgPrintf(&amp;quot;WM_LBUTTONDOWN %d %d\n&amp;quot;,points.x,points.y);    

return 0;    

&amp;#125;    

&amp;#125;    

return DefWindowProc(hwnd,uMsg,wParam,lParam);    //扔给windows处理其他消息

&amp;#125;     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MFC 就是基于此封装&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;滴水逆向课件&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/30/win32%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</guid>
            <title>win32学习（一）</title>
            <link>https://self-ferry.github.io/2021/03/30/win32%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</link>
            <category term="win32" scheme="https://self-ferry.github.io/categories/win32/" />
            <category term="WinMain函数" scheme="https://self-ferry.github.io/tags/WinMain%E5%87%BD%E6%95%B0/" />
            <pubDate>Tue, 30 Mar 2021 15:14:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;winmain-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#winmain-函数&#34;&gt;#&lt;/a&gt; WinMain 函数&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int WINAPI WinMain(
  HINSTANCE hInstance, // 应用程序当前实例的句柄
	HINSTANCE hPrevInstance, // 应用程序的先前实例的句柄。同一个程序打开两次，出现两个窗口，第一次打开的窗口就是先前实例的窗口。对于一个32位程序，该参数总为NULL。
	LPSTR IpCmdLine, // 命令行的字符串的指针
	int nShowCmd  // 窗口显示方式、默认为SW_SHOWDEFAULT
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WinMain 函数接收 4 个参数，这些参数都是在系统调用 WinMain 函数时，传递给应用程序的。&lt;/p&gt;
&lt;p&gt;第一个参数 hInstance 表示该程序当前运行的实例的句柄，这是一个数值。当程序在 Windows 下运行时，它唯一标识运行中的实例（注意，只有运行中的程序实例，才有实例句柄）。一个应用程序可以运行多个实例，每运行一个实例，系统都会给该实例分配一个句柄值，并通过 hInstance 参数传递给 WinMain 函数。&lt;/p&gt;
&lt;p&gt;第二个参数 hPrevInstance 表示当前实例的前一个实例的句柄。通过查看 MSDN 我们可以知道，在 Win32 环境下，这个参数总是 NULL ，即在 Win32 环境下，这个参数不再起作用。&lt;/p&gt;
&lt;p&gt;第三个参数 lpCmdLine 是一个以空终止的字符串，指定传递给应用程序的命令行参数。 例如：在 D 盘下有一个 sunxin.txt 文件，当我们用鼠标双击这个文件时将启动记事本程序（ notepad.exe ），此时系统会将 D:/sunxin.txt 作为命令行参数传递给记事本程序的 WinMain 函数，记事本程序在得到这个文件的全路径名后，就在窗口中显示该文件的内容。要在 VC++ 开发环境中向应用程序传递参数，可以单击菜单 【 Project 】→【 Settings 】，选择 “Debug” 选项卡，在 “ Program arguments ” 编辑框中输入你想传递给应用程序的参数。&lt;/p&gt;
&lt;p&gt;第四个参数 nCmdShow 指定程序的窗口应该如何显示，例如最大化、最小化、隐藏等。这个参数的值由该程序的调用者所指定，在调用 ShowWindow () 时可以使用到该值&lt;/p&gt;
&lt;p&gt;=============================================================&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;应用程序句柄&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;WinMain 函数的第一个参数 hInstance 就是可执行文件的实例句柄，实际上是个内存地址，它指出系统在何处把 exe 文件装载入进程的地址空间！&lt;br /&gt;
PE 中的 ImageBase&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;窗口显示方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第四个参数 nCmdShow，指定窗口第一次出现 (程序刚刚启动时) 时的显示方式。显示方式有多种，比如：&lt;/p&gt;
&lt;p&gt;不显示，nCmdShow = 0;&lt;br /&gt;
 正常显示，nCmdShow = 1;(默认为 1)&lt;br /&gt;
 最小化显示，nCmdShow = 2;&lt;br /&gt;
 最大化显示，nCmdShow = 3;&lt;br /&gt;
 如果需要改变系统的默认的显示方式，需要在创建窗口之前指定 nCmdShow 的值 (通过一个简单的赋值语句 nCmdShow = n)&lt;/p&gt;
&lt;p&gt;不过，其实这里要让 nCmdShow 起作用，需要把 nCmdShow 作为参数传递给 ShowWindow 函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/*
 * ShowWindow() Commands
 */
#define SW_HIDE             0
#define SW_SHOWNORMAL       1
#define SW_NORMAL           1     激活并显示一个窗口。如果窗口被最小化或最大化，系统 将其恢复到原来的尺寸和大小。应用程序 在第一次显示窗口的时候应该指定此标志。
#define SW_SHOWMINIMIZED    2     激活窗口并将其最小化。
#define SW_SHOWMAXIMIZED    3     激活窗口并将其最大化。
#define SW_MAXIMIZE         3     最大化指定的窗口。
#define SW_SHOWNOACTIVATE   4     以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态。
#define SW_SHOW             5     在窗口原来的位置以原来的尺寸激活和显示窗口。
#define SW_MINIMIZE         6     最小化指定的窗口并且激活在Z序中的下一个顶层窗口。
#define SW_SHOWMINNOACTIVE  7
#define SW_SHOWNA           8     以窗口原来的状态显示窗口。激活窗口仍然维持激活状态。
#define SW_RESTORE          9     激活并显示窗口。如果窗口最小化或最大化，则系统 将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时，应用程序 应该指定这个标志。
#define SW_SHOWDEFAULT      10     依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态，STARTUPINFO 结构是由启动应用程序 的程序 传递给CreateProcess函数的。
#define SW_FORCEMINIMIZE    11     在WindowNT5.0中最小化窗口，即使拥有窗口的线程被挂起也会最小化。在从其他线程最小化窗口时才使用这个参数。
#define SW_MAX              11
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;winapi和apientry&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#winapi和apientry&#34;&gt;#&lt;/a&gt; WINAPI 和 APIENTRY&lt;/h1&gt;
&lt;p&gt;另外，这里稍微说明一下  &lt;code&gt;WINAPI&lt;/code&gt;  这个宏定义，我们看 WinMain 函数的原型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int WINAPI WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPreInstance,
    LPSTR     lpCmdLine,
    int       nCmdShow
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WINAPI 是这样定义的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define WINAPI      __stdcall&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 VC6.0 下生成的 WinMain 函数，实际上是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int APIENTRY WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPreInstance,
    LPSTR     lpCmdLine,
    int       nCmdShow
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;APIENTRY 这个定义为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define APIENTRY    WINAPI&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以归根到底都是  &lt;code&gt;__stdcall&lt;/code&gt; ，这个是什么东西了？这里解释一下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__stdcall&lt;/code&gt;  一种调用约定 (调用函数时候的一种约定)，其他的调用约定有：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__cdecl 和 __fastcall&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;调用约定将决定以下内容：&lt;/p&gt;
&lt;p&gt;1) 函数参数的压栈顺序，&lt;/p&gt;
&lt;p&gt;2) 由调用者还是被调用者把参数弹出栈，&lt;/p&gt;
&lt;p&gt;3) 以及产生函数修饰名的方法。&lt;/p&gt;
&lt;p&gt;WIN32API 使用的是 &lt;code&gt;__stdcall&lt;/code&gt;  调用约定&lt;/p&gt;
&lt;p&gt;标准 C，C++ 使用的是 &lt;code&gt;__cdecl&lt;/code&gt;  调用约定&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__stdcall&lt;/code&gt;  调用约定：函数的参数自右向左压栈，被调用的函数在返回前清理传送参数的内存栈&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__cdecl&lt;/code&gt;  调用约定：每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用 &lt;code&gt;_stdcall&lt;/code&gt;  函数的大。函数采用从右到左的压栈方式。注意：对于可变参数的成员函数，始终使用 &lt;code&gt;__cdecl&lt;/code&gt;  的调用约定&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDI0Nzc4MS9hcnRpY2xlL2RldGFpbHMvOTcxNDE1MTg=&#34;&gt;https://blog.csdn.net/weixin_30247781/article/details/97141518&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjMzMzU1MS9hcnRpY2xlL2RldGFpbHMvMTEzMjUwOTk5&#34;&gt;https://blog.csdn.net/weixin_42333551/article/details/113250999&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/24/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/</guid>
            <title>汇编复习</title>
            <link>https://self-ferry.github.io/2021/03/24/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/</link>
            <category term="汇编" scheme="https://self-ferry.github.io/categories/%E6%B1%87%E7%BC%96/" />
            <category term="x86汇编指令" scheme="https://self-ferry.github.io/tags/x86%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/" />
            <pubDate>Wed, 24 Mar 2021 20:19:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前学的，因为一些事情就耽搁了，转而学其他的了，现在有时间了，打算接着学，发现忘的差不多了。只能重学了。&lt;br /&gt;
逆水行舟，不进则退。&lt;/p&gt;
&lt;h1 id=&#34;内存格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存格式&#34;&gt;#&lt;/a&gt; 内存格式&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;每个内存单元宽度为 8&lt;/li&gt;
&lt;li&gt;【0x 编号】称为内存地址&lt;/li&gt;
&lt;li&gt;内存是存储数据的，内存地址是对存储数据的一个标识，指向数据却不是数据，通过内存地址的指引，可以访问到内存当中指向的数据.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内存最小的单位是一个字节 ==&amp;gt;&amp;gt; 8 个二进制数  ==&amp;gt;&amp;gt; 两位的十六进制数&lt;/p&gt;
&lt;p&gt;一个内存单元能存一个两位的十六进制数，而这就是内存数据&lt;/p&gt;
&lt;h1 id=&#34;简单指令intel汇编语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单指令intel汇编语法&#34;&gt;#&lt;/a&gt; 简单指令 (intel 汇编语法)&lt;/h1&gt;
&lt;h2 id=&#34;mov&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mov&#34;&gt;#&lt;/a&gt; mov&lt;/h2&gt;
&lt;p&gt;格式：  &lt;code&gt;mov destination, source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov eax, ebx&lt;/code&gt;   // 将 EBX 中的内容复制到 EAX 寄存器中&lt;br /&gt;
 &lt;code&gt;mov eax, 0x42&lt;/code&gt;  // 将立即数 0x42 复制到 EAX 寄存器中&lt;br /&gt;
 &lt;code&gt;mov eax, [0x443212C4]&lt;/code&gt;  // 将内存地址 0x443212C4 的四个字节复制到 EAX 寄存器&lt;br /&gt;
 &lt;code&gt;mov eax, [ebx+esi*4]&lt;/code&gt;   // 将 ebx+esi*4 等式结果只想的内存地址处 4 个字节复制至 EAX&lt;/p&gt;
&lt;h2 id=&#34;lea&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lea&#34;&gt;#&lt;/a&gt; lea&lt;/h2&gt;
&lt;p&gt;格式：  &lt;code&gt;lea destination, source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;lea 指令用来将一个内存地址赋给目的操作数。&lt;br /&gt;
例如，  &lt;code&gt;lea eax, [ebx+8]&lt;/code&gt;  就是将 EBX+8 的值给 EAX。&lt;br /&gt;
相反的， &lt;code&gt;mov eax, [ebx+8]&lt;/code&gt;  则加载内存中地址为 EBX+8 处的数据。&lt;/p&gt;
&lt;h2 id=&#34;算术运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算术运算&#34;&gt;#&lt;/a&gt; 算术运算&lt;/h2&gt;
&lt;h3 id=&#34;加减运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加减运算&#34;&gt;#&lt;/a&gt; 加减运算&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例子&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sub eax,0x10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX 寄存器值减去 0x10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add eax,ebx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将 EBX 值加入 EAX 并将结果保存至 EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;inc edx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX 值递增 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dec ecx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ECX 值递减 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;乘除运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘除运算&#34;&gt;#&lt;/a&gt; 乘除运算&lt;/h3&gt;
&lt;p&gt;乘法和除法都使用了一个预先规定的寄存器。因此其运算就是指令码加上寄存器要去乘除的值。&lt;br /&gt;
 &lt;code&gt;mul&lt;/code&gt;  和 &lt;code&gt;div&lt;/code&gt;  指令要操作的寄存器一般会在之前许多条指令的地方被赋值，因此你可能需要在程序的上下文中来寻找。&lt;br /&gt;
 &lt;code&gt;mul value&lt;/code&gt;  指令总是将 &lt;code&gt;eax&lt;/code&gt;  乘上 &lt;code&gt;value&lt;/code&gt; 。因此， &lt;code&gt;EAX&lt;/code&gt;  寄存器必须在乘法指令出现前就赋值好。&lt;/p&gt;
&lt;p&gt;乘法的结果以 64 位的形式分开存储在两个寄存器中： &lt;code&gt;EDX&lt;/code&gt;  和 &lt;code&gt;EAX&lt;/code&gt; 。其中 EDX 存储了高的 32 位，EAX 存储低的 32 位。&lt;/p&gt;
&lt;p&gt;32 位模式下，MUL（无符号数乘法）指令有三种类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一种执行 8 位操作数与 AL 寄存器的乘法；
第二种执行 16 位操作数与 AX 寄存器的乘法；
第三种执行 32 位操作数与 EAX 寄存器的乘法。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;乘数和被乘数的大小必须保持一致，乘积的大小则是它们的一倍。这三种类型都可以使用寄存器和内存操作数，但不能使用立即数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MUL reg/mem8
MUL reg/meml6
MUL reg/mem32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MUL 指令中的单操作数是乘数。下表按照乘数的大小，列出了默认的被乘数和乘积。由于目的操作数是被乘数和乘数大小的两倍，因此不会发生溢岀。&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被乘数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;乘数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;乘积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AL&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DX:AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX:EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果乘积的高半部分不为零，则 MUL 会把进位标志位和溢出标志位置 1。因为进位标志位常常用于无符号数的算术运算，在此我们也主要说明这种情况。例如，当 AX 乘以一个 16 位操作数时，乘积存放在 DX 和 AX 寄存器对中。其中，乘积的高 16 位存放在 DX，低 16 位存放在 AX。如果 DX 不等于零，则进位标志位置 1，这就意味着隐含的目的操作数的低半部分容纳不了整个乘积。&lt;/p&gt;
&lt;p&gt;有个很好的理由要求在执行 MUL 后检查进位标志位，即，确认忽略乘积的高半部分是否安全。&lt;/p&gt;
&lt;p&gt;32 位模式下，DIV（无符号除法）指令执行 8 位、16 位和 32 位无符号数除法。其中，单寄存器或内存操作数是除数。格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DIV reg/mem8
DIV reg/meml6
DIV reg/mem32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下表给出了被除数、除数、商和余数之间的关系：&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被除数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;除数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;商&lt;/td&gt;
&lt;td&gt;余数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AL&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DX:AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td&gt;DX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX:EAX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX&lt;/td&gt;
&lt;td&gt;EDX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;64 位模式下，DIV 指令用 RDX:RAX 作被除数，用 64 位寄存器和内存操作数作除数，商存放到 RAX，余数存放在 RDX 中。&lt;/p&gt;
&lt;h2 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;否操作指令 NOT&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;NOT OPRD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把 OPRD 取反，再回送给 OPRD&lt;/p&gt;
&lt;p&gt;对标志位没有影响&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;与操作指令 AND [与]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;AND OPRD1，OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OPRD1 和 OPRD2 执行与操作，结果送到 OPRD1&lt;/p&gt;
&lt;p&gt;执行后，CF＝OF＝0，标志 PF，ZF，SF 反映运算结果，AF 未定义&lt;/p&gt;
&lt;p&gt;某个操作数自身与，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov al, 00001111b&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;and al, 11110101b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后 &lt;code&gt;al&lt;/code&gt;  的结果就是 &lt;code&gt;00000101b&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;或操作指令 OR [或]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;OR OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标志位同与运算指令&lt;/p&gt;
&lt;p&gt;某个操作数自身或，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;异或操作指令 XOR [异或]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;XOR OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标志位同与运算指令&lt;/p&gt;
&lt;p&gt;某个操作数自身异或，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;p&gt;与 0 异或，不变，与 1 异或，取反。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;测试指令 TEST&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;TEST OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指令与 AND 类似，但结果不回送&lt;/p&gt;
&lt;p&gt;指令执行后，ZF，PF，SF 反映运算结果，CF＝OF＝0&lt;/p&gt;
&lt;h2 id=&#34;移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移位指令&#34;&gt;#&lt;/a&gt; 移位指令&lt;/h2&gt;
&lt;p&gt;移位指令分为算术移位和逻辑移位。&lt;/p&gt;
&lt;p&gt;移动操作数的位有两种方法。第一种是逻辑移位 (logic shift)，空出来的位用 0 填充。如下图所示，一个字节的数据向右移动一位。也就是说，每一位都被移动到其旁边的低位上。注意，位 7 被填充为 0：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下图所示为二进制数 1100 1111 逻辑右移一位，得到 OllOOlll。最低位移入进位标志位：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;另一种移位的方法是算术移位 (arithmetic shift)，空出来的位用原数据的符号位填充：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例如，二进制数 1100 1111，符号位为 1。算术右移一位后，得到 1110 0111：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;逻辑移位:   &lt;code&gt;SHL&lt;/code&gt; 、 &lt;code&gt;SHR&lt;/code&gt; &lt;br /&gt;
 算术移位:   &lt;code&gt;CAL&lt;/code&gt; 、 &lt;code&gt;CAR&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;无符号数的乘法和除法可以用逻辑移位；&lt;br /&gt;
 有符号数的乘法和除法可以用算术移位；&lt;/p&gt;
&lt;h3 id=&#34;逻辑移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑移位指令&#34;&gt;#&lt;/a&gt; 逻辑移位指令&lt;/h3&gt;
&lt;p&gt;SHL（左移）指令使目的操作数逻辑左移一位，最低位用 0 填充。最高位移入进位标志位，而进位标志位中原来的数值被丢弃&lt;br /&gt;
 SHR（右移）指令使目的操作数逻辑右移一位，最高位用 0 填充。最低位复制到进位标志位，而进位标志位中原来的数值被丢弃&lt;/p&gt;
&lt;p&gt;SHL/SHR 的第一个操作数是目的操作数，第二个操作数是移位次数：&lt;br /&gt;
SHL/SHR destination,count&lt;/p&gt;
&lt;p&gt;该指令可用的操作数类型如下所示：&lt;br /&gt;
SHL/SHR reg, imm8&lt;br /&gt;
SHL/SHR mem, imm8&lt;br /&gt;
SHL/SHR reg, CL&lt;br /&gt;
SHL/SHR mem, CL&lt;/p&gt;
&lt;p&gt;x86 处理器允许 imm8 为 0〜255 中的任何整数。另外，CL 寄存器包含的是移位计数。上述格式同样适用于 SHR、SAL、SAR、ROR、ROL、RCR 和 RCL 指令。&lt;/p&gt;
&lt;h3 id=&#34;算术移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算术移位指令&#34;&gt;#&lt;/a&gt; 算术移位指令&lt;/h3&gt;
&lt;p&gt;算数移位指令分为：算数左移 SAL (Shift Algebraic Left) 和算数右移 SAR (Shift Algebraic Right);&lt;br /&gt;
 指令格式:  &lt;code&gt;SAL/SAR reg/mem,CL/imm&lt;/code&gt; &lt;br /&gt;
 受影响的标志位：CF,OF,PF,SF,ZF; 对 AF 的影响无定义；&lt;/p&gt;
&lt;h3 id=&#34;循环移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环移位指令&#34;&gt;#&lt;/a&gt; 循环移位指令&lt;/h3&gt;
&lt;p&gt;循环移位指令 ror 和 rol 与移位指令类似，但移出的那一位会被填到另一端空出来的位置上，即右循环指令（ror）会将最低位循环一到最高位；左循环移位（rol）则相反。&lt;/p&gt;
&lt;h2 id=&#34;nop指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nop指令&#34;&gt;#&lt;/a&gt; NOP 指令&lt;/h2&gt;
&lt;p&gt;nop 指令什么也不做。当它出现时，直接执行下一条指令。&lt;br /&gt;
nop 指令实际上是 xchg eax,eax 的一个谓名字&lt;/p&gt;
&lt;h1 id=&#34;栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈&#34;&gt;#&lt;/a&gt; 栈&lt;/h1&gt;
&lt;h2 id=&#34;posh-指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#posh-指令&#34;&gt;#&lt;/a&gt; posh 指令&lt;/h2&gt;
&lt;h1 id=&#34;renference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#renference&#34;&gt;#&lt;/a&gt; Renference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjI3MjM1L2FydGljbGUvZGV0YWlscy84MDM2ODI1NA==&#34;&gt;https://blog.csdn.net/qq_41627235/article/details/80368254&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZW5rdS5iYWlkdS5jb20vdmlldy81MThkM2U4NWRmMzZhMzJkNzM3NWE0MTc4NjZmYjg0YWU0NWNjMzg2Lmh0bWw=&#34;&gt;https://wenku.baidu.com/view/518d3e85df36a32d7375a417866fb84ae45cc386.html&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodWhlamlhbzE1MTYvYXJ0aWNsZS9kZXRhaWxzLzEwMDg3NTEwNQ==&#34;&gt;https://blog.csdn.net/chuhejiao1516/article/details/100875105&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzM1ODkuaHRtbA==&#34;&gt;http://c.biancheng.net/view/3589.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</guid>
            <title>密码学数论基础</title>
            <link>https://self-ferry.github.io/2021/03/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</link>
            <category term="密码编码学与网络安全" scheme="https://self-ferry.github.io/categories/%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
            <category term="数论基础" scheme="https://self-ferry.github.io/tags/%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/" />
            <pubDate>Wed, 24 Mar 2021 14:19:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数论基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数论基础&#34;&gt;#&lt;/a&gt; 数论基础&lt;/h1&gt;
&lt;h2 id=&#34;整除性和带余除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整除性和带余除法&#34;&gt;#&lt;/a&gt; 整除性和带余除法&lt;/h2&gt;
&lt;h2 id=&#34;整除性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整除性&#34;&gt;#&lt;/a&gt; 整除性&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;定义：&lt;/span&gt;&lt;br /&gt;
a、b 是两个整数，b≠0 ，如果存在一个整数 m 使等式 a=m*b 成立，则称 b 整除 a，记为 b|a,a 是被除数，b 是除数。&lt;/p&gt;
&lt;p&gt;a/b 记为 b|a a 除以 b 记为 b 整除 a&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;性质：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 a|1， 则 a=±1。&lt;/li&gt;
&lt;li&gt;若 a|b 且 b|a，则 a=±b。&lt;/li&gt;
&lt;li&gt;任何不等于零的数整除 0。&lt;/li&gt;
&lt;li&gt;若 a|b 且 b|c，则 a|c。&lt;br /&gt;
 &lt;code&gt;11|66 且 66|198 =&amp;gt; 11|198&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对任意整数 m，n，若 b|g 且 b|h，则可得出 b|（mg+nh）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之所以得出最后一条结论，是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 b|g，存在 g1，使得 g 可以表示为 g=b*g1&lt;/li&gt;
&lt;li&gt;若 b|h, 则存在 h1，使得还可以表示为 h=b*h1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以：&lt;br /&gt;
 &lt;code&gt;mg + nh = mbg1 + nbh1 = b * (mg1 + nh1)&lt;/code&gt; &lt;br /&gt;
 得出 b 整除 mg+nh。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例题&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;带余除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带余除法&#34;&gt;#&lt;/a&gt; 带余除法&lt;/h3&gt;
&lt;p&gt;对给定的任意一个正整数 n 和任意非负整数 a, 若用 n 除 a, 得到整数商 q 和整数余数 r, 则满足以下关系式:&lt;br /&gt;
 &lt;code&gt;a = qn + r, 0 ≤ r &amp;lt; n; q = |(a|b)|&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;欧几里得算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#欧几里得算法&#34;&gt;#&lt;/a&gt; 欧几里得算法&lt;/h2&gt;
&lt;h3 id=&#34;最大公约数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最大公约数&#34;&gt;#&lt;/a&gt; 最大公约数&lt;/h3&gt;
&lt;p&gt;最大公约数，也称最大公因数、最大公因子，指两个或多个整数共有约数中最大的一个。&lt;/p&gt;
&lt;p&gt;对于整数 a,b,m, 若满足 a=mb, 则称非零整数 b 是 a 的一个因子。我们用 gcd (a,b) 来表示 a 的最大公因子。a 和 b 的最大公因子是能同时整除 a 和 b 的最大整数。另外，定义 gcd (0,0)=0。&lt;br /&gt;
更正式的描述是，正整数 c 称为 a 和 b 的最大公因子，如果&lt;br /&gt;
 (1) c 是 a 和 b 的因子。&lt;br /&gt;
(2) a、b 的因子都是 c 的一个因子。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/23/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</guid>
            <title>数组与矩阵</title>
            <link>https://self-ferry.github.io/2021/03/23/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</link>
            <pubDate>Tue, 23 Mar 2021 19:09:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/23/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</guid>
            <title>pandas库学习</title>
            <link>https://self-ferry.github.io/2021/03/23/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</link>
            <pubDate>Tue, 23 Mar 2021 19:08:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/23/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/</guid>
            <title>numpy库学习</title>
            <link>https://self-ferry.github.io/2021/03/23/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/</link>
            <category term="python" scheme="https://self-ferry.github.io/categories/python/" />
            <category term="数据分析" scheme="https://self-ferry.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/" />
            <pubDate>Tue, 23 Mar 2021 19:07:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9udW1weS9udW1weS10dXRvcmlhbC5odG1s&#34;&gt;https://www.runoob.com/numpy/numpy-tutorial.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;numpy库简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy库简介&#34;&gt;#&lt;/a&gt; Numpy 库简介&lt;/h1&gt;
&lt;p&gt;NumPy (Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/p&gt;
&lt;p&gt;NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。&lt;/p&gt;
&lt;p&gt;NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个强大的 N 维数组对象 ndarray&lt;/li&gt;
&lt;li&gt;广播功能函数&lt;/li&gt;
&lt;li&gt;整合 C/C++/Fortran 代码的工具&lt;/li&gt;
&lt;li&gt;线性代数、傅里叶变换、随机数生成等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;numpy-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy-应用&#34;&gt;#&lt;/a&gt; NumPy 应用&lt;/h1&gt;
&lt;p&gt;NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。&lt;/p&gt;
&lt;p&gt;SciPy 是一个开源的 Python 算法库和数学工具包。&lt;/p&gt;
&lt;p&gt;SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。&lt;/p&gt;
&lt;p&gt;Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。&lt;/p&gt;
&lt;h1 id=&#34;相关链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关链接&#34;&gt;#&lt;/a&gt; 相关链接&lt;/h1&gt;
&lt;p&gt;NumPy 官网 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5udW1weS5vcmcv&#34;&gt;http://www.numpy.org/&lt;/span&gt;&lt;br /&gt;
NumPy 源代码：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5&#34;&gt;https://github.com/numpy/numpy&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;numpy-ndarray对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy-ndarray对象&#34;&gt;#&lt;/a&gt; Numpy Ndarray 对象&lt;/h1&gt;
&lt;p&gt;NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。&lt;/p&gt;
&lt;p&gt;ndarray 对象是用于存放同类型元素的多维数组。&lt;/p&gt;
&lt;p&gt;ndarray 中的每个元素在内存中都有相同存储大小的区域。&lt;/p&gt;
&lt;p&gt;ndarray 内部由以下内容组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个指向数据（内存或内存映射文件中的一块数据）的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据类型或 dtype，描述在数组中的固定大小值的格子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个表示数组形状（shape）的元组，表示各维度大小的元组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要 &amp;quot;跨过&amp;quot; 的字节数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;创建ndarray&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建ndarray&#34;&gt;#&lt;/a&gt; 创建 Ndarray&lt;/h1&gt;
&lt;p&gt;创建一个 ndarray 只需调用 NumPy 的 array 函数即可：&lt;br /&gt;
 &lt;code&gt;numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;名称&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;object&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数组或嵌套的数列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;dtype&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数组元素的数据类型，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;copy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对象是否需要复制，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;order&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;创建数组的样式，C 为行方向，F 为列方向，A 为任意方向（默认）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;subok&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认返回一个与基类类型一致的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;ndmin&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定生成数组的最小维度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;认识numpy的数组对象ndarray&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识numpy的数组对象ndarray&#34;&gt;#&lt;/a&gt; 认识 Numpy 的数组对象 Ndarray&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np  &lt;span class=&#34;token comment&#34;&gt;# 导入 NumPy 库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 创建一维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; 创建的数组为： &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建二维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组元素个数为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组元素个数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组每个元素大小为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itemsize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组每个元素大小&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 重新设置 shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;重新设置shape 后的arr2 为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用arange函数创建的数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用linspace函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linspace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用logspace函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;logspace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用zeros函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用eye函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;eye&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用diag函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;diag&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用ones函数的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ones&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 浮点型转换为整型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为布尔型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为布尔型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 布尔型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 布尔型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;str_&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;numitems&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;price&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;itemz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;tomatoes&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cabbages&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.72&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                 dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;自定义数据为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; itemz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 用整数作为下标可以获取数组中的某个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 用范围作为下标获取数组的一个切片，包括 arr [3] 不包括 arr [5]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 省略开始下标，表示从 arr [0] 开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 下标可以使用负数，-1 表示从数组后往前数的第一个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 下标还可以用来修改元素的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 范围中的第三个参数表示步长，2 表示隔一个元素取一个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 步长为负数时，开始下标必须大于结束下标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 0 行中第 3 和第 4 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 索引第 2 和第 3 行中第 3 列、第 4 列和第 5 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 2 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从两个序列的对应位置取出两个整数组成下标：arr [0,1], arr [1,2], arr [2,3]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 2、3 行中第 0、2、3 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mask 是一个布尔数组，它索引第 1、3 行中第 2 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;mask&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 创建一维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的一维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;新的一维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 设置数组的形状&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组维度为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ndim&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组维度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平后为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ravel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 横向展平&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;F&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 纵向展平&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组1为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr1 &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组2为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hstack&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# hstack 函数横向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vstack&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# vstack 函数纵向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concatenate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# concatenate 函数横向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concatenate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# concatenate 函数纵向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hsplit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# hsplit 函数横向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vsplit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# vsplit 函数纵向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# split 函数横向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# split 函数纵向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/09/web%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</guid>
            <title>web漏洞-业务逻辑漏洞</title>
            <link>https://self-ferry.github.io/2021/03/09/web%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</link>
            <pubDate>Tue, 09 Mar 2021 16:15:23 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=491097414&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;又要鸽了 0，有事情要忙。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE5NTgzNy5odG1s&#34;&gt;逻辑漏洞挖掘初步总结篇&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWC1jYWlqaS9wLzExMjA5OTYzLmh0bWw=&#34;&gt;Web 安全测试中常见逻辑漏洞解析（实战篇）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5OTE2OTIvYXJ0aWNsZS9kZXRhaWxzLzgyOTUzMjEz&#34;&gt;常见逻辑漏洞&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;挖掘出属于自己思维的逻辑漏洞。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/09/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</guid>
            <title>Nmap速查手册</title>
            <link>https://self-ferry.github.io/2021/03/09/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</link>
            <category term="web安全" scheme="https://self-ferry.github.io/categories/web-security/" />
            <category term="Nmap" scheme="https://self-ferry.github.io/tags/Nmap/" />
            <pubDate>Tue, 09 Mar 2021 16:14:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=30621618&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuMmN0by5jb20vQXJ0aWNsZS8yMDE0MTIvMzYyMTg4Lmh0bWw=&#34;&gt;https://www.2cto.com/Article/201412/362188.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;nmap-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap-简介&#34;&gt;#&lt;/a&gt; Nmap 简介&lt;/h1&gt;
&lt;p&gt;Nmap 是 Network Mapper 的简称&lt;br /&gt;
 Nmap 是一款开源免费的网络发现（Network Discovery）和安全审计（Security Auditing）工具&lt;br /&gt;
 1997 年由 Fyodor 创建&lt;/p&gt;
&lt;p&gt;Nmap 四项基本功能：&lt;/p&gt;
&lt;p&gt;1. 主机发现（Host Discovery）&lt;br /&gt;
2. 端口扫描（Port Scanning）&lt;br /&gt;
3. 版本侦测（Version Detection）&lt;br /&gt;
4. 操作系统侦测（Operating System Detection）&lt;/p&gt;
&lt;p&gt;这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随&lt;br /&gt;
后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基&lt;br /&gt;
础上，Nmap 提供防火墙与 IDS（IntrusionDetection System, 入侵检测系统）的规避技巧，可以综合应用到四个基本功&lt;br /&gt;
能的各个阶段；另外 Nmap 提供强大的 NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充&lt;br /&gt;
和扩展。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;大致功能为:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主机存活检测&lt;/li&gt;
&lt;li&gt;端口探测&lt;/li&gt;
&lt;li&gt;服务识别&lt;/li&gt;
&lt;li&gt;操作系统识别&lt;/li&gt;
&lt;li&gt;硬件地址检测&lt;/li&gt;
&lt;li&gt;服务版本识别&lt;/li&gt;
&lt;li&gt;漏洞扫描，使用 nmap 自带脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;nmap参数详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap参数详解&#34;&gt;#&lt;/a&gt; Nmap 参数详解&lt;/h1&gt;
&lt;h2 id=&#34;nmap支持主机名ip网段的表示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap支持主机名ip网段的表示方式&#34;&gt;#&lt;/a&gt; Nmap 支持主机名，ip, 网段的表示方式&lt;/h2&gt;
&lt;p&gt;例如:blah.highon.coffee, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25hbXAub3JnLzI0&#34;&gt;namp.org/24&lt;/span&gt;, 192.168.0.1;10.0.0-25.1-254&lt;/p&gt;
&lt;p&gt;-iL filename                    从文件中读取待检测的目标，文件中的表示方法支持机名，ip, 网段&lt;br /&gt;
 - iR hostnum                     随机选取，进行扫描。如果 - iR 指定为 0, 则是无休止的扫描&lt;br /&gt;
 --exclude host1 [, host2]        从扫描任务中需要排除的主机&lt;br /&gt;
 --exculdefile exclude_file      排除文件中的 IP, 格式和 - iL 指定扫描文件的格式相同&lt;/p&gt;
&lt;h2 id=&#34;0x00-主机发现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-主机发现&#34;&gt;#&lt;/a&gt; 0x00 主机发现&lt;/h2&gt;
&lt;p&gt;-sL                     仅仅是显示，扫描的 IP 数目，不会进行任何扫描&lt;br /&gt;
 - sn                     ping 扫描，即主机发现&lt;br /&gt;
 - Pn                     不检测主机存活&lt;br /&gt;
 - PS/PA/PU/PY [portlist]  TCP SYN Ping/TCP ACK Ping/UDP Ping 发现&lt;br /&gt;
 - PE/PP/PM               使用 ICMP echo, timestamp and netmask 请求包发现主机&lt;br /&gt;
 - PO [prococol list]      使用 IP 协议包探测对方主机是否开启&lt;br /&gt;
 - n/-R                   不对 IP 进行域名反向解析 / 为所有的 IP 都进行域名的反响解析&lt;/p&gt;
&lt;h2 id=&#34;0x01-扫描技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-扫描技巧&#34;&gt;#&lt;/a&gt; 0x01 扫描技巧&lt;/h2&gt;
&lt;p&gt;-sS/sT/sA/sW/sM                 TCP SYN/TCP connect ()/ACK/TCP 窗口扫描 / TCP Maimon 扫描&lt;br /&gt;
 - sU                             UDP 扫描&lt;br /&gt;
 - sN/sF/sX                       TCP Null，FIN，and Xmas 扫描&lt;br /&gt;
 --scanflags                     自定义 TCP 包中的 flags&lt;br /&gt;
-sI zombie host[:probeport]     Idlescan&lt;br /&gt;
-sY/sZ                          SCTP INIT/COOKIE-ECHO 扫描&lt;br /&gt;
 - sO                             使用 IP protocol 扫描确定目标机支持的协议类型&lt;br /&gt;
 - b “FTP relay host” 使用 FTP bounce scan&lt;/p&gt;
&lt;h2 id=&#34;0x02-指定端口和扫描顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-指定端口和扫描顺序&#34;&gt;#&lt;/a&gt; 0x02 指定端口和扫描顺序&lt;/h2&gt;
&lt;p&gt;-p                      特定的端口 -p80,443 或者 -p1-65535&lt;br /&gt;
-p U:PORT               扫描 udp 的某个端口，-p U:53&lt;br /&gt;
-F                      快速扫描模式，比默认的扫描端口还少&lt;br /&gt;
 - r                      不随机扫描端口，默认是随机扫描的&lt;br /&gt;
 --top-ports &amp;quot;number&amp;quot;    扫描开放概率最高的 number 个端口，出现的概率需要参考 nmap-services 文件，ubuntu 中该文件位于 /usr/share/nmap.nmap 默认扫前 1000 个&lt;br /&gt;
 --port-ratio &amp;quot;ratio&amp;quot;    扫描指定频率以上的端口&lt;/p&gt;
&lt;h2 id=&#34;0x03-服务版本识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x03-服务版本识别&#34;&gt;#&lt;/a&gt; 0x03 服务版本识别&lt;/h2&gt;
&lt;p&gt;-sV                             开放版本探测，可以直接使用 - A 同时打开操作系统探测和版本探测&lt;br /&gt;
 --version-intensity &amp;quot;level&amp;quot;     设置版本扫描强度，强度水平说明了应该使用哪些探测报文。数值越高，服务越有可能被正确识别。默认是 7&lt;br /&gt;
--version-light                 打开轻量级模式，为 --version-intensity 2 的别名&lt;br /&gt;
 --version-all                   尝试所有探测，为 --version-intensity 9 的别名&lt;br /&gt;
 --version-trace                 显示出详细的版本侦测过程信息&lt;/p&gt;
&lt;h2 id=&#34;0x04-脚本扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x04-脚本扫描&#34;&gt;#&lt;/a&gt; 0x04 脚本扫描&lt;/h2&gt;
&lt;p&gt;-sC                             根据端口识别的服务，调用默认脚本&lt;br /&gt;
 --script=”Lua scripts”          调用的脚本名&lt;br /&gt;
 --script-args=n1=v1,[n2=v2]     调用的脚本传递的参数&lt;br /&gt;
 --script-args-file=filename     使用文本传递参数&lt;br /&gt;
 --script-trace                  显示所有发送和接收到的数据&lt;br /&gt;
 --script-updatedb               更新脚本的数据库&lt;br /&gt;
 --script-help=”Lua script”      显示指定脚本的帮助&lt;/p&gt;
&lt;h2 id=&#34;0x05-os识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x05-os识别&#34;&gt;#&lt;/a&gt; 0x05 OS 识别&lt;/h2&gt;
&lt;p&gt;-O              启用操作系统检测，-A 来同时启用操作系统检测和版本检测&lt;br /&gt;
 --osscan-limit  针对指定的目标进行操作系统检测 (至少需确知该主机分别有一个 open 和 closed 的端口)&lt;br /&gt;
--osscan-guess  推测操作系统检测结果，当 Nmap 无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap 默认进行这种匹配&lt;/p&gt;
&lt;h2 id=&#34;0x06-防火墙ids躲避和欺骗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x06-防火墙ids躲避和欺骗&#34;&gt;#&lt;/a&gt; 0x06 防火墙 / IDS 躲避和欺骗&lt;/h2&gt;
&lt;p&gt;-f; --mtu value                 指定使用分片、指定数据包的 MTU.&lt;br /&gt;
-D decoy1,decoy2,ME             使用诱饵隐蔽扫描&lt;br /&gt;
 - S IP-ADDRESS                   源地址欺骗&lt;br /&gt;
 - e interface                    使用指定的接口&lt;br /&gt;
 - g/--source-port PROTNUM       使用指定源端口&lt;br /&gt;
 --proxies url1,[url2],...       使用 HTTP 或者 SOCKS4 的代理&lt;/p&gt;
&lt;p&gt;--data-length NUM               填充随机数据让数据包长度达到 NUM&lt;br /&gt;
--ip-options OPTIONS            使用指定的 IP 选项来发送数据包&lt;br /&gt;
 --ttl VALUE                     设置 IP time-to-live 域&lt;br /&gt;
 --spoof-mac ADDR/PREFIX/VEBDOR  MAC 地址伪装&lt;br /&gt;
 --badsum                        使用错误的 checksum 来发送数据包&lt;/p&gt;
&lt;h2 id=&#34;0x07-输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x07-输出&#34;&gt;#&lt;/a&gt; 0x07 输出&lt;/h2&gt;
&lt;p&gt;-oN                     将标准输出直接写入指定的文件&lt;br /&gt;
 - oX                     输出 xml 文件&lt;br /&gt;
 - oS                     将所有的输出都改为大写&lt;br /&gt;
 - oG                     输出便于通过 bash 或者 perl 处理的格式，非 xml&lt;br /&gt;
-oA BASENAME            可将扫描结果以标准格式、XML 格式和 Grep 格式一次性输出&lt;br /&gt;
 - v                      提高输出信息的详细度&lt;br /&gt;
 - d level                设置 debug 级别，最高是 9&lt;br /&gt;
--reason                显示端口处于带确认状态的原因&lt;br /&gt;
 --open                  只输出端口状态为 open 的端口&lt;br /&gt;
 --packet-trace          显示所有发送或者接收到的数据包&lt;br /&gt;
 --iflist                显示路由信息和接口，便于调试&lt;br /&gt;
 --log-errors            把日志等级为 errors/warings 的日志输出&lt;br /&gt;
 --append-output         追加到指定的文件&lt;br /&gt;
 --resume FILENAME       恢复已停止的扫描&lt;br /&gt;
 --stylesheet PATH/URL   设置 XSL 样式表，转换 XML 输出&lt;br /&gt;
 --webxml                从 namp.org 得到 XML 的样式&lt;br /&gt;
 --no-sytlesheet         忽略 XML 声明的 XSL 样式表&lt;/p&gt;
&lt;h2 id=&#34;0x08-其他选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x08-其他选项&#34;&gt;#&lt;/a&gt; 0x08 其他选项&lt;/h2&gt;
&lt;p&gt;-6                      开启 IPv6&lt;br /&gt;
-A                      OS 识别，版本探测，脚本扫描和 traceroute&lt;br /&gt;
--datedir DIRNAME       说明用户 Nmap 数据文件位置&lt;br /&gt;
 --send-eth /--send-ip  使用原以太网帧发送 / 在原 IP 层发送&lt;br /&gt;
 --privileged            假定用户具有全部权限&lt;br /&gt;
 --unprovoleged          假定用户不具有全部权限，创建原始套接字需要 root 权限&lt;br /&gt;
 - V                      打印版本信息&lt;br /&gt;
 - h                      输出帮助&lt;/p&gt;
&lt;h1 id=&#34;nmap-例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap-例子&#34;&gt;#&lt;/a&gt; nmap 例子&lt;/h1&gt;
&lt;p&gt;使用 ping 检测 10.0.0.0/24 这个网段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -sP 10.0.0.0/24&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 的方法对全端口进行扫描，在 aggressive (4) 的时间模板下，同时对开放的端口进行端口识别&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -p1-65535 -sV -sS -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PS: -T 代表的是扫描的时候，一些控制选项 (TCP 的延迟时间，探测报文之间的间隔等) 的集合，具体的 man nmap 一下就知道了&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 aggressive (4) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sS -A -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sS -A -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，操作系统的类型，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sV -O -sS -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 aggressive (4) 的时间模板下，探测操作系统的类型还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -p 1-65535 -sV -O -sS -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -p 1-65535 -sV -O -sS -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从文件中读取需要扫描的 IP 列表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -iL ip-address.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nmap 输出格式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;扫描的结果输出到屏幕，同时会存储一份到 grep-output.txt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -p 139,445 -oG grep-output.txt 10.0.1.0/24&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;扫描结果输出为 html&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sS -sV -T5 10.0.1.99 --webxml -oX - | xsltproc --output file.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nmap 扫描 Netbios&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在子网中发现开放 netbios 的 IP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -v -p139,445 10.0.0.1/24&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;扫描指定 netbios 的名称&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sU --script nbstat.nse -p 137 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;扫描指定的目标，同时检测相关漏洞&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap --script-args=unsafe=1 --script smb-check-vulns.nse -p 445 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将 nmap 的 80 端口的扫描结果，通过管道交给 nikto 进行扫描&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nmap Nikto Scan nmap -p80 10.0.1.0/24 -oG - | nikto.pl -h -&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将 nmap 的 80,443 端口的扫描结果，通过管道交给 nikto 进行扫描&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -p80,443 10.0.1.0/24 -oG - | nikto.pl -h -&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/02/%E5%88%9D%E5%AD%A6webshell%E6%A3%80%E6%B5%8B/</guid>
            <title>初学webshell检测</title>
            <link>https://self-ferry.github.io/2021/03/02/%E5%88%9D%E5%AD%A6webshell%E6%A3%80%E6%B5%8B/</link>
            <pubDate>Tue, 02 Mar 2021 17:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
    </channel>
</rss>
