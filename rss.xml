<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>1asy</title>
        <subtitle>Till I no longer can</subtitle>
        <icon>https://self-ferry.github.io/images/favicon.ico</icon>
        <link>https://Self-ferry.github.io</link>
        <author>
          <name>1asy</name>
        </author>
        <description>临渊羡鱼，不如退而结网</description>
        <language>zh-CN</language>
        <pubDate>Tue, 04 May 2021 04:49:52 +0800</pubDate>
        <lastBuildDate>Tue, 04 May 2021 04:49:52 +0800</lastBuildDate>
        <category term="学习" />
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/04/%E6%96%B0%E5%A2%9E%E8%8A%82/</guid>
            <title>新增节</title>
            <link>https://self-ferry.github.io/2021/05/04/%E6%96%B0%E5%A2%9E%E8%8A%82/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="新增节" scheme="https://self-ferry.github.io/tags/%E6%96%B0%E5%A2%9E%E8%8A%82/" />
            <pubDate>Tue, 04 May 2021 04:49:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/02/%E6%89%A9%E5%A4%A7%E8%8A%82/</guid>
            <title>扩大节</title>
            <link>https://self-ferry.github.io/2021/05/02/%E6%89%A9%E5%A4%A7%E8%8A%82/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="扩大节" scheme="https://self-ferry.github.io/tags/%E6%89%A9%E5%A4%A7%E8%8A%82/" />
            <pubDate>Sun, 02 May 2021 17:26:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;为什么扩大节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么扩大节&#34;&gt;#&lt;/a&gt; 为什么扩大节？&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;我们可以在任意空白区添加自己的代码，但如果添加的代码比较多，空白区不够怎么办？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面我们讲了，空白区添加我们的代码。但是有的时候。我们的空白区不够了怎么办。所以需要进行扩大节.&lt;/p&gt;
&lt;p&gt;扩大节其实很简单。修改节数据对齐后的大小即可。并且在 PE 文件中添加 0 数据进行填充即可.&lt;/p&gt;
&lt;p&gt;首先看一下我们的节表&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef struct _IMAGE_SECTION_HEADER &amp;#123;
    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; //8个字节名字.自己可以起.编译器也可以给定.不重要.
    union &amp;#123;
            DWORD   PhysicalAddress;       
            DWORD   VirtualSize;           //节数据没有对齐后的大小.也就是没有对齐.节数据有多大.
    &amp;#125; Misc;
    DWORD   VirtualAddress;　　　　　　　　　　//加载到内存中的第一个字节的地址.也就是虚拟地址.节在内存中哪里开始.内存中的VA + ImageBase 才是真正的节开始位置
    DWORD   SizeOfRawData;　　　　　　　　　　 //修改这个属性的值,即可扩大节.并且在PE文件中添加相应的0数据进行填充.
    DWORD   PointerToRawData;　　　　　　　　  //在文件中的偏移.是文件对齐成员倍数.
    DWORD   PointerToRelocations;           //一下都是调试相关.
    DWORD   PointerToLinenumbers;           //
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;　　　　　　　　　　//节的属性
&amp;#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;扩大哪一个节呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩大哪一个节呢&#34;&gt;#&lt;/a&gt; 扩大哪一个节呢？&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;若是扩大前面几个节，则后面的节都要改动。所以一般扩大最后一个节。&lt;/p&gt;
&lt;h1 id=&#34;扩大节的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩大节的步骤&#34;&gt;#&lt;/a&gt; 扩大节的步骤&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分配一块新的空间，大小为 &lt;code&gt;S&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将最后一个节的 SizeOfRawData 和 VirtualSize 改为 N&lt;br /&gt;
 &lt;code&gt;N = (SizeOfRawData或者VirtualSize内存对齐后的值) + S&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 SizeOflmage 大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;推荐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#推荐&#34;&gt;#&lt;/a&gt; 推荐&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzk3MzUyNzYuaHRtbA==&#34;&gt;https://www.cnblogs.com/iBinary/p/9735276.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/02/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</guid>
            <title>在空白区添加代码</title>
            <link>https://self-ferry.github.io/2021/05/02/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="空白区添加代码" scheme="https://self-ferry.github.io/tags/%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/" />
            <pubDate>Sun, 02 May 2021 16:58:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;在代码空白区添加代码手动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在代码空白区添加代码手动&#34;&gt;#&lt;/a&gt; 在代码空白区添加代码 (手动)&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;添加的是硬编码&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1、获取 MessageBox 地址，构造 ShellCode 代码&lt;/p&gt;
&lt;p&gt;2、E8 E9 计算公式&lt;/p&gt;
&lt;p&gt;3、在代码区手动添加代码&lt;/p&gt;
&lt;p&gt;4、修改入口地址，指向 ShellCode&lt;br /&gt;
 入口地址:xxxx&lt;/p&gt;
&lt;p&gt;call 0x12345678 			Call 0x77E5425F&lt;/p&gt;
&lt;p&gt;E8 53 FE FF FF&lt;/p&gt;
&lt;p&gt;jmp 0x2345678&lt;/p&gt;
&lt;p&gt;E9 2B 2B 00 00&lt;/p&gt;
&lt;p&gt;真正要跳转的地址 = E8 这条指令的下一行地址 + X&lt;/p&gt;
&lt;p&gt;X = 真正要跳转的地址 - E8 这条指令的下一行地址&lt;/p&gt;
&lt;p&gt;X = 00401050 - 004011FD&lt;/p&gt;
&lt;p&gt;X = 00403b80 - 00401055&lt;/p&gt;
&lt;p&gt;要跳转的地方 = E8 当前的地址 + 5 + X&lt;/p&gt;
&lt;p&gt;X = 要跳转的地址 - (E8 的地址 + 5)&lt;/p&gt;
&lt;p&gt;6A 00 6A 00 6A 00 6A 00 E8 00 00 00 00 E9 00 00 00 00&lt;/p&gt;
&lt;h1 id=&#34;实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实战&#34;&gt;#&lt;/a&gt; 实战&lt;/h1&gt;
&lt;p&gt;OD 查找 MessageBox 位置。&lt;/p&gt;
&lt;p&gt;显示模块窗口。&lt;/p&gt;
&lt;p&gt;找到 USER32.dll, 双击进入后， &lt;code&gt;Ctrl+N&lt;/code&gt;  打开当前模块的名称（标签）列表。在里面查找 MessageBox。&lt;/p&gt;
&lt;p&gt;MessageBox:0x76321930&lt;br /&gt;
MessageBox - ImageBase -508 - 5 =  75F2 1423&lt;br /&gt;
401000&lt;/p&gt;
&lt;p&gt;3F FAEE&lt;/p&gt;
&lt;p&gt;6A 00 6A 00 6A 00 6A 00 E8 23 14 F2 75 E9 EE FA 3F 00&lt;/p&gt;
&lt;p&gt;00007FFDA9672180&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/05/02/RVA%E4%B8%8EFOA%E8%BD%AC%E6%8D%A2/</guid>
            <title>RVA与FOA转换</title>
            <link>https://self-ferry.github.io/2021/05/02/RVA%E4%B8%8EFOA%E8%BD%AC%E6%8D%A2/</link>
            <category term="WindowsPE" scheme="https://self-ferry.github.io/categories/WindowsPE/" />
            <category term="RVA与FOA" scheme="https://self-ferry.github.io/tags/RVA%E4%B8%8EFOA/" />
            <pubDate>Sun, 02 May 2021 16:05:32 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;引出问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引出问题&#34;&gt;#&lt;/a&gt; 引出问题&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;如果想改变一个全区变量的初始值，该怎么做？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果一个变量有值，那这个值是存储在 PE 中的。&lt;/p&gt;
&lt;p&gt;有一个小细节：定义一个变量，当它加载在内存中的时候才会有默认初始值的。在 C 中定义一个整型变量，不给它赋值打印它，默认是为 0 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;面临的问题是什么？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转换&#34;&gt;#&lt;/a&gt; 转换&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;RVA: 相对虚拟地址&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;label&#34;&gt; FOA: 文件偏移地址&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RVA TO FOA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即我们现在知道内存状态下的偏移，需要找到文件状态下的偏移。&lt;br /&gt;
步骤如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;step1：内存中的地址减去内存基址得到偏移，即 RVA。&lt;br /&gt;
step2：循环遍历节表中各个节的信息，判断在哪个节中。（需要满足：内存偏移 + 节数据没对齐的大小 &amp;gt; image_panyi &amp;gt; 内存偏移）&lt;br /&gt;
step3: 找出在哪个节后，减去该节在内存中的偏移（VirturalAddress）得到在该节中的相对偏移。&lt;br /&gt;
step4: 上一步得到的该节的相对偏移 + 该节在文件中的偏移 (PointToRawData)，即得到 FOA&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;FOA TO RVA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在我们已经知道如何从内存中的偏移转化为文件中的偏移。现在是它的逆过程&lt;br /&gt;
 step1: 文件中的地址减去文件基址，得到在文件中的偏移，即 FOA。&lt;br /&gt;
step2: 循环遍历节表中各个节的信息，判断在哪个节中。（文件对齐 + 文件偏移 &amp;gt; file_panyi &amp;gt; 文件偏移）&lt;br /&gt;
step3: 找出在哪个节后，减去该节在文件中的偏移（VirturalAddress）得到在该节中的相对偏移。&lt;br /&gt;
step4: 上一步得到的该节的相对偏移 + 该节在内存中的偏移 (VirtualAddress)，即得到 RVA。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;RVA 转换 FOA，在以后的破解或者保护中只是基本功而已！基础要打牢。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oxNzgwNTAwODc3NS9hcnRpY2xlL2RldGFpbHMvMTA1Mzc0NTAz&#34;&gt;https://blog.csdn.net/z17805008775/article/details/105374503&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/04/25/C%E3%80%81C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <title>C、C++学习笔记</title>
            <link>https://self-ferry.github.io/2021/04/25/C%E3%80%81C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Sun, 25 Apr 2021 16:49:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/04/20/Linux%E4%B8%AD%E7%9A%84su%E4%B8%8Esu-%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
            <title>Linux中的su与su -命令的区别</title>
            <link>https://self-ferry.github.io/2021/04/20/Linux%E4%B8%AD%E7%9A%84su%E4%B8%8Esu-%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
            <category term="Linux" scheme="https://self-ferry.github.io/categories/Linux/" />
            <category term="Linux" scheme="https://self-ferry.github.io/tags/Linux/" />
            <pubDate>Tue, 20 Apr 2021 22:26:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;详情见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5oYTk3LmNvbS80MDAxLmh0bWw=&#34;&gt; http://www.ha97.com/4001.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区别&#34;&gt;#&lt;/a&gt; 区别&lt;/h2&gt;
&lt;p&gt;su 命令和 su - 命令最大的本质区别就是：前者只是切换了 root 身份，但 Shell 环境仍然是普通用户的 Shell；而后者连用户和 Shell 环境一起切换成 root 身份了。只有切换了 Shell 环境才不会出现 PATH 环境变量错误。su 切换成 root 用户以后，pwd 一下，发现工作目录仍然是普通用户的工作目录；而用 su - 命令切换以后，工作目录变成 root 的工作目录了。用 echo $PATH 命令看一下 su 和 su - 以后的环境变量有何不同。以此类推，要从当前用户切换到其它用户也一样，应该使用 su - 命令。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/04/20/Linux%E9%85%8D%E7%BD%AEvsftp/</guid>
            <title>Linux配置vsftp</title>
            <link>https://self-ferry.github.io/2021/04/20/Linux%E9%85%8D%E7%BD%AEvsftp/</link>
            <category term="Linux" scheme="https://self-ferry.github.io/categories/Linux/" />
            <category term="CentOS7配置vsftp" scheme="https://self-ferry.github.io/tags/CentOS7%E9%85%8D%E7%BD%AEvsftp/" />
            <pubDate>Tue, 20 Apr 2021 10:41:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;Linux 网络服务课的作业。虽然简单，但也让我踩了不少坑，记个笔记吧。&lt;br /&gt;
作业的内容是可以匿名上传或删除文件就可。&lt;/p&gt;
&lt;h1 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h1&gt;
&lt;p&gt;先换个 yum 的源，下载的快一点。&lt;br /&gt;
 &lt;code&gt;wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;换源前也可以先备份一下。&lt;br /&gt;
这里的详细内容可以参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1ZGluYW5peWEvYXJ0aWNsZS9kZXRhaWxzLzEwNTc1ODczOQ==&#34;&gt; https://blog.csdn.net/wudinaniya/article/details/105758739&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载vsftp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载vsftp&#34;&gt;#&lt;/a&gt; 下载 vsftp&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;yum -y install vsftpd&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;查看是否安装成功&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看是否安装成功&#34;&gt;#&lt;/a&gt; 查看是否安装成功&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rpm -qa|grep vsftpd&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;关闭一切墙策略selinux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关闭一切墙策略selinux&#34;&gt;#&lt;/a&gt; 关闭一切墙 | 策略 | SELINUX&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;systemctl stop firewalld&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;iptables -F&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关闭 SELINUX，有两种方法：&lt;br /&gt;
临时关闭：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# getenforce&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Enforcing&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# setenforce 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# getenforce&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Permissive&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;永久关闭：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# vim /etc/sysconfig/selinux&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;SELINUX&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;enforcing 改为 &lt;span class=&#34;token assign-left variable&#34;&gt;SELINUX&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;disabled&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;重启服务 reboot&lt;/p&gt;
&lt;h2 id=&#34;修改vsftpdconfig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改vsftpdconfig&#34;&gt;#&lt;/a&gt; 修改 vsftpd.config&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;修改配置文件 /etc/vsftpd.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anonymous_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;write_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许写文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anon_upload_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名用户上传文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anon_mkdir_write_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名用户创建目录和写权限&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;anon_other_write_enable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;YES  &lt;span class=&#34;token comment&#34;&gt;# 允许匿名用户删除、重命名等其它权限  这个在配置文件里默认找不到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;这里附上详细的vsftpconfig配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这里附上详细的vsftpconfig配置&#34;&gt;#&lt;/a&gt; 这里附上详细的 vsftp.config 配置&lt;/h2&gt;
&lt;p&gt;vsftpd 的配置文件在为 vsftpd.conf，一般在 /etc/vsftpd/ 目录下。&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;属性&lt;/th&gt;
        &lt;th&gt;属性值&lt;/th&gt;
        &lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anonymous_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许匿名用户（anonymous）登录 &lt;code&gt;FTP&lt;/code&gt;，如果该设置被注释，则默认允许&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;local_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许本地系统用户登录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;write_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启任何形式的 &lt;code&gt;FTP&lt;/code&gt; 写入命令，上传文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;local_umask&lt;/td&gt;
        &lt;td&gt;xxx&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;本地用户的 &lt;code&gt;umask&lt;/code&gt; 设置，如果注释该设置则默认为 &lt;code&gt;077&lt;/code&gt;，但一般都设置成 &lt;code&gt;022&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anon_upload_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许匿名用户上传文件，如果要设置为允许，则需要先开启 &lt;code&gt;write_enable&lt;/code&gt;，否则无效，此外对应目录还要具有写权限&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anon_mkdir_write_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许匿名用户创建新目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;dirmessage_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;当进入某个目录时，发送信息提示给远程用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;xferlog_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启 上传/下载 的日志记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;connect_from_port_20&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否使用 &lt;code&gt;20&lt;/code&gt; 端口来连接 &lt;code&gt;FTP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chown_uploads&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;匿名上传的文件是否由某一指定用户 &lt;code&gt;chown_username&lt;/code&gt; 所有&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chown_username&lt;/td&gt;
        &lt;td&gt;有效用户名&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;匿名上传的文件由该设定用户所有&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;xferlog_file&lt;/td&gt;
        &lt;td&gt;有效路径&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置日志文件的保存位置，默认为 &lt;code&gt;/var/log/xferlog&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;xferlog_std_format&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否使用标准的 &lt;code&gt;ftpd xferlog&lt;/code&gt;日志格式，该格式日志默认保存在 &lt;code&gt;/var/log/xferlog&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;idle_session_timeout&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置空闲连接的超时时间，单位 秒&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;data_connection_timeout&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置等待数据传输的最大时间，单位 秒（&lt;code&gt;data_connection_timeout&lt;/code&gt; 与 &lt;code&gt;idle_session_timeout&lt;/code&gt;
            在同一时间只有一个有效）
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;nopriv_user&lt;/td&gt;
        &lt;td&gt;有效用户名&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;指定一个非特权用户，用于运行 &lt;code&gt;vsftpd&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;async_abor_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否支持异步 &lt;code&gt;ABOR&lt;/code&gt; 请求&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ascii_upload_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启 &lt;code&gt;ASCII&lt;/code&gt; 模式进行文件上传，一般不开启&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ascii_download_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否开启 &lt;code&gt;ASCII&lt;/code&gt; 模式进行文件下载，一般不开启&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ftpd_banner&lt;/td&gt;
        &lt;td&gt;…&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;自定义登录标语&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;deny_email_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;如果匿名登录，则会要求输入 email 地址，如果不希望一些 email 地址具有登录权限，则可以开启此项，并在 &lt;code&gt;banned_email_file&lt;/code&gt;
            指定的文件中写入对应的 email 地址
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;banned_email_file&lt;/td&gt;
        &lt;td&gt;有效文件&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;当开启 &lt;code&gt;deny_email_enable&lt;/code&gt; 时，需要通过此项指定一个保存登录无效 email 的文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chroot_local_user&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否将所有用户限制在主目录，当为 &lt;code&gt;NO&lt;/code&gt; 时， &lt;code&gt;FTP&lt;/code&gt; 用户可以切换到其他目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chroot_list_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否启用限制用户的名单列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;chroot_list_file&lt;/td&gt;
        &lt;td&gt;有效文件&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;用户列表，其作用与 &lt;code&gt;chroot_local_user&lt;/code&gt; 和 &lt;code&gt;chroot_local_user&lt;/code&gt; 的组合有关，详见下表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;allow_writeable_chroot&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许用户对 ftp 根目录具有写权限，如果设置成不允许而目录实际上却具备写权限，则会报错&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ls_recurse_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许 &lt;code&gt;ls -R&lt;/code&gt; 指令来递归查询，递归查询比较耗资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;listen&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;如果为 &lt;code&gt;YES&lt;/code&gt;，&lt;code&gt;vsftpd&lt;/code&gt; 将以独立模式运行并监听 &lt;code&gt;IPv4&lt;/code&gt; 的套接字，处理相关连接请求（该指令不能与
            &lt;code&gt;listen_ipv6&lt;/code&gt; 一起使用）
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;listen_ipv6&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否允许监听 &lt;code&gt;IPv6&lt;/code&gt; 套接字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;pam_service_name&lt;/td&gt;
        &lt;td&gt;…&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;设置 &lt;code&gt;PAM&lt;/code&gt; 外挂模块提供的认证服务所使用的配置文件名 ，即 &lt;code&gt;/etc/pam.d/vsftpd&lt;/code&gt; 文件，此文件中 &lt;code&gt;file=/etc/vsftpd/ftpusers&lt;/code&gt;
            字段，说明了 &lt;code&gt;PAM&lt;/code&gt; 模块能抵挡的帐号内容来自文件 &lt;code&gt;/etc/vsftpd/ftpusers&lt;/code&gt; 中
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;userlist_enable&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否启用 &lt;code&gt;user_list&lt;/code&gt; 文件来控制用户登录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;userlist_deny&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否拒绝 &lt;code&gt;user_list&lt;/code&gt; 中的用户登录，此属性设置需在 &lt;code&gt;userlist_enable = YES&lt;/code&gt; 时才有效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;tcp_wrappers&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;NO&lt;/code&gt;&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;是否使用 &lt;code&gt;tcp_wrappers&lt;/code&gt; 作为主机访问控制方式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;max_clients&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;同一时间允许的最大连接数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;max_per_ip&lt;/td&gt;
        &lt;td&gt;数值&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;同一个IP客户端连接的最大值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;local_root&lt;/td&gt;
        &lt;td&gt;有效目录&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;系统用户登录后的根目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;anon_root&lt;/td&gt;
        &lt;td&gt;有效目录&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;匿名用户登录后的根目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;user_config_dir&lt;/td&gt;
        &lt;td&gt;有效目录&lt;/td&gt;
        &lt;td align=&#34;left&#34;&gt;用户单独配置文件存放目录，该目录下用户的文件名就是对应用户名&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;以上搞完之后还要把ftp目录的权限给更改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以上搞完之后还要把ftp目录的权限给更改&#34;&gt;#&lt;/a&gt; 以上搞完之后还要把 ftp 目录的权限给更改&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;chmod 777 /var/ftp/pub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里只能更改 ftp 目录下的子目录的权限。这就是个坑，当更改 /etc/ftp/ 这个目录的权限时，都没法登陆这个 ftp 服务器了。&lt;br /&gt;
当然是可以更改 ftp 下的目录的，在 vsftpd.config 中配置。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/30/win32%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%8B%E4%BB%B6%E6%B6%88%E6%81%AF/</guid>
            <title>win32（二）事件消息</title>
            <link>https://self-ferry.github.io/2021/03/30/win32%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%8B%E4%BB%B6%E6%B6%88%E6%81%AF/</link>
            <category term="win32" scheme="https://self-ferry.github.io/categories/win32/" />
            <category term="widows" scheme="https://self-ferry.github.io/tags/widows/" />
            <pubDate>Tue, 30 Mar 2021 22:32:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;事件-消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件-消息&#34;&gt;#&lt;/a&gt; 事件 消息&lt;/h1&gt;
&lt;p&gt;Windows 中的事件是一个 &amp;quot;动作&amp;quot;，这个动作可能是用户操作应用程序产生的，也可能是 Windows 自己产生的.&lt;/p&gt;
&lt;p&gt;而消息，就是用来描述这些 &amp;quot;动作&amp;quot; 的，比如：&lt;/p&gt;
&lt;p&gt;这个动作是什么时候产生的？&lt;/p&gt;
&lt;p&gt;哪个应用程序产生的？&lt;/p&gt;
&lt;p&gt;在什么位置产生的？&lt;br /&gt;
等等。。。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;事件驱动消息，消息封装事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Windows 为了能够准确的描述这些信息，提供了一个结构体：MSG，该结构体里面记录的事件的详细信息.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef struct tagMSG &amp;#123;    

HWND hwnd;     // 窗口句柄

UINT message;     //消息类型

WPARAM wParam;     // 对消息类型进一步描述

LPARAM lParam;     //同上

DWORD time;     // 动作发生时间

POINT pt;     //坐标，结构体封装了，内部是x，y

&amp;#125; MSG, *PMSG;     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;1、hwnd：&lt;/p&gt;
&lt;p&gt;表示消息所属的窗口&lt;/p&gt;
&lt;p&gt;一个消息一般都是与某个窗口相关联的&lt;/p&gt;
&lt;p&gt;在 Windows 中 HWND 类型的变量通常用来标识窗口。&lt;/p&gt;
&lt;p&gt;2、message&lt;/p&gt;
&lt;p&gt;在 Windows 中，消息是由一个数值来表示的&lt;/p&gt;
&lt;p&gt;但是由于数值不便于记忆，所以 Windows 将消息对应的数值定义为 WM_XXX 宏（WM == Window Message）&lt;/p&gt;
&lt;p&gt;鼠标左键按下 WM_LBUTTONDOWN        键盘按下 WM_KEYDOWN&lt;/p&gt;
&lt;p&gt;3、wParam 和 lParam&lt;/p&gt;
&lt;p&gt;32 位消息的特定附加信息，具体表示什么处决于 message&lt;/p&gt;
&lt;p&gt;4、time&lt;/p&gt;
&lt;p&gt;消息创建时的时间&lt;/p&gt;
&lt;p&gt;5、消息创建时的鼠标位置&lt;/p&gt;
&lt;p&gt;具体来说：如下图，用户输入后，封装成消息，加入系统的消息队列，然后应用程序那还有队列&lt;/p&gt;
&lt;p&gt;用来存储自己的消息队列，所以系统队列到应用程序队列是分流而治的过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从队列中取出消息，使用的是循环机制，就是不停的取出消息，而后面的判断消息类型是不是我们关心的意思其实是&lt;/p&gt;
&lt;p&gt;我们是否写了该消息下的响应函数，或者说回调函数。&lt;/p&gt;
&lt;p&gt;具体流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;创建一个窗口程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建一个窗口程序&#34;&gt;#&lt;/a&gt; 创建一个窗口程序&lt;/h1&gt;
&lt;p&gt;步骤 1：创建 Windows 应用程序 选择空项目&lt;/p&gt;
&lt;p&gt;步骤 2：在新建项窗口中选 C++ 代码文件 创建一个新的 cpp 文件&lt;/p&gt;
&lt;p&gt;步骤 3：在新的 cpp 文件中添加: &lt;code&gt;#include &amp;lt;Windows.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并添加入口函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int CALLBACK WinMain(                 CALLBACK 是一个宏             

_In_ HINSTANCE hInstance,         #define CALLBACK __stdcall    

_In_ HINSTANCE hPrevInstance,     

_In_ LPSTR lpCmdLine,                 

_In_ int nCmdShow             

)                     所有的Win32 API函数都遵循该约定    

&amp;#123;                     

return 0;             

&amp;#125;                     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 4：设计窗口类&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
//窗口的类名    

TCHAR className[] = &amp;quot;My First Window&amp;quot;;     

// 创建窗口类的对象     

WNDCLASS wndclass = &amp;#123;0&amp;#125;;        //一定要先将所有值赋值    

wndclass.hbrBackground = (HBRUSH)COLOR_MENU;        //窗口的背景色    

wndclass.lpfnWndProc = WindowProc;        //窗口过程函数    

wndclass.lpszClassName = className;        //窗口类的名字    

wndclass.hInstance = hInstance;        //定义窗口类的应用程序的实例句柄    

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 5：注册窗口类    ，这是什么？哈哈哈，就是把结构体赋值后传参调用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;RegisterClass(&amp;amp;wndclass);     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 6：创建窗口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 创建窗口     

HWND hwnd = CreateWindow(     

className,        //类名    

TEXT(&amp;quot;我的第一个窗口&amp;quot;),        //窗口标题    

WS_OVERLAPPEDWINDOW,        //窗口外观样式     

10,        //相对于父窗口的X坐标    

10,        //相对于父窗口的Y坐标    

600,        //窗口的宽度     

300,        //窗口的高度     

NULL,        //父窗口句柄，为NULL     

NULL,        //菜单句柄，为NULL     

hInstance,        //当前应用程序的句柄     

NULL);        //附加数据一般为NULL    

if(hwnd == NULL)        //是否创建成功     

return 0;     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 7：显示窗口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 显示窗口     

ShowWindow(hwnd, SW_SHOW);     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 8：消息循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;MSG msg;     

while(GetMessage(&amp;amp;msg, NULL, 0, 0))     

&amp;#123;     

TranslateMessage(&amp;amp;msg);     

DispatchMessage(&amp;amp;msg);     

&amp;#125;     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤 9：回调函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/*                        

窗口消息处理程序 窗口回调函数：            

1、窗口回调函数处理过的消息，必须传回0.        

2、窗口回调不处理的消息，由DefWindowProc来处理.    

*/                        

LRESULT CALLBACK WindowProc(         

IN HWND hwnd,     

IN UINT uMsg,     

IN WPARAM wParam,     

IN LPARAM lParam     

)     

&amp;#123;     

switch(uMsg)    

&amp;#123;    

//窗口消息    

case WM_CREATE:     

&amp;#123;    

DbgPrintf(&amp;quot;WM_CREATE %d %d\n&amp;quot;,wParam,lParam);    

CREATESTRUCT* createst = (CREATESTRUCT*)lParam;    

DbgPrintf(&amp;quot;CREATESTRUCT %s\n&amp;quot;,createst-&amp;gt;lpszClass);    

return 0;    

&amp;#125;    

case WM_MOVE:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_MOVE %d %d\n&amp;quot;,wParam,lParam);    

POINTS points = MAKEPOINTS(lParam);    

DbgPrintf(&amp;quot;X Y %d %d\n&amp;quot;,points.x,points.y);    

return 0;    

&amp;#125;    

case WM_SIZE:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_SIZE %d %d\n&amp;quot;,wParam,lParam);    

int newWidth = (int)(short) LOWORD(lParam);     

int newHeight = (int)(short) HIWORD(lParam);     

DbgPrintf(&amp;quot;WM_SIZE %d %d\n&amp;quot;,newWidth,newHeight);    

return 0;    

&amp;#125;    

case WM_DESTROY:    //销毁

&amp;#123;    

DbgPrintf(&amp;quot;WM_DESTROY %d %d\n&amp;quot;,wParam,lParam);    

PostQuitMessage(0);    

return 0;    

&amp;#125;    

//键盘消息    

case WM_KEYUP:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_KEYUP %d %d\n&amp;quot;,wParam,lParam);    

return 0;    

&amp;#125;    

case WM_KEYDOWN:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_KEYDOWN %d %d\n&amp;quot;,wParam,lParam);    

return 0;    

&amp;#125;    

//鼠标消息    

case WM_LBUTTONDOWN:    

&amp;#123;    

DbgPrintf(&amp;quot;WM_LBUTTONDOWN %d %d\n&amp;quot;,wParam,lParam);    

POINTS points = MAKEPOINTS(lParam);    

DbgPrintf(&amp;quot;WM_LBUTTONDOWN %d %d\n&amp;quot;,points.x,points.y);    

return 0;    

&amp;#125;    

&amp;#125;    

return DefWindowProc(hwnd,uMsg,wParam,lParam);    //扔给windows处理其他消息

&amp;#125;     

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MFC 就是基于此封装&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;滴水逆向课件&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/30/win32%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</guid>
            <title>win32学习（一）</title>
            <link>https://self-ferry.github.io/2021/03/30/win32%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</link>
            <category term="win32" scheme="https://self-ferry.github.io/categories/win32/" />
            <category term="WinMain函数" scheme="https://self-ferry.github.io/tags/WinMain%E5%87%BD%E6%95%B0/" />
            <pubDate>Tue, 30 Mar 2021 15:14:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;winmain-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#winmain-函数&#34;&gt;#&lt;/a&gt; WinMain 函数&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int WINAPI WinMain(
  HINSTANCE hInstance, // 应用程序当前实例的句柄
	HINSTANCE hPrevInstance, // 应用程序的先前实例的句柄。同一个程序打开两次，出现两个窗口，第一次打开的窗口就是先前实例的窗口。对于一个32位程序，该参数总为NULL。
	LPSTR IpCmdLine, // 命令行的字符串的指针
	int nShowCmd  // 窗口显示方式、默认为SW_SHOWDEFAULT
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WinMain 函数接收 4 个参数，这些参数都是在系统调用 WinMain 函数时，传递给应用程序的。&lt;/p&gt;
&lt;p&gt;第一个参数 hInstance 表示该程序当前运行的实例的句柄，这是一个数值。当程序在 Windows 下运行时，它唯一标识运行中的实例（注意，只有运行中的程序实例，才有实例句柄）。一个应用程序可以运行多个实例，每运行一个实例，系统都会给该实例分配一个句柄值，并通过 hInstance 参数传递给 WinMain 函数。&lt;/p&gt;
&lt;p&gt;第二个参数 hPrevInstance 表示当前实例的前一个实例的句柄。通过查看 MSDN 我们可以知道，在 Win32 环境下，这个参数总是 NULL ，即在 Win32 环境下，这个参数不再起作用。&lt;/p&gt;
&lt;p&gt;第三个参数 lpCmdLine 是一个以空终止的字符串，指定传递给应用程序的命令行参数。 例如：在 D 盘下有一个 sunxin.txt 文件，当我们用鼠标双击这个文件时将启动记事本程序（ notepad.exe ），此时系统会将 D:/sunxin.txt 作为命令行参数传递给记事本程序的 WinMain 函数，记事本程序在得到这个文件的全路径名后，就在窗口中显示该文件的内容。要在 VC++ 开发环境中向应用程序传递参数，可以单击菜单 【 Project 】→【 Settings 】，选择 “Debug” 选项卡，在 “ Program arguments ” 编辑框中输入你想传递给应用程序的参数。&lt;/p&gt;
&lt;p&gt;第四个参数 nCmdShow 指定程序的窗口应该如何显示，例如最大化、最小化、隐藏等。这个参数的值由该程序的调用者所指定，在调用 ShowWindow () 时可以使用到该值&lt;/p&gt;
&lt;p&gt;=============================================================&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;应用程序句柄&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;WinMain 函数的第一个参数 hInstance 就是可执行文件的实例句柄，实际上是个内存地址，它指出系统在何处把 exe 文件装载入进程的地址空间！&lt;br /&gt;
PE 中的 ImageBase&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;窗口显示方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第四个参数 nCmdShow，指定窗口第一次出现 (程序刚刚启动时) 时的显示方式。显示方式有多种，比如：&lt;/p&gt;
&lt;p&gt;不显示，nCmdShow = 0;&lt;br /&gt;
 正常显示，nCmdShow = 1;(默认为 1)&lt;br /&gt;
 最小化显示，nCmdShow = 2;&lt;br /&gt;
 最大化显示，nCmdShow = 3;&lt;br /&gt;
 如果需要改变系统的默认的显示方式，需要在创建窗口之前指定 nCmdShow 的值 (通过一个简单的赋值语句 nCmdShow = n)&lt;/p&gt;
&lt;p&gt;不过，其实这里要让 nCmdShow 起作用，需要把 nCmdShow 作为参数传递给 ShowWindow 函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/*
 * ShowWindow() Commands
 */
#define SW_HIDE             0
#define SW_SHOWNORMAL       1
#define SW_NORMAL           1     激活并显示一个窗口。如果窗口被最小化或最大化，系统 将其恢复到原来的尺寸和大小。应用程序 在第一次显示窗口的时候应该指定此标志。
#define SW_SHOWMINIMIZED    2     激活窗口并将其最小化。
#define SW_SHOWMAXIMIZED    3     激活窗口并将其最大化。
#define SW_MAXIMIZE         3     最大化指定的窗口。
#define SW_SHOWNOACTIVATE   4     以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态。
#define SW_SHOW             5     在窗口原来的位置以原来的尺寸激活和显示窗口。
#define SW_MINIMIZE         6     最小化指定的窗口并且激活在Z序中的下一个顶层窗口。
#define SW_SHOWMINNOACTIVE  7
#define SW_SHOWNA           8     以窗口原来的状态显示窗口。激活窗口仍然维持激活状态。
#define SW_RESTORE          9     激活并显示窗口。如果窗口最小化或最大化，则系统 将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时，应用程序 应该指定这个标志。
#define SW_SHOWDEFAULT      10     依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态，STARTUPINFO 结构是由启动应用程序 的程序 传递给CreateProcess函数的。
#define SW_FORCEMINIMIZE    11     在WindowNT5.0中最小化窗口，即使拥有窗口的线程被挂起也会最小化。在从其他线程最小化窗口时才使用这个参数。
#define SW_MAX              11
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;winapi和apientry&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#winapi和apientry&#34;&gt;#&lt;/a&gt; WINAPI 和 APIENTRY&lt;/h1&gt;
&lt;p&gt;另外，这里稍微说明一下  &lt;code&gt;WINAPI&lt;/code&gt;  这个宏定义，我们看 WinMain 函数的原型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int WINAPI WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPreInstance,
    LPSTR     lpCmdLine,
    int       nCmdShow
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WINAPI 是这样定义的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define WINAPI      __stdcall&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 VC6.0 下生成的 WinMain 函数，实际上是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int APIENTRY WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPreInstance,
    LPSTR     lpCmdLine,
    int       nCmdShow
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;APIENTRY 这个定义为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define APIENTRY    WINAPI&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以归根到底都是  &lt;code&gt;__stdcall&lt;/code&gt; ，这个是什么东西了？这里解释一下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__stdcall&lt;/code&gt;  一种调用约定 (调用函数时候的一种约定)，其他的调用约定有：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__cdecl 和 __fastcall&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;调用约定将决定以下内容：&lt;/p&gt;
&lt;p&gt;1) 函数参数的压栈顺序，&lt;/p&gt;
&lt;p&gt;2) 由调用者还是被调用者把参数弹出栈，&lt;/p&gt;
&lt;p&gt;3) 以及产生函数修饰名的方法。&lt;/p&gt;
&lt;p&gt;WIN32API 使用的是 &lt;code&gt;__stdcall&lt;/code&gt;  调用约定&lt;/p&gt;
&lt;p&gt;标准 C，C++ 使用的是 &lt;code&gt;__cdecl&lt;/code&gt;  调用约定&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__stdcall&lt;/code&gt;  调用约定：函数的参数自右向左压栈，被调用的函数在返回前清理传送参数的内存栈&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__cdecl&lt;/code&gt;  调用约定：每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用 &lt;code&gt;_stdcall&lt;/code&gt;  函数的大。函数采用从右到左的压栈方式。注意：对于可变参数的成员函数，始终使用 &lt;code&gt;__cdecl&lt;/code&gt;  的调用约定&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDI0Nzc4MS9hcnRpY2xlL2RldGFpbHMvOTcxNDE1MTg=&#34;&gt;https://blog.csdn.net/weixin_30247781/article/details/97141518&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjMzMzU1MS9hcnRpY2xlL2RldGFpbHMvMTEzMjUwOTk5&#34;&gt;https://blog.csdn.net/weixin_42333551/article/details/113250999&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/24/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/</guid>
            <title>汇编复习</title>
            <link>https://self-ferry.github.io/2021/03/24/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/</link>
            <category term="汇编" scheme="https://self-ferry.github.io/categories/%E6%B1%87%E7%BC%96/" />
            <category term="x86汇编指令" scheme="https://self-ferry.github.io/tags/x86%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/" />
            <pubDate>Wed, 24 Mar 2021 20:19:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前学的，因为一些事情就耽搁了，转而学其他的了，现在有时间了，打算接着学，发现忘的差不多了。只能重学了。&lt;br /&gt;
逆水行舟，不进则退。&lt;/p&gt;
&lt;h1 id=&#34;内存格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存格式&#34;&gt;#&lt;/a&gt; 内存格式&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;每个内存单元宽度为 8&lt;/li&gt;
&lt;li&gt;【0x 编号】称为内存地址&lt;/li&gt;
&lt;li&gt;内存是存储数据的，内存地址是对存储数据的一个标识，指向数据却不是数据，通过内存地址的指引，可以访问到内存当中指向的数据.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内存最小的单位是一个字节 ==&amp;gt;&amp;gt; 8 个二进制数  ==&amp;gt;&amp;gt; 两位的十六进制数&lt;/p&gt;
&lt;p&gt;一个内存单元能存一个两位的十六进制数，而这就是内存数据&lt;/p&gt;
&lt;h1 id=&#34;简单指令intel汇编语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单指令intel汇编语法&#34;&gt;#&lt;/a&gt; 简单指令 (intel 汇编语法)&lt;/h1&gt;
&lt;h2 id=&#34;mov&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mov&#34;&gt;#&lt;/a&gt; mov&lt;/h2&gt;
&lt;p&gt;格式：  &lt;code&gt;mov destination, source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov eax, ebx&lt;/code&gt;   // 将 EBX 中的内容复制到 EAX 寄存器中&lt;br /&gt;
 &lt;code&gt;mov eax, 0x42&lt;/code&gt;  // 将立即数 0x42 复制到 EAX 寄存器中&lt;br /&gt;
 &lt;code&gt;mov eax, [0x443212C4]&lt;/code&gt;  // 将内存地址 0x443212C4 的四个字节复制到 EAX 寄存器&lt;br /&gt;
 &lt;code&gt;mov eax, [ebx+esi*4]&lt;/code&gt;   // 将 ebx+esi*4 等式结果只想的内存地址处 4 个字节复制至 EAX&lt;/p&gt;
&lt;h2 id=&#34;lea&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lea&#34;&gt;#&lt;/a&gt; lea&lt;/h2&gt;
&lt;p&gt;格式：  &lt;code&gt;lea destination, source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;lea 指令用来将一个内存地址赋给目的操作数。&lt;br /&gt;
例如，  &lt;code&gt;lea eax, [ebx+8]&lt;/code&gt;  就是将 EBX+8 的值给 EAX。&lt;br /&gt;
相反的， &lt;code&gt;mov eax, [ebx+8]&lt;/code&gt;  则加载内存中地址为 EBX+8 处的数据。&lt;/p&gt;
&lt;h2 id=&#34;算术运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算术运算&#34;&gt;#&lt;/a&gt; 算术运算&lt;/h2&gt;
&lt;h3 id=&#34;加减运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加减运算&#34;&gt;#&lt;/a&gt; 加减运算&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例子&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sub eax,0x10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX 寄存器值减去 0x10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add eax,ebx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将 EBX 值加入 EAX 并将结果保存至 EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;inc edx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX 值递增 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dec ecx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ECX 值递减 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;乘除运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘除运算&#34;&gt;#&lt;/a&gt; 乘除运算&lt;/h3&gt;
&lt;p&gt;乘法和除法都使用了一个预先规定的寄存器。因此其运算就是指令码加上寄存器要去乘除的值。&lt;br /&gt;
 &lt;code&gt;mul&lt;/code&gt;  和 &lt;code&gt;div&lt;/code&gt;  指令要操作的寄存器一般会在之前许多条指令的地方被赋值，因此你可能需要在程序的上下文中来寻找。&lt;br /&gt;
 &lt;code&gt;mul value&lt;/code&gt;  指令总是将 &lt;code&gt;eax&lt;/code&gt;  乘上 &lt;code&gt;value&lt;/code&gt; 。因此， &lt;code&gt;EAX&lt;/code&gt;  寄存器必须在乘法指令出现前就赋值好。&lt;/p&gt;
&lt;p&gt;乘法的结果以 64 位的形式分开存储在两个寄存器中： &lt;code&gt;EDX&lt;/code&gt;  和 &lt;code&gt;EAX&lt;/code&gt; 。其中 EDX 存储了高的 32 位，EAX 存储低的 32 位。&lt;/p&gt;
&lt;p&gt;32 位模式下，MUL（无符号数乘法）指令有三种类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一种执行 8 位操作数与 AL 寄存器的乘法；
第二种执行 16 位操作数与 AX 寄存器的乘法；
第三种执行 32 位操作数与 EAX 寄存器的乘法。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;乘数和被乘数的大小必须保持一致，乘积的大小则是它们的一倍。这三种类型都可以使用寄存器和内存操作数，但不能使用立即数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MUL reg/mem8
MUL reg/meml6
MUL reg/mem32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MUL 指令中的单操作数是乘数。下表按照乘数的大小，列出了默认的被乘数和乘积。由于目的操作数是被乘数和乘数大小的两倍，因此不会发生溢岀。&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被乘数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;乘数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;乘积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AL&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DX:AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX:EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果乘积的高半部分不为零，则 MUL 会把进位标志位和溢出标志位置 1。因为进位标志位常常用于无符号数的算术运算，在此我们也主要说明这种情况。例如，当 AX 乘以一个 16 位操作数时，乘积存放在 DX 和 AX 寄存器对中。其中，乘积的高 16 位存放在 DX，低 16 位存放在 AX。如果 DX 不等于零，则进位标志位置 1，这就意味着隐含的目的操作数的低半部分容纳不了整个乘积。&lt;/p&gt;
&lt;p&gt;有个很好的理由要求在执行 MUL 后检查进位标志位，即，确认忽略乘积的高半部分是否安全。&lt;/p&gt;
&lt;p&gt;32 位模式下，DIV（无符号除法）指令执行 8 位、16 位和 32 位无符号数除法。其中，单寄存器或内存操作数是除数。格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DIV reg/mem8
DIV reg/meml6
DIV reg/mem32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下表给出了被除数、除数、商和余数之间的关系：&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被除数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;除数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;商&lt;/td&gt;
&lt;td&gt;余数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AL&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;DX:AX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AX&lt;/td&gt;
&lt;td&gt;DX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EDX:EAX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg/mem32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EAX&lt;/td&gt;
&lt;td&gt;EDX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;64 位模式下，DIV 指令用 RDX:RAX 作被除数，用 64 位寄存器和内存操作数作除数，商存放到 RAX，余数存放在 RDX 中。&lt;/p&gt;
&lt;h2 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;否操作指令 NOT&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;NOT OPRD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把 OPRD 取反，再回送给 OPRD&lt;/p&gt;
&lt;p&gt;对标志位没有影响&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;与操作指令 AND [与]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;AND OPRD1，OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OPRD1 和 OPRD2 执行与操作，结果送到 OPRD1&lt;/p&gt;
&lt;p&gt;执行后，CF＝OF＝0，标志 PF，ZF，SF 反映运算结果，AF 未定义&lt;/p&gt;
&lt;p&gt;某个操作数自身与，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov al, 00001111b&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;and al, 11110101b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后 &lt;code&gt;al&lt;/code&gt;  的结果就是 &lt;code&gt;00000101b&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;或操作指令 OR [或]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;OR OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标志位同与运算指令&lt;/p&gt;
&lt;p&gt;某个操作数自身或，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;异或操作指令 XOR [异或]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;XOR OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标志位同与运算指令&lt;/p&gt;
&lt;p&gt;某个操作数自身异或，值不变，可使进位标志 CF＝0&lt;/p&gt;
&lt;p&gt;与 0 异或，不变，与 1 异或，取反。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;测试指令 TEST&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;TEST OPRD1 OPRD2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指令与 AND 类似，但结果不回送&lt;/p&gt;
&lt;p&gt;指令执行后，ZF，PF，SF 反映运算结果，CF＝OF＝0&lt;/p&gt;
&lt;h2 id=&#34;移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移位指令&#34;&gt;#&lt;/a&gt; 移位指令&lt;/h2&gt;
&lt;p&gt;移位指令分为算术移位和逻辑移位。&lt;/p&gt;
&lt;p&gt;移动操作数的位有两种方法。第一种是逻辑移位 (logic shift)，空出来的位用 0 填充。如下图所示，一个字节的数据向右移动一位。也就是说，每一位都被移动到其旁边的低位上。注意，位 7 被填充为 0：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下图所示为二进制数 1100 1111 逻辑右移一位，得到 OllOOlll。最低位移入进位标志位：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;另一种移位的方法是算术移位 (arithmetic shift)，空出来的位用原数据的符号位填充：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例如，二进制数 1100 1111，符号位为 1。算术右移一位后，得到 1110 0111：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;逻辑移位:   &lt;code&gt;SHL&lt;/code&gt; 、 &lt;code&gt;SHR&lt;/code&gt; &lt;br /&gt;
 算术移位:   &lt;code&gt;CAL&lt;/code&gt; 、 &lt;code&gt;CAR&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;无符号数的乘法和除法可以用逻辑移位；&lt;br /&gt;
 有符号数的乘法和除法可以用算术移位；&lt;/p&gt;
&lt;h3 id=&#34;逻辑移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑移位指令&#34;&gt;#&lt;/a&gt; 逻辑移位指令&lt;/h3&gt;
&lt;p&gt;SHL（左移）指令使目的操作数逻辑左移一位，最低位用 0 填充。最高位移入进位标志位，而进位标志位中原来的数值被丢弃&lt;br /&gt;
 SHR（右移）指令使目的操作数逻辑右移一位，最高位用 0 填充。最低位复制到进位标志位，而进位标志位中原来的数值被丢弃&lt;/p&gt;
&lt;p&gt;SHL/SHR 的第一个操作数是目的操作数，第二个操作数是移位次数：&lt;br /&gt;
SHL/SHR destination,count&lt;/p&gt;
&lt;p&gt;该指令可用的操作数类型如下所示：&lt;br /&gt;
SHL/SHR reg, imm8&lt;br /&gt;
SHL/SHR mem, imm8&lt;br /&gt;
SHL/SHR reg, CL&lt;br /&gt;
SHL/SHR mem, CL&lt;/p&gt;
&lt;p&gt;x86 处理器允许 imm8 为 0〜255 中的任何整数。另外，CL 寄存器包含的是移位计数。上述格式同样适用于 SHR、SAL、SAR、ROR、ROL、RCR 和 RCL 指令。&lt;/p&gt;
&lt;h3 id=&#34;算术移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算术移位指令&#34;&gt;#&lt;/a&gt; 算术移位指令&lt;/h3&gt;
&lt;p&gt;算数移位指令分为：算数左移 SAL (Shift Algebraic Left) 和算数右移 SAR (Shift Algebraic Right);&lt;br /&gt;
 指令格式:  &lt;code&gt;SAL/SAR reg/mem,CL/imm&lt;/code&gt; &lt;br /&gt;
 受影响的标志位：CF,OF,PF,SF,ZF; 对 AF 的影响无定义；&lt;/p&gt;
&lt;h3 id=&#34;循环移位指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环移位指令&#34;&gt;#&lt;/a&gt; 循环移位指令&lt;/h3&gt;
&lt;p&gt;循环移位指令 ror 和 rol 与移位指令类似，但移出的那一位会被填到另一端空出来的位置上，即右循环指令（ror）会将最低位循环一到最高位；左循环移位（rol）则相反。&lt;/p&gt;
&lt;h2 id=&#34;nop指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nop指令&#34;&gt;#&lt;/a&gt; NOP 指令&lt;/h2&gt;
&lt;p&gt;nop 指令什么也不做。当它出现时，直接执行下一条指令。&lt;br /&gt;
nop 指令实际上是 xchg eax,eax 的一个谓名字&lt;/p&gt;
&lt;h1 id=&#34;栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈&#34;&gt;#&lt;/a&gt; 栈&lt;/h1&gt;
&lt;h2 id=&#34;posh-指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#posh-指令&#34;&gt;#&lt;/a&gt; posh 指令&lt;/h2&gt;
&lt;h1 id=&#34;renference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#renference&#34;&gt;#&lt;/a&gt; Renference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjI3MjM1L2FydGljbGUvZGV0YWlscy84MDM2ODI1NA==&#34;&gt;https://blog.csdn.net/qq_41627235/article/details/80368254&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZW5rdS5iYWlkdS5jb20vdmlldy81MThkM2U4NWRmMzZhMzJkNzM3NWE0MTc4NjZmYjg0YWU0NWNjMzg2Lmh0bWw=&#34;&gt;https://wenku.baidu.com/view/518d3e85df36a32d7375a417866fb84ae45cc386.html&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodWhlamlhbzE1MTYvYXJ0aWNsZS9kZXRhaWxzLzEwMDg3NTEwNQ==&#34;&gt;https://blog.csdn.net/chuhejiao1516/article/details/100875105&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzM1ODkuaHRtbA==&#34;&gt;http://c.biancheng.net/view/3589.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</guid>
            <title>密码学数论基础</title>
            <link>https://self-ferry.github.io/2021/03/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</link>
            <category term="密码编码学与网络安全" scheme="https://self-ferry.github.io/categories/%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
            <category term="数论基础" scheme="https://self-ferry.github.io/tags/%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/" />
            <pubDate>Wed, 24 Mar 2021 14:19:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数论基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数论基础&#34;&gt;#&lt;/a&gt; 数论基础&lt;/h1&gt;
&lt;h2 id=&#34;整除性和带余除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整除性和带余除法&#34;&gt;#&lt;/a&gt; 整除性和带余除法&lt;/h2&gt;
&lt;h2 id=&#34;整除性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整除性&#34;&gt;#&lt;/a&gt; 整除性&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;定义：&lt;/span&gt;&lt;br /&gt;
a、b 是两个整数，b≠0 ，如果存在一个整数 m 使等式 a=m*b 成立，则称 b 整除 a，记为 b|a,a 是被除数，b 是除数。&lt;/p&gt;
&lt;p&gt;a/b 记为 b|a a 除以 b 记为 b 整除 a&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;性质：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 a|1， 则 a=±1。&lt;/li&gt;
&lt;li&gt;若 a|b 且 b|a，则 a=±b。&lt;/li&gt;
&lt;li&gt;任何不等于零的数整除 0。&lt;/li&gt;
&lt;li&gt;若 a|b 且 b|c，则 a|c。&lt;br /&gt;
 &lt;code&gt;11|66 且 66|198 =&amp;gt; 11|198&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对任意整数 m，n，若 b|g 且 b|h，则可得出 b|（mg+nh）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之所以得出最后一条结论，是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 b|g，存在 g1，使得 g 可以表示为 g=b*g1&lt;/li&gt;
&lt;li&gt;若 b|h, 则存在 h1，使得还可以表示为 h=b*h1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以：&lt;br /&gt;
 &lt;code&gt;mg + nh = mbg1 + nbh1 = b * (mg1 + nh1)&lt;/code&gt; &lt;br /&gt;
 得出 b 整除 mg+nh。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;例题&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;带余除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带余除法&#34;&gt;#&lt;/a&gt; 带余除法&lt;/h3&gt;
&lt;p&gt;对给定的任意一个正整数 n 和任意非负整数 a, 若用 n 除 a, 得到整数商 q 和整数余数 r, 则满足以下关系式:&lt;br /&gt;
 &lt;code&gt;a = qn + r, 0 ≤ r &amp;lt; n; q = |(a|b)|&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;欧几里得算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#欧几里得算法&#34;&gt;#&lt;/a&gt; 欧几里得算法&lt;/h2&gt;
&lt;h3 id=&#34;最大公约数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最大公约数&#34;&gt;#&lt;/a&gt; 最大公约数&lt;/h3&gt;
&lt;p&gt;最大公约数，也称最大公因数、最大公因子，指两个或多个整数共有约数中最大的一个。&lt;/p&gt;
&lt;p&gt;对于整数 a,b,m, 若满足 a=mb, 则称非零整数 b 是 a 的一个因子。我们用 gcd (a,b) 来表示 a 的最大公因子。a 和 b 的最大公因子是能同时整除 a 和 b 的最大整数。另外，定义 gcd (0,0)=0。&lt;br /&gt;
更正式的描述是，正整数 c 称为 a 和 b 的最大公因子，如果&lt;br /&gt;
 (1) c 是 a 和 b 的因子。&lt;br /&gt;
(2) a、b 的因子都是 c 的一个因子。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/23/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</guid>
            <title>数组与矩阵</title>
            <link>https://self-ferry.github.io/2021/03/23/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</link>
            <pubDate>Tue, 23 Mar 2021 19:09:25 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/23/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</guid>
            <title>pandas库学习</title>
            <link>https://self-ferry.github.io/2021/03/23/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</link>
            <pubDate>Tue, 23 Mar 2021 19:08:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/23/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/</guid>
            <title>numpy库学习</title>
            <link>https://self-ferry.github.io/2021/03/23/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/</link>
            <category term="python" scheme="https://self-ferry.github.io/categories/python/" />
            <category term="数据分析" scheme="https://self-ferry.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/" />
            <pubDate>Tue, 23 Mar 2021 19:07:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9udW1weS9udW1weS10dXRvcmlhbC5odG1s&#34;&gt;https://www.runoob.com/numpy/numpy-tutorial.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;numpy库简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy库简介&#34;&gt;#&lt;/a&gt; Numpy 库简介&lt;/h1&gt;
&lt;p&gt;NumPy (Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/p&gt;
&lt;p&gt;NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。&lt;/p&gt;
&lt;p&gt;NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个强大的 N 维数组对象 ndarray&lt;/li&gt;
&lt;li&gt;广播功能函数&lt;/li&gt;
&lt;li&gt;整合 C/C++/Fortran 代码的工具&lt;/li&gt;
&lt;li&gt;线性代数、傅里叶变换、随机数生成等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;numpy-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy-应用&#34;&gt;#&lt;/a&gt; NumPy 应用&lt;/h1&gt;
&lt;p&gt;NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。&lt;/p&gt;
&lt;p&gt;SciPy 是一个开源的 Python 算法库和数学工具包。&lt;/p&gt;
&lt;p&gt;SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。&lt;/p&gt;
&lt;p&gt;Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。&lt;/p&gt;
&lt;h1 id=&#34;相关链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关链接&#34;&gt;#&lt;/a&gt; 相关链接&lt;/h1&gt;
&lt;p&gt;NumPy 官网 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5udW1weS5vcmcv&#34;&gt;http://www.numpy.org/&lt;/span&gt;&lt;br /&gt;
NumPy 源代码：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5&#34;&gt;https://github.com/numpy/numpy&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;numpy-ndarray对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy-ndarray对象&#34;&gt;#&lt;/a&gt; Numpy Ndarray 对象&lt;/h1&gt;
&lt;p&gt;NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。&lt;/p&gt;
&lt;p&gt;ndarray 对象是用于存放同类型元素的多维数组。&lt;/p&gt;
&lt;p&gt;ndarray 中的每个元素在内存中都有相同存储大小的区域。&lt;/p&gt;
&lt;p&gt;ndarray 内部由以下内容组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个指向数据（内存或内存映射文件中的一块数据）的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据类型或 dtype，描述在数组中的固定大小值的格子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个表示数组形状（shape）的元组，表示各维度大小的元组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要 &amp;quot;跨过&amp;quot; 的字节数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;创建ndarray&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建ndarray&#34;&gt;#&lt;/a&gt; 创建 Ndarray&lt;/h1&gt;
&lt;p&gt;创建一个 ndarray 只需调用 NumPy 的 array 函数即可：&lt;br /&gt;
 &lt;code&gt;numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;名称&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;object&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数组或嵌套的数列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;dtype&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数组元素的数据类型，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;copy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对象是否需要复制，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;order&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;创建数组的样式，C 为行方向，F 为列方向，A 为任意方向（默认）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;subok&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认返回一个与基类类型一致的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;ndmin&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定生成数组的最小维度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;认识numpy的数组对象ndarray&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识numpy的数组对象ndarray&#34;&gt;#&lt;/a&gt; 认识 Numpy 的数组对象 Ndarray&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np  &lt;span class=&#34;token comment&#34;&gt;# 导入 NumPy 库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 创建一维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; 创建的数组为： &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建二维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组元素个数为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组元素个数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组每个元素大小为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;itemsize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组每个元素大小&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 重新设置 shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;重新设置shape 后的arr2 为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用arange函数创建的数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用linspace函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linspace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用logspace函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;logspace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用zeros函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用eye函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;eye&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用diag函数创建的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;diag&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;使用ones函数的数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ones&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 浮点型转换为整型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为布尔型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 整型转换为布尔型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 布尔型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;转换结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 布尔型转换为浮点型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;str_&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;numitems&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;price&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据类型为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;itemz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;tomatoes&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cabbages&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.72&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                 dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;自定义数据为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; itemz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;生成的随机数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 用整数作为下标可以获取数组中的某个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 用范围作为下标获取数组的一个切片，包括 arr [3] 不包括 arr [5]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 省略开始下标，表示从 arr [0] 开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 下标可以使用负数，-1 表示从数组后往前数的第一个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 下标还可以用来修改元素的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 范围中的第三个参数表示步长，2 表示隔一个元素取一个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 步长为负数时，开始下标必须大于结束下标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 0 行中第 3 和第 4 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 索引第 2 和第 3 行中第 3 列、第 4 列和第 5 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 2 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从两个序列的对应位置取出两个整数组成下标：arr [0,1], arr [1,2], arr [2,3]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 索引第 2、3 行中第 0、2、3 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mask 是一个布尔数组，它索引第 1、3 行中第 2 列的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;索引结果为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;mask&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 创建一维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的一维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;新的一维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 设置数组的形状&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组维度为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ndim&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 查看数组维度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平后为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ravel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 横向展平&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数组展平为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;F&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 纵向展平&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组1为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr1 &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的数组2为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hstack&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# hstack 函数横向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vstack&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# vstack 函数纵向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concatenate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# concatenate 函数横向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向组合为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concatenate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# concatenate 函数纵向组合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;创建的二维数组为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hsplit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# hsplit 函数横向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vsplit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# vsplit 函数纵向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 代码 2-29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;横向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# split 函数横向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;纵向分割为：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# split 函数纵向分割&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/09/web%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</guid>
            <title>web漏洞-业务逻辑漏洞</title>
            <link>https://self-ferry.github.io/2021/03/09/web%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</link>
            <pubDate>Tue, 09 Mar 2021 16:15:23 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=491097414&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;又要鸽了 0，有事情要忙。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE5NTgzNy5odG1s&#34;&gt;逻辑漏洞挖掘初步总结篇&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWC1jYWlqaS9wLzExMjA5OTYzLmh0bWw=&#34;&gt;Web 安全测试中常见逻辑漏洞解析（实战篇）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5OTE2OTIvYXJ0aWNsZS9kZXRhaWxzLzgyOTUzMjEz&#34;&gt;常见逻辑漏洞&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;挖掘出属于自己思维的逻辑漏洞。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/09/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</guid>
            <title>Nmap速查手册</title>
            <link>https://self-ferry.github.io/2021/03/09/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</link>
            <category term="web安全" scheme="https://self-ferry.github.io/categories/web-security/" />
            <category term="Nmap" scheme="https://self-ferry.github.io/tags/Nmap/" />
            <pubDate>Tue, 09 Mar 2021 16:14:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=30621618&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuMmN0by5jb20vQXJ0aWNsZS8yMDE0MTIvMzYyMTg4Lmh0bWw=&#34;&gt;https://www.2cto.com/Article/201412/362188.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;nmap-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap-简介&#34;&gt;#&lt;/a&gt; Nmap 简介&lt;/h1&gt;
&lt;p&gt;Nmap 是 Network Mapper 的简称&lt;br /&gt;
 Nmap 是一款开源免费的网络发现（Network Discovery）和安全审计（Security Auditing）工具&lt;br /&gt;
 1997 年由 Fyodor 创建&lt;/p&gt;
&lt;p&gt;Nmap 四项基本功能：&lt;/p&gt;
&lt;p&gt;1. 主机发现（Host Discovery）&lt;br /&gt;
2. 端口扫描（Port Scanning）&lt;br /&gt;
3. 版本侦测（Version Detection）&lt;br /&gt;
4. 操作系统侦测（Operating System Detection）&lt;/p&gt;
&lt;p&gt;这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随&lt;br /&gt;
后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基&lt;br /&gt;
础上，Nmap 提供防火墙与 IDS（IntrusionDetection System, 入侵检测系统）的规避技巧，可以综合应用到四个基本功&lt;br /&gt;
能的各个阶段；另外 Nmap 提供强大的 NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充&lt;br /&gt;
和扩展。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;大致功能为:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主机存活检测&lt;/li&gt;
&lt;li&gt;端口探测&lt;/li&gt;
&lt;li&gt;服务识别&lt;/li&gt;
&lt;li&gt;操作系统识别&lt;/li&gt;
&lt;li&gt;硬件地址检测&lt;/li&gt;
&lt;li&gt;服务版本识别&lt;/li&gt;
&lt;li&gt;漏洞扫描，使用 nmap 自带脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;nmap参数详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap参数详解&#34;&gt;#&lt;/a&gt; Nmap 参数详解&lt;/h1&gt;
&lt;h2 id=&#34;nmap支持主机名ip网段的表示方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap支持主机名ip网段的表示方式&#34;&gt;#&lt;/a&gt; Nmap 支持主机名，ip, 网段的表示方式&lt;/h2&gt;
&lt;p&gt;例如:blah.highon.coffee, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25hbXAub3JnLzI0&#34;&gt;namp.org/24&lt;/span&gt;, 192.168.0.1;10.0.0-25.1-254&lt;/p&gt;
&lt;p&gt;-iL filename                    从文件中读取待检测的目标，文件中的表示方法支持机名，ip, 网段&lt;br /&gt;
 - iR hostnum                     随机选取，进行扫描。如果 - iR 指定为 0, 则是无休止的扫描&lt;br /&gt;
 --exclude host1 [, host2]        从扫描任务中需要排除的主机&lt;br /&gt;
 --exculdefile exclude_file      排除文件中的 IP, 格式和 - iL 指定扫描文件的格式相同&lt;/p&gt;
&lt;h2 id=&#34;0x00-主机发现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-主机发现&#34;&gt;#&lt;/a&gt; 0x00 主机发现&lt;/h2&gt;
&lt;p&gt;-sL                     仅仅是显示，扫描的 IP 数目，不会进行任何扫描&lt;br /&gt;
 - sn                     ping 扫描，即主机发现&lt;br /&gt;
 - Pn                     不检测主机存活&lt;br /&gt;
 - PS/PA/PU/PY [portlist]  TCP SYN Ping/TCP ACK Ping/UDP Ping 发现&lt;br /&gt;
 - PE/PP/PM               使用 ICMP echo, timestamp and netmask 请求包发现主机&lt;br /&gt;
 - PO [prococol list]      使用 IP 协议包探测对方主机是否开启&lt;br /&gt;
 - n/-R                   不对 IP 进行域名反向解析 / 为所有的 IP 都进行域名的反响解析&lt;/p&gt;
&lt;h2 id=&#34;0x01-扫描技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-扫描技巧&#34;&gt;#&lt;/a&gt; 0x01 扫描技巧&lt;/h2&gt;
&lt;p&gt;-sS/sT/sA/sW/sM                 TCP SYN/TCP connect ()/ACK/TCP 窗口扫描 / TCP Maimon 扫描&lt;br /&gt;
 - sU                             UDP 扫描&lt;br /&gt;
 - sN/sF/sX                       TCP Null，FIN，and Xmas 扫描&lt;br /&gt;
 --scanflags                     自定义 TCP 包中的 flags&lt;br /&gt;
-sI zombie host[:probeport]     Idlescan&lt;br /&gt;
-sY/sZ                          SCTP INIT/COOKIE-ECHO 扫描&lt;br /&gt;
 - sO                             使用 IP protocol 扫描确定目标机支持的协议类型&lt;br /&gt;
 - b “FTP relay host” 使用 FTP bounce scan&lt;/p&gt;
&lt;h2 id=&#34;0x02-指定端口和扫描顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-指定端口和扫描顺序&#34;&gt;#&lt;/a&gt; 0x02 指定端口和扫描顺序&lt;/h2&gt;
&lt;p&gt;-p                      特定的端口 -p80,443 或者 -p1-65535&lt;br /&gt;
-p U:PORT               扫描 udp 的某个端口，-p U:53&lt;br /&gt;
-F                      快速扫描模式，比默认的扫描端口还少&lt;br /&gt;
 - r                      不随机扫描端口，默认是随机扫描的&lt;br /&gt;
 --top-ports &amp;quot;number&amp;quot;    扫描开放概率最高的 number 个端口，出现的概率需要参考 nmap-services 文件，ubuntu 中该文件位于 /usr/share/nmap.nmap 默认扫前 1000 个&lt;br /&gt;
 --port-ratio &amp;quot;ratio&amp;quot;    扫描指定频率以上的端口&lt;/p&gt;
&lt;h2 id=&#34;0x03-服务版本识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x03-服务版本识别&#34;&gt;#&lt;/a&gt; 0x03 服务版本识别&lt;/h2&gt;
&lt;p&gt;-sV                             开放版本探测，可以直接使用 - A 同时打开操作系统探测和版本探测&lt;br /&gt;
 --version-intensity &amp;quot;level&amp;quot;     设置版本扫描强度，强度水平说明了应该使用哪些探测报文。数值越高，服务越有可能被正确识别。默认是 7&lt;br /&gt;
--version-light                 打开轻量级模式，为 --version-intensity 2 的别名&lt;br /&gt;
 --version-all                   尝试所有探测，为 --version-intensity 9 的别名&lt;br /&gt;
 --version-trace                 显示出详细的版本侦测过程信息&lt;/p&gt;
&lt;h2 id=&#34;0x04-脚本扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x04-脚本扫描&#34;&gt;#&lt;/a&gt; 0x04 脚本扫描&lt;/h2&gt;
&lt;p&gt;-sC                             根据端口识别的服务，调用默认脚本&lt;br /&gt;
 --script=”Lua scripts”          调用的脚本名&lt;br /&gt;
 --script-args=n1=v1,[n2=v2]     调用的脚本传递的参数&lt;br /&gt;
 --script-args-file=filename     使用文本传递参数&lt;br /&gt;
 --script-trace                  显示所有发送和接收到的数据&lt;br /&gt;
 --script-updatedb               更新脚本的数据库&lt;br /&gt;
 --script-help=”Lua script”      显示指定脚本的帮助&lt;/p&gt;
&lt;h2 id=&#34;0x05-os识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x05-os识别&#34;&gt;#&lt;/a&gt; 0x05 OS 识别&lt;/h2&gt;
&lt;p&gt;-O              启用操作系统检测，-A 来同时启用操作系统检测和版本检测&lt;br /&gt;
 --osscan-limit  针对指定的目标进行操作系统检测 (至少需确知该主机分别有一个 open 和 closed 的端口)&lt;br /&gt;
--osscan-guess  推测操作系统检测结果，当 Nmap 无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap 默认进行这种匹配&lt;/p&gt;
&lt;h2 id=&#34;0x06-防火墙ids躲避和欺骗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x06-防火墙ids躲避和欺骗&#34;&gt;#&lt;/a&gt; 0x06 防火墙 / IDS 躲避和欺骗&lt;/h2&gt;
&lt;p&gt;-f; --mtu value                 指定使用分片、指定数据包的 MTU.&lt;br /&gt;
-D decoy1,decoy2,ME             使用诱饵隐蔽扫描&lt;br /&gt;
 - S IP-ADDRESS                   源地址欺骗&lt;br /&gt;
 - e interface                    使用指定的接口&lt;br /&gt;
 - g/--source-port PROTNUM       使用指定源端口&lt;br /&gt;
 --proxies url1,[url2],...       使用 HTTP 或者 SOCKS4 的代理&lt;/p&gt;
&lt;p&gt;--data-length NUM               填充随机数据让数据包长度达到 NUM&lt;br /&gt;
--ip-options OPTIONS            使用指定的 IP 选项来发送数据包&lt;br /&gt;
 --ttl VALUE                     设置 IP time-to-live 域&lt;br /&gt;
 --spoof-mac ADDR/PREFIX/VEBDOR  MAC 地址伪装&lt;br /&gt;
 --badsum                        使用错误的 checksum 来发送数据包&lt;/p&gt;
&lt;h2 id=&#34;0x07-输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x07-输出&#34;&gt;#&lt;/a&gt; 0x07 输出&lt;/h2&gt;
&lt;p&gt;-oN                     将标准输出直接写入指定的文件&lt;br /&gt;
 - oX                     输出 xml 文件&lt;br /&gt;
 - oS                     将所有的输出都改为大写&lt;br /&gt;
 - oG                     输出便于通过 bash 或者 perl 处理的格式，非 xml&lt;br /&gt;
-oA BASENAME            可将扫描结果以标准格式、XML 格式和 Grep 格式一次性输出&lt;br /&gt;
 - v                      提高输出信息的详细度&lt;br /&gt;
 - d level                设置 debug 级别，最高是 9&lt;br /&gt;
--reason                显示端口处于带确认状态的原因&lt;br /&gt;
 --open                  只输出端口状态为 open 的端口&lt;br /&gt;
 --packet-trace          显示所有发送或者接收到的数据包&lt;br /&gt;
 --iflist                显示路由信息和接口，便于调试&lt;br /&gt;
 --log-errors            把日志等级为 errors/warings 的日志输出&lt;br /&gt;
 --append-output         追加到指定的文件&lt;br /&gt;
 --resume FILENAME       恢复已停止的扫描&lt;br /&gt;
 --stylesheet PATH/URL   设置 XSL 样式表，转换 XML 输出&lt;br /&gt;
 --webxml                从 namp.org 得到 XML 的样式&lt;br /&gt;
 --no-sytlesheet         忽略 XML 声明的 XSL 样式表&lt;/p&gt;
&lt;h2 id=&#34;0x08-其他选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x08-其他选项&#34;&gt;#&lt;/a&gt; 0x08 其他选项&lt;/h2&gt;
&lt;p&gt;-6                      开启 IPv6&lt;br /&gt;
-A                      OS 识别，版本探测，脚本扫描和 traceroute&lt;br /&gt;
--datedir DIRNAME       说明用户 Nmap 数据文件位置&lt;br /&gt;
 --send-eth /--send-ip  使用原以太网帧发送 / 在原 IP 层发送&lt;br /&gt;
 --privileged            假定用户具有全部权限&lt;br /&gt;
 --unprovoleged          假定用户不具有全部权限，创建原始套接字需要 root 权限&lt;br /&gt;
 - V                      打印版本信息&lt;br /&gt;
 - h                      输出帮助&lt;/p&gt;
&lt;h1 id=&#34;nmap-例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap-例子&#34;&gt;#&lt;/a&gt; nmap 例子&lt;/h1&gt;
&lt;p&gt;使用 ping 检测 10.0.0.0/24 这个网段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -sP 10.0.0.0/24&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 的方法对全端口进行扫描，在 aggressive (4) 的时间模板下，同时对开放的端口进行端口识别&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -p1-65535 -sV -sS -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PS: -T 代表的是扫描的时候，一些控制选项 (TCP 的延迟时间，探测报文之间的间隔等) 的集合，具体的 man nmap 一下就知道了&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 aggressive (4) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sS -A -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sS -A -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，操作系统的类型，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -sV -O -sS -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 aggressive (4) 的时间模板下，探测操作系统的类型还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -p 1-65535 -sV -O -sS -T4 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，结果输出较为详细&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -v -p 1-65535 -sV -O -sS -T5 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从文件中读取需要扫描的 IP 列表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -iL ip-address.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nmap 输出格式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;扫描的结果输出到屏幕，同时会存储一份到 grep-output.txt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -p 139,445 -oG grep-output.txt 10.0.1.0/24&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;扫描结果输出为 html&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sS -sV -T5 10.0.1.99 --webxml -oX - | xsltproc --output file.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nmap 扫描 Netbios&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在子网中发现开放 netbios 的 IP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -v -p139,445 10.0.0.1/24&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;扫描指定 netbios 的名称&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nmap -sU --script nbstat.nse -p 137 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;扫描指定的目标，同时检测相关漏洞&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap --script-args=unsafe=1 --script smb-check-vulns.nse -p 445 target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将 nmap 的 80 端口的扫描结果，通过管道交给 nikto 进行扫描&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nmap Nikto Scan nmap -p80 10.0.1.0/24 -oG - | nikto.pl -h -&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将 nmap 的 80,443 端口的扫描结果，通过管道交给 nikto 进行扫描&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -p80,443 10.0.1.0/24 -oG - | nikto.pl -h -&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/03/02/%E5%88%9D%E5%AD%A6webshell%E6%A3%80%E6%B5%8B/</guid>
            <title>初学webshell检测</title>
            <link>https://self-ferry.github.io/2021/03/02/%E5%88%9D%E5%AD%A6webshell%E6%A3%80%E6%B5%8B/</link>
            <pubDate>Tue, 02 Mar 2021 17:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/02/26/%E5%9C%A8Android%E4%B8%8A%E5%AE%89%E8%A3%85kali/</guid>
            <title>在Android上安装kali</title>
            <link>https://self-ferry.github.io/2021/02/26/%E5%9C%A8Android%E4%B8%8A%E5%AE%89%E8%A3%85kali/</link>
            <category term="Android" scheme="https://self-ferry.github.io/categories/Android/" />
            <category term="Android" scheme="https://self-ferry.github.io/tags/Android/" />
            <pubDate>Fri, 26 Feb 2021 13:55:57 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;️正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#️正文&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label success&#34;&gt;✔️正文&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;就不多此一举了，还是看国光大佬写的吧&lt;br /&gt;
链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc3Fsc2VjLmNvbS8yMDE4LzA1L3Rlcm11eC5odG1s&#34;&gt;https://www.sqlsec.com/2018/05/termux.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/02/19/linux%E8%BF%9B%E9%98%B6/</guid>
            <title>linux进阶学习</title>
            <link>https://self-ferry.github.io/2021/02/19/linux%E8%BF%9B%E9%98%B6/</link>
            <category term="Linux" scheme="https://self-ferry.github.io/categories/Linux/" />
            <category term="Linux" scheme="https://self-ferry.github.io/tags/Linux/" />
            <pubDate>Fri, 19 Feb 2021 14:54:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️来首音乐吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=555964763&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;网络配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络配置&#34;&gt;#&lt;/a&gt; 网络配置&lt;/h1&gt;
&lt;h2 id=&#34;ifconfig-详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifconfig-详解&#34;&gt;#&lt;/a&gt; ifconfig 详解&lt;/h2&gt;
&lt;p&gt;ifconfig 命令可以显示或配置网络设备 (网络接口卡) , 也可以修改这些配置。&lt;br /&gt;
用 ifconfig 命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永久保存，那就要修改网卡的配置文件了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DEVICE=“ens33” 　　# 网卡名称&lt;br /&gt;
 // UP：表示 “接口已启用”。&lt;br /&gt;
// BROADCAST ：表示 “主机支持广播”。&lt;br /&gt;
// RUNNING：表示 “接口在工作中”。&lt;br /&gt;
// MULTICAST：表示 “主机支持多播”。&lt;br /&gt;
// MTU:1500（最大传输单元）：1500 字节&lt;br /&gt;
 //inet ：网卡的 IP 地址。&lt;br /&gt;
//netmask ：网络掩码。&lt;br /&gt;
//broadcast ：广播地址。&lt;br /&gt;
// 网卡的 IPv6 地址&lt;br /&gt;
 // 连接类型：Ethernet (以太网) HWaddr (硬件 mac 地址)&lt;br /&gt;
//txqueuelen (网卡设置的传送队列长度)&lt;br /&gt;
// RX packets 接收时，正确的数据包数。&lt;br /&gt;
// RX bytes 接收的数据量。&lt;br /&gt;
// RX errors 接收时，产生错误的数据包数。&lt;br /&gt;
// RX dropped 接收时，丢弃的数据包数。&lt;br /&gt;
// RX overruns 接收时，由于速度过快而丢失的数据包数。&lt;br /&gt;
// RX frame 接收时，发生 frame 错误而丢失的数据包数。&lt;br /&gt;
// TX packets 发送时，正确的数据包数。&lt;br /&gt;
// TX bytes 发送的数据量。&lt;br /&gt;
// TX errors 发送时，产生错误的数据包数。&lt;br /&gt;
// TX dropped 发送时，丢弃的数据包数。&lt;br /&gt;
// TX overruns 发送时，由于速度过快而丢失的数据包数。&lt;br /&gt;
// TX carrier 发送时，发生 carrier 错误而丢失的数据包数。&lt;br /&gt;
//collisions 冲突信息包的数目。&lt;/p&gt;
&lt;p&gt;lo: 表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。&lt;/p&gt;
&lt;p&gt;ifconfig 的配置针对当前起作用，, 当服务器进行重启启动，配置的 IP 和掩码等信息都会丢失因为 ifconfig 的没有把配置写入到配置文件，当系统重新启动中，会重新加载网络配置文件，因此配置会丢失&lt;/p&gt;
&lt;p&gt;ifconfig 命令 参数具体见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWlmY29uZmlnLmh0bWw=&#34;&gt; https://www.runoob.com/linux/linux-comm-ifconfig.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;网络配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络配置文件&#34;&gt;#&lt;/a&gt; 网络配置文件&lt;/h2&gt;
&lt;p&gt;网络接口配置文件均存放在 /etc/sysconfig/network-scripts/ 目录下&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Ethernet&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;PROXY_METHOD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;none&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BROWSER_ONLY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;none&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEFROUTE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV4_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6INIT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_AUTOCONF&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_DEFROUTE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_ADDR_GEN_MODE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;stable-privacy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ens33&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;3693f084-6c9a-4b4e-82ef-62377f4c3502&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEVICE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ens33&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.10.100&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;PREFIX&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.198&lt;/span&gt;.10.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#################################&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;下面介绍改配置文件中的每一行的含义。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#################################&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEVICE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡设备名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;HWADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的物理地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的UUID&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:IP地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NETMASK&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:子网掩码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网关&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DNS1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:DNS&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:该网卡是否激活&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NM_CONTROLLED&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网络是否由NetworkManager进行管理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;：启动远程协议为静态设置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;路由的查看及配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由的查看及配置&#34;&gt;#&lt;/a&gt; 路由的查看及配置&lt;/h2&gt;
&lt;p&gt;路由 (route) 就是分组在因特网上从一台计算机传输到另一台计算机的实际路径。&lt;br /&gt;
因特网上的每个路由器都存储有一张表，称为路由表 (routing table), 路由器正是依据路由表的内容将各个 IP 分组转发到正确的去处。&lt;/p&gt;
&lt;p&gt;路由，路由器，路由表的区别:&lt;/p&gt;
&lt;p&gt;路由：既可以指计算机之间的传输路径，又可以指传输这一动态过程&lt;br /&gt;
路由器：设备，即完成路由这一动态过程的设备&lt;br /&gt;
路由表：信息，是储存在路由器中的用来路由的信息&lt;/p&gt;
&lt;p&gt;查看路由命令：&lt;br /&gt;
 &lt;code&gt;netstat -r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;route -n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看本机路由信息&lt;br /&gt;
 &lt;code&gt;route -n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加一条默认路由，临时生效 (重启后就会失效)&lt;br /&gt;
 &lt;code&gt;route add default qw 192.168.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除一条默认路由&lt;br /&gt;
 &lt;code&gt;route del default gw 192.168.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加一条静态路由，发往 192.168.8.62 这个网段的全部要经过网关 192.168.1.1&lt;br /&gt;
 &lt;code&gt;route add-net 192.168.8.0 netmask 255.255.255.0 gw 192.168.1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除一条静态路由，删除的时候可以不写网关&lt;br /&gt;
 &lt;code&gt;route del -net 192.168.8.0 netmask 255.255.255.0 gw 192.168.1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置包转发功能:&lt;/p&gt;
&lt;p&gt;开启 Liunx 的路由转发功能:&lt;br /&gt;
 编辑 /etc/sysctl.conf 设置 net.pv4.p forward=1&lt;/p&gt;
&lt;p&gt;临时配置：&lt;br /&gt;
 &lt;code&gt;echo &amp;quot;1&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;dns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns&#34;&gt;#&lt;/a&gt; DNS&lt;/h2&gt;
&lt;p&gt;Linux 下查看本地的 DNS:&lt;br /&gt;
1.cat /etc/resolv.conf&lt;br /&gt;
2.nslookup &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20=&#34;&gt;www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns-查询工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-查询工具&#34;&gt;#&lt;/a&gt; DNS 查询工具&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nslookup 是一个能够查询互联网域名服务器信息的程序。&lt;br /&gt;
他有两种工作模式，即 &amp;quot;交互模式&amp;quot; 和 &amp;quot;非交互模式&amp;quot;&lt;br /&gt;
在&amp;quot; 交互模式 &amp;quot; 下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。&lt;br /&gt;
而在 “非交互模式 &amp;quot; 下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dig 是一个在类 Unix 命令行模式下查询 DNS 包括 NSi 录，A 记录，MX 记录等相关信息的工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;dig 命令:&lt;br /&gt;
 查询一台主机，但是默认情况下，Dig 的输出信息很详细&lt;br /&gt;
最常用的查询是 A 记录，TXT (文本注释) , MXi 录，NS 记录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns域名解析中添加的各项解析记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns域名解析中添加的各项解析记录&#34;&gt;#&lt;/a&gt; DNS 域名解析中添加的各项解析记录&lt;/h3&gt;
&lt;p&gt;A 记录： 将域名指向一个 IPv4 地址（例如：100.100.100.100），需要增加 A 记录&lt;/p&gt;
&lt;p&gt;CNAME 记录： 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加 CNAME 记录。这个域名一般是主机服务商提供的一个域名&lt;/p&gt;
&lt;p&gt;MX 记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置 MX 记录。建立邮箱时，一般会根据邮箱服务商提供的 MX 记录填写此记录&lt;/p&gt;
&lt;p&gt;NS 记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置 NS 记录&lt;/p&gt;
&lt;p&gt;TXT 记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做 SPF（反垃圾邮件）记录&lt;/p&gt;
&lt;p&gt;AAAA 记录： 将主机名（或域名）指向一个 IPv6 地址（例如：ff03:0:0:0:0:0:0:c1），需要添加 AAAA 记录&lt;/p&gt;
&lt;p&gt;SRV 记录： 添加服务记录服务器服务记录时会添加此项，SRV 记录了哪台计算机提供了哪个服务。格式为：服务的名字。协议的类型（例如：_example-server._tcp）。&lt;/p&gt;
&lt;p&gt;SOA 记录： SOA 叫做起始授权机构记录，NS 用于标识多台域名解析服务器，SOA 记录用于在众多 NS 记录中那一台是主服务器&lt;/p&gt;
&lt;p&gt;PTR 记录： PTR 记录是 A 记录的逆向记录，又称做 IP 反查记录或指针记录，负责将 IP 反向解析为域名&lt;/p&gt;
&lt;p&gt;显性 URL 转发记录： 将域名指向一个 http (s) 协议地址，访问域名时，自动跳转至目标地址。例如：将 www.liuht.cn 显性转发到 www.itbilu.com 后，访问 www.liuht.cn 时，地址栏显示的地址为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5pdGJpbHUuY29t&#34;&gt;www.itbilu.com&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;隐性 UR 转发记录 L： 将域名指向一个 http (s) 协议地址，访问域名时，自动跳转至目标地址，隐性转发会隐藏真实的目标地址。例如：将 www.liuht.cn 显性转发到 www.itbilu.com 后，访问 www.liuht.cn 时，地址栏显示的地址仍然是：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5saXVodC5jbg==&#34;&gt;www.liuht.cn&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Reference:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmx1ZXN0b3JtL3AvMTAzNDUzMzQuaHRtbA==&#34;&gt;https://www.cnblogs.com/bluestorm/p/10345334.html&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;iptables详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables详解&#34;&gt;#&lt;/a&gt; iptables 详解&lt;/h1&gt;
&lt;h2 id=&#34;防火墙类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙类型&#34;&gt;#&lt;/a&gt; 防火墙类型&lt;/h2&gt;
&lt;h3 id=&#34;包过滤防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#包过滤防火墙&#34;&gt;#&lt;/a&gt; 包过滤防火墙&lt;/h3&gt;
&lt;p&gt;在 Linux 系统下，包过滤功能是内建于核心的 (作为一个核心模块，或者直接内建) , 同时还有一些可以运用于数据包之上的技巧，不过最常用的依然是查看包头以决定包的命运。包过滤防火墙将对每一个接收到的包做出允许或拒绝的决定。具体地讲，它针对每一个数据包的包头，按照包过滤规则进行判定，与规则相匹配的包依据路由信息继续转发，否则就丢弃。包过滤是在 IP 层实现的，包过滤根据数据包的源 P 地址、目的 IP 地址、协议类型 (TCP 包 UDP 包、ICMP 包)、源端口、目的端口等包头信息及数据包传输方向等信息来判断是否允许数据包通过。 包过滤也包括与服务相关的过滤，这是指基于特定的服务进行包过滤，由于绝大多数服务的监听都驻留在特定 TCP/UDP 端口，因此，为阻断所有进入特定服务的链接，防火墙只需将所有包含特定 TCP/UDP 目的端口的包丢弃即可&lt;/p&gt;
&lt;h3 id=&#34;状态检测防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态检测防火墙&#34;&gt;#&lt;/a&gt; 状态检测防火墙&lt;/h3&gt;
&lt;p&gt;状态检测防火墙在网络层有一个检查引擎截获数据包并抽取出与应用层状态有关的信息，并以此为依据决定对该连接是接受还是拒绝。这种技术提供了高度安全的解决方案，同时具有较好的适应性和扩展性。状态检测防火墙基本保持了简单包过滤防火墙的优点，性能比较好，同时对应用是透明的，在此基础上，对于安全性有了大幅提升。这种防火墙摒弃了简单包过滤防火墙仅仅考察进出网络的数据包，不关心数据包状态的缺点，在防火墙的核心部分建立状态连接表，维护了连接，将进出网络的数据当成一个个的事件来处理。可以这样说，状态检测包过滤防火墙规范了网络层和传输层行为，而应用代理型防火墙则是规范了特定的应用协议上的行为。&lt;/p&gt;
&lt;h2 id=&#34;iptables介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables介绍&#34;&gt;#&lt;/a&gt; iptables 介绍&lt;/h2&gt;
&lt;p&gt;netfilter/iptables (简称为 iptables) 组成 Linux 平台下的包过滤防火墙，与大多数的 Linux 软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换 (NAT) 等功能。&lt;/p&gt;
&lt;p&gt;其实 iptables 服务不是真正的防火墙，只是用来定义防火墙规则功能的 &amp;quot;防火墙管理工具&amp;quot;, 将定义好的规则交由内核中的 netfilter 即网络过滤器来读取，从而真正实现防火墙功能。&lt;/p&gt;
&lt;h2 id=&#34;iptables基本信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables基本信息&#34;&gt;#&lt;/a&gt; iptables 基本信息&lt;/h2&gt;
&lt;p&gt;规则 (rules) 其实就是网络管理员预定义的条件，规则一般的定义为 &amp;quot;如果数据包头符合这样的条件，就这样处理这个数据包&amp;quot;&lt;/p&gt;
&lt;p&gt;规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议 (如 TCP, UDP,ICMP) 和服务类型 (如 HTTP, FTP 和 SMTP) 等。&lt;/p&gt;
&lt;p&gt;当数据包与规则匹配时，iptables 就根据规则所定义的方法来处理这些数据包，如放行 (accept) 、拒绝 (reject) 和丢弃 (drop) 等。&lt;/p&gt;
&lt;p&gt;配置防火墙的主要工作就是添加、修改和删除这些规则。&lt;/p&gt;
&lt;h2 id=&#34;表与链介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表与链介绍&#34;&gt;#&lt;/a&gt; 表与链介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表 (tables) 提供特定的功能，iptables 内置了 4 个表，即 filter 表、nat 表、mangle 表和 raw 表，分别用于实现包过滤，网络地址转换、包重构 (修改) 和数据跟踪处理，这些表具有一定的优先级: raw--&amp;gt;mangle--&amp;gt;nat--&amp;gt;filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链 (chains) 是数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;规则链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#规则链&#34;&gt;#&lt;/a&gt; 规则链&lt;/h2&gt;
&lt;h3 id=&#34;一些需要知道的规则链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一些需要知道的规则链&#34;&gt;#&lt;/a&gt; 一些需要知道的规则链&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;INPUT - 进来的数据包应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;OUTPUT - 外出的数据包应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;FORWARD - 转发数据包时应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;PREROUTING - 对数据包作路由选择前应用此链中的规则 (记住！所有的数据包进来的时候都先由这个链处理)&lt;/li&gt;
&lt;li&gt;POSTROUTING - 对数据包作路由选择后应用此链中的规则 (所有的数据包出来的时候都先由这个链处理)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;完整的规则链&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;规则表的先后顺序:&lt;br /&gt;
raw-&amp;gt;mangle-&amp;gt;nat-&amp;gt;filter&lt;/p&gt;
&lt;p&gt;规则链的先后顺序:&lt;br /&gt;
 入站顺序 PREROUTING-&amp;gt;INPUT&lt;br /&gt;
 出站顺序：OUTPUT-&amp;gt;POSTROUTING&lt;br /&gt;
 转发顺序：PREROUTING-&amp;gt;FORWARD-&amp;gt;POSTROUTING&lt;/p&gt;
&lt;h2 id=&#34;iptables传输数据包的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables传输数据包的过程&#34;&gt;#&lt;/a&gt; iptables 传输数据包的过程&lt;/h2&gt;
&lt;p&gt;当一个数据包进入网卡时，它首先进入 PREROUTING 链，内核根据数据包目的 IP 判断是否需要转送出去。&lt;/p&gt;
&lt;p&gt;如果数据包就是进入本机的，它就会向下移动，到达 INPUT 链。数据包到了 INPUT 链后，任何进程都会收到它。本机上运行的程序可以发送数据包，这些数据包会经过 OUTPUT 链，然后到达 POSTROUTING 链输出。&lt;/p&gt;
&lt;p&gt;如果数据包是要转发出去的，且内核允许转发，数据包就会经过 FORWARD 链，然后到达 POSTROUTING 链输出。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;iptables命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables命令&#34;&gt;#&lt;/a&gt; iptables 命令&lt;/h2&gt;
&lt;p&gt;iptables 格式:&lt;br /&gt;
iptables [-t 表名] 选项 [链名] [条件] [-j 控制类型]&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;详细解释见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdmF0aGUvcC82OTczNjU2Lmh0bWw=&#34;&gt; https://www.cnblogs.com/vathe/p/6973656.html&lt;/span&gt;&lt;br /&gt;
 有人总结的挺全的就不造轮子了（懒）。&lt;/p&gt;
&lt;h2 id=&#34;iptables常识与常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables常识与常用命令&#34;&gt;#&lt;/a&gt; iptables 常识与常用命令&lt;/h2&gt;
&lt;p&gt;CentOS7 默认的防火墙不是 iptables, 而是 firewalle.&lt;br /&gt;
 如果你没有安装 iptables 的话，你可以使用以下命令进行安装&lt;br /&gt;
 systemctl stop firewalld&lt;br /&gt;
systemctl disable firewalld&lt;br /&gt;
systemctl mask firewalld&lt;br /&gt;
 上面的意思是先屏蔽掉原有的 firewall 防火墙，下面我们就开始安装 iptables，至于为什么要安装 IPtables 我就不讲了&lt;br /&gt;
 yum install iptables iptables-services -y&lt;/p&gt;
&lt;p&gt;设置规则&lt;br /&gt;
 #查看 iptables 现有规则&lt;br /&gt;
 iptables -L -n&lt;br /&gt;
# 先允许所有，不然有可能会杯具&lt;br /&gt;
 iptables -P INPUT ACCEPT&lt;br /&gt;
# 清空所有默认规则&lt;br /&gt;
 iptables -F&lt;br /&gt;
# 清空所有自定义规则&lt;br /&gt;
 iptables -X&lt;br /&gt;
# 所有计数器归 0&lt;br /&gt;
iptables -Z&lt;br /&gt;
# 允许来自于 lo 接口的数据包 (本地访问)&lt;br /&gt;
iptables -A INPUT -i lo -j ACCEPT&lt;br /&gt;
# 开放 22 端口&lt;br /&gt;
 iptables -A INPUT -p tcp --dport 22 -j ACCEPT&lt;br /&gt;
# 开放 21 端口 (FTP)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 21 -j ACCEPT&lt;br /&gt;
# 开放 80 端口 (HTTP)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 80 -j ACCEPT&lt;br /&gt;
# 开放 443 端口 (HTTPS)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 443 -j ACCEPT&lt;br /&gt;
# 允许 ping&lt;br /&gt;
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT&lt;br /&gt;
# 允许接受本机请求之后的返回数据 RELATED, 是为 FTP 设置的&lt;br /&gt;
 iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT&lt;br /&gt;
# 其他入站一律丢弃&lt;br /&gt;
 iptables -P INPUT DROP&lt;br /&gt;
# 所有出站一律绿灯&lt;br /&gt;
 iptables -P OUTPUT ACCEPT&lt;br /&gt;
# 所有转发一律丢弃&lt;br /&gt;
 iptables -P FORWARD DROP&lt;/p&gt;
&lt;p&gt;其他规则设定&lt;br /&gt;
 #如果要添加内网 ip 信任（接受其所有 TCP 请求）&lt;br /&gt;
iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT&lt;br /&gt;
# 过滤所有非以上规则的请求&lt;br /&gt;
 iptables -P INPUT DROP&lt;br /&gt;
# 要封停一个 IP，使用下面这条命令：&lt;br /&gt;
iptables -I INPUT -s ... -j DROP&lt;br /&gt;
# 要解封一个 IP，使用下面这条命令:&lt;br /&gt;
iptables -D INPUT -s ... -j DROP&lt;/p&gt;
&lt;p&gt;#保存上述规则&lt;br /&gt;
 service iptables save&lt;br /&gt;
 开启 iptables 服务&lt;br /&gt;
 #注册 iptables 服务&lt;br /&gt;
 #相当于以前的 chkconfig iptables on&lt;br /&gt;
systemctl enable iptables.service&lt;br /&gt;
# 开启服务&lt;br /&gt;
 systemctl start iptables.service&lt;br /&gt;
# 查看状态&lt;br /&gt;
 systemctl status iptables.service&lt;/p&gt;
&lt;h1 id=&#34;linux进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux进程&#34;&gt;#&lt;/a&gt; Linux 进程&lt;/h1&gt;
&lt;p&gt;推荐一篇博客，《&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW51eC5jbi9hcnRpY2xlLTg0NTEtMS5odG1s&#34;&gt;关于 Linux 进程你所需要知道的一起&lt;/span&gt;》&lt;/p&gt;
&lt;h2 id=&#34;top命令实时的查看进程的状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#top命令实时的查看进程的状态&#34;&gt;#&lt;/a&gt; top 命令：实时的查看进程的状态&lt;/h2&gt;
&lt;p&gt;top 是一个前台程序，所以是可以交互的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;常用交互命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;q&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;退出程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;l&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;切换显示平均负载和启动时间的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;P&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据 CPU 使用百分比大小进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据驻留内存大小进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;i&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;忽略闲置和僵死的进程，这是一个开关式命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;终止一个进程，系统提示输入 PID 及发送的信号值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ps命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ps命令&#34;&gt;#&lt;/a&gt; ps 命令&lt;/h2&gt;
&lt;p&gt;ps -ef 显示所有进程的详细信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;UID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PPID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;C&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;STIME&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TTY&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CMD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程的 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;父进程 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程占用 CPU 的百分比&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程启动的时间&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;该进程在那个终端上运行。若与终端无关，则显示？若为 pts/0 等，则表示由网络连和参数接主机进程。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;命令的名称和参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ps -aux 显示所有进程信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ps -A 显示所有的进程信息&lt;br /&gt;
 ps -u root 显示指定用户的进程信息&lt;br /&gt;
 ps -l 显示目前属于本次登陆得 PID 相关信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ps -ef|grep sshd|grep -v &amp;quot;grep&amp;quot;&lt;/code&gt;  配合管道符与 grep，显示 sshd 的进程信息。&lt;/p&gt;
&lt;h2 id=&#34;kill-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kill-命令&#34;&gt;#&lt;/a&gt; kill 命令&lt;/h2&gt;
&lt;p&gt;kill 命令：用于删除执行的程序或工作，通过向进程发送指定的信号来结束进程。&lt;/p&gt;
&lt;p&gt;用法：kill  [信号] PID&lt;/p&gt;
&lt;p&gt;常用信号：&lt;br /&gt;
2  结束进程，不是强制性的，&amp;quot;Ctrl + C&amp;quot; 发出的就是 kill -2 信号&lt;br /&gt;
 3  退出&lt;br /&gt;
 9  杀死进程，强制结束进程。&lt;/p&gt;
&lt;h1 id=&#34;端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口&#34;&gt;#&lt;/a&gt; 端口&lt;/h1&gt;
&lt;p&gt;在 Linux 操作系统下，系统共定义了 65536 个可用的端口。&lt;br /&gt;
对于 0-1023 端口，都需要 root 身份才能启用，这些端口主要用于系统一些常见的通信服务中。比如: 21 ftp 服务、22 ssh 服务、80 http 服务等...&lt;br /&gt;
 端口的开启和关闭也就是软件服务的启动和关闭&lt;/p&gt;
&lt;h2 id=&#34;chkconfig命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chkconfig命令&#34;&gt;#&lt;/a&gt; chkconfig 命令&lt;/h2&gt;
&lt;p&gt;chkconfig 来判断服务是开启还是关闭状态&lt;br /&gt;
例如 chkconfig --list sshd&lt;/p&gt;
&lt;h2 id=&#34;netstat命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netstat命令&#34;&gt;#&lt;/a&gt; netstat 命令&lt;/h2&gt;
&lt;p&gt;netstat 命令：用于显示 tcp, udp 的端口和进程情况&lt;br /&gt;
用法:&lt;br /&gt;
netstat [选项]&lt;br /&gt;
-a 显示所有&lt;br /&gt;
 - t 仅显示 tcp 相关选项&lt;br /&gt;
 - u 仅显示 udp 相关选项&lt;br /&gt;
 - n 拒绝显示别名，能显示数字的全部转化为数字&lt;br /&gt;
 - l 仅列出在 Listen (监听) 的服务状态&lt;br /&gt;
 - p 显示建立相关链接的程序名&lt;/p&gt;
&lt;p&gt;常用命令:&lt;br /&gt;
netstat-antlp // 查看当前所有 tcp 端口&lt;br /&gt;
 netstat-antulp|grep 80 // 查看所有 80 端口使用情况&lt;/p&gt;
&lt;h1 id=&#34;linux计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux计划任务&#34;&gt;#&lt;/a&gt; linux 计划任务&lt;/h1&gt;
&lt;p&gt;计划任务，就是在约定好的时间执行已经计划好的工作。&lt;br /&gt;
未来的某时间点执行一次某任务或者周期性的运行某个任务，执行结果会通过邮形式发送给用户。&lt;/p&gt;
&lt;h2 id=&#34;安全与计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全与计划任务&#34;&gt;#&lt;/a&gt; 安全与计划任务&lt;/h2&gt;
&lt;p&gt;挖矿病毒：&lt;br /&gt;
使用 top 查看 CPU，显示进程占 cpu99% 以上。杀掉进程后，到了晚上还是会自动运行进程。&lt;br /&gt;
检测定时任务，发现有一个异常的定时任务&lt;/p&gt;
&lt;h2 id=&#34;at命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#at命令&#34;&gt;#&lt;/a&gt; at 命令&lt;/h2&gt;
&lt;p&gt;at 命令 一次性计划任务&lt;br /&gt;
默认自带 at&lt;br /&gt;
 &lt;code&gt;yum install at -y&lt;/code&gt;     下载 at&lt;/p&gt;
&lt;p&gt;开启服务:&lt;br /&gt;
service atd start&lt;/p&gt;
&lt;p&gt;用法:&lt;br /&gt;
at (选项)&lt;br /&gt;
 选项&lt;br /&gt;
 - f: 指定包含具体指令的任务文件；&lt;br /&gt;
-q: 指定新任务的队列名称；&lt;br /&gt;
-l: 显示待执行任务的列表；&lt;br /&gt;
-d: 删除指定的待执行任务；&lt;br /&gt;
-m: 任务执行完成后向用户发送 E-mail;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;at 10:00    确切时间&lt;br /&gt;
 at now +10 minutes  十分钟后执行&lt;br /&gt;
 at 17:04 04/04/2018  2018483817:04 执行&lt;br /&gt;
 at 17:04 04/04/2018  2018483817:04 执行&lt;/p&gt;
&lt;p&gt;at 1am tomorrow 明天上午一点运行作业&lt;br /&gt;
 at-c id    根据作业 ID 查看执行细节&lt;br /&gt;
 atq        查看待处理的任务&lt;br /&gt;
 atrm id    删除 id 的任务&lt;/p&gt;
&lt;h2 id=&#34;crondtab命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crondtab命令&#34;&gt;#&lt;/a&gt; crondtab 命令&lt;/h2&gt;
&lt;p&gt;crondtab 命令 周期性计划任务&lt;/p&gt;
&lt;p&gt;crond 是 linux 下用来周期性的执行某种任务或等待处理某些事件的一个守护进程。&lt;/p&gt;
&lt;p&gt;Linux 系统上系统服务是默认启动的，使用者控制计划任务命令:crontab 命令。&lt;/p&gt;
&lt;p&gt;crontab 其实是一个命令，用来读取和修改名为 crontab 的文件。/etc/crontab 文件包含了要定时执行的程序列表。&lt;/p&gt;
&lt;p&gt;安装 crontab: 默认自带&lt;br /&gt;
 &lt;code&gt;yum install crontabs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;服务命令:&lt;/p&gt;
&lt;p&gt;service crond start // 启动服务 service crond stop // 关闭服务 service crond restart// 重启服务 service crond reload // 重新载入配置&lt;/p&gt;
&lt;p&gt;crontab 命令 周期性计划任务&lt;/p&gt;
&lt;p&gt;1、命令格式:&lt;/p&gt;
&lt;p&gt;crontab [-u user] file&lt;br /&gt;
crontab [-u user] 【选项】&lt;/p&gt;
&lt;p&gt;常用选项:&lt;/p&gt;
&lt;p&gt;-e: 编辑计划任务 edit&lt;br /&gt;
-l: 查看计划任务 display&lt;br /&gt;
-u: 指定用户&lt;/p&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;p&gt;crontab -l 列出当前用户的计划任务&lt;br /&gt;
 crontab -r 删除当前用户所有的计划任务&lt;br /&gt;
 crontab -e 编辑当前用户的计划任务&lt;br /&gt;
 crontab-e -u root 编辑 root 用户的计划任务&lt;/p&gt;
&lt;p&gt;第一列：分钟 (0-59)&lt;br /&gt;
 第二列：小时 (0-23)&lt;br /&gt;
 第三列：天 (1-31)&lt;br /&gt;
 第四列：月 (1-12)&lt;br /&gt;
 第五列：周 (0-6) 0 表示周日&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;em&gt;&amp;quot; 表示所有的取值，就是&lt;/em&gt; / 1&amp;quot;&lt;br /&gt;
&amp;quot;/&amp;quot; 表示每的意思&lt;br /&gt;
 */5&amp;quot; 表示每 5 个单位&lt;br /&gt;
 &amp;quot;-&amp;quot; 表示从某个数字到某个数字&lt;br /&gt;
 &amp;quot;,&amp;quot; 表示分散的数字&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;crontab.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;实例&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image011.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;日志服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志服务&#34;&gt;#&lt;/a&gt; 日志服务&lt;/h1&gt;
&lt;h2 id=&#34;基础信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础信息&#34;&gt;#&lt;/a&gt; 基础信息&lt;/h2&gt;
&lt;p&gt;在 CentOS 6.x 中，日志服务已经由 rsyslogd 取代了原先的 syslogd.&lt;br /&gt;
rsyslogd 相比 syslogd 具有一些新的特点:&lt;br /&gt;
 基于 TCP 网络协议传输日志信息。&lt;br /&gt;
更安全的网络传输方式。&lt;br /&gt;
有日志信息的即时分析框架。&lt;br /&gt;
后台数据库。&lt;br /&gt;
在配置文件中可以写简单的逻辑判断。&lt;br /&gt;
与 syslog 配置文件相兼容。&lt;/p&gt;
&lt;p&gt;查看 rsyslogd 服务是否启动&lt;br /&gt;
 &lt;code&gt;ps aux|grep &amp;quot;rsyslogd&amp;quot;|grep -v &amp;quot;grep&amp;quot;&lt;/code&gt; &lt;br /&gt;
 查询 rsyslogd 服务的自启动状态&lt;br /&gt;
 &lt;code&gt;chkconfig --list|grep &amp;quot;rsyslog&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;systemctl list-unit-files|grep &amp;quot;rsyslog&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 Linux 系统中有一部分日志不是由 rsyslogd 服务来管理的，比如 apache 服务，它的日志是由 Apache 软件自己产生并记录的，并没有调用 rsyslogd 服务，但是 apache 日志文件的格式和系统默认日志的格式是一致的。&lt;/p&gt;
&lt;p&gt;在 Linux 系统中有一部分日志不是由 rsyslogd 服务来管理的，比如 apache 服务，它的日志是由 Apache 软件自己产生并记录的，并没有调用 rsyslogd 服务，但是 apache 日志文件的格式和系统默认日志的格式是一致的。&lt;/p&gt;
&lt;p&gt;日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。这些信息有些非常敏感，所以在 Linux 中这些日志文件只有 root 用户可以读取。&lt;br /&gt;
系统日志文件的保存位置是 /var/log/ 目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image012.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image013.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image014.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;日志服务 rsyslogd 记录的日志文件格式包含以下 4 列:&lt;/p&gt;
&lt;p&gt;1. 事件产生的时间。&lt;br /&gt;
2. 产生事件的服务器的主机名。&lt;br /&gt;
3. 产生事件的服务名或程序名。&lt;br /&gt;
4. 事件的具体信息。&lt;/p&gt;
&lt;p&gt;/var/log/secure 日志文件内容:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;/var/log/secure 记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh 的登录、su 切换用户，sudo 授权，甚至添加用户和修改用户密码都会记录在这个日志文件中&lt;/p&gt;
&lt;p&gt;/var/log/wtmp 永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件&lt;/p&gt;
&lt;p&gt;/var/tun/ulmp 记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。&lt;/p&gt;
&lt;h2 id=&#34;rsyslogd配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rsyslogd配置文件&#34;&gt;#&lt;/a&gt; rsyslogd 配置文件&lt;/h2&gt;
&lt;p&gt;rsyslogd 服务的配置文件是 /etc/rsyslog.conf , 其中主要定义了服务的名称、日志等级和日志记录位置。&lt;/p&gt;
&lt;p&gt;该配置文件的基本格式如下所示:&lt;/p&gt;
&lt;p&gt;authpriv.*                  /var/log/secure&lt;br /&gt;
# 服务名称 [连接符号] 日志等级   日志记录位置&lt;/p&gt;
&lt;h2 id=&#34;日志等级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志等级&#34;&gt;#&lt;/a&gt; 日志等级&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image016.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;详细见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbmJsb2dzLmNvbS9rbGI1NjEvcC8xMjAxNDI2OC5odG1s&#34;&gt; https://cnblogs.com/klb561/p/12014268.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;连接符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接符&#34;&gt;#&lt;/a&gt; 连接符&lt;/h2&gt;
&lt;p&gt;连接符号:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;quot;.&amp;quot; 代表只要比后面的等级高的 (包含该等级) 日志都记录。比如，&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Nyb24uaW5mbw==&#34;&gt;cron.info&lt;/span&gt;&amp;quot; 代表 cron 服务产生的日志，只要日志等级大于等于 info 级别，就记录。&lt;/li&gt;
&lt;li&gt;&amp;quot;.=&amp;quot; 代表只记录所需等级的日志，其他等级的日志都不记录。比如，&amp;quot;*.=emerg&amp;quot; 代表人和日志服务产生的日志，只要等级是 emerg 等级，就记录。这种用法极少见，了解就好。&lt;/li&gt;
&lt;li&gt;&amp;quot;.!&amp;quot; 代表不等于，也就是除该等级的日志外，其他等级的日志都记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;日志记录位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志记录位置&#34;&gt;#&lt;/a&gt; 日志记录位置&lt;/h2&gt;
&lt;p&gt;日志记录位置：当前日志输出到哪个日志文件中保存&lt;/p&gt;
&lt;p&gt;日志文件的绝对路径。例如: &amp;quot;/ar/log/secure&amp;quot;&lt;/p&gt;
&lt;p&gt;系统设备文件。如 &amp;quot;/dev/lpo&amp;quot; 代表第一台打印机，如果日志保存位置是打印机设备，当有日志时就会在打印机上打印。&lt;/p&gt;
&lt;p&gt;用户名。如果是 &amp;quot;root&amp;quot; , 把日志发送给 root 用户 (用户要在线) &amp;quot;*&amp;quot; 代表发送给所有在线用户，如 &amp;quot;mail**&amp;quot; 就会把 mail 服务产生的所有级别的日志发送给所有在线用户。发给多个在线用户，则用户名之间用 &amp;quot;,&amp;quot; 分隔。&lt;/p&gt;
&lt;p&gt;忽略或丢弃日志。如果接收日志的对象是 &amp;quot;~&amp;quot; , 则代表这个日志不会被记录，而被直接丢弃。如 &amp;quot;local3.*~&amp;quot; 代表忽略 local3 服务类型所有的日志都不记录。&lt;/p&gt;
&lt;h2 id=&#34;日志管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志管理&#34;&gt;#&lt;/a&gt; 日志管理&lt;/h2&gt;
&lt;p&gt;日志管理:&lt;/p&gt;
&lt;p&gt;日志维护的最主要的工作就是把旧的日志文件删除，从而腾出空间保存新的日志文件。&lt;/p&gt;
&lt;p&gt;logrotate 就是用来进行日志轮替的，就是把旧的日志文件移动并改名，同时创建一个新的空日志文件用来记录新日志，当旧日志文件超出保存的范围时就删除。&lt;/p&gt;
&lt;p&gt;日志文件的命名规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务加日期&lt;/li&gt;
&lt;li&gt;服务加数字&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看日志备份文件&lt;br /&gt;
 ls /var/log&lt;/p&gt;
&lt;p&gt;logrotate 令可以进行日志转储 (轮替)&lt;/p&gt;
&lt;p&gt;logrotate 命令会依据 /etc/logrotate.conf 配置文件的配置，来判断配置文件中的日志是否符合日志轮替的条件 (比如，日志备份时间已经满一周) , 如果符合，日志就会进行轮替。&lt;/p&gt;
&lt;p&gt;/etc/logrotate.conf 配置文件的&lt;br /&gt;
 cat /etc/logrotate.conf&lt;br /&gt;
 详细讲解&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzExMDYuaHRtbA==&#34;&gt;http://c.biancheng.net/view/1106.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;系统服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统服务&#34;&gt;#&lt;/a&gt; 系统服务&lt;/h1&gt;
&lt;p&gt;什么是系统服务？&lt;br /&gt;
 服务是在后台运行的应用程序，并且可以提供一些本地系统或网络的功能。&lt;br /&gt;
我们把这些应用程序称作服务，也就是 Service.&lt;br /&gt;
Linux 中常见的服务有那些，这些服务怎么分类，服务如何启动，服务如何自启动，服务如何查看？&lt;/p&gt;
&lt;p&gt;服务 Service, Daemon 这个词也经常伴随着出现。&lt;br /&gt;
Daemon 翻 i 成 &amp;quot;守护进程&amp;quot;&lt;br /&gt;
 守护进程：就是为了实现服务、功能的进程。&lt;br /&gt;
比如，apache 服务就是服务 (Service) , 它是用来实现 Web 服务的。&lt;br /&gt;
那么，启动 apache 服务的进程是哪个进程呢？&lt;br /&gt;
httpd 这个守护进程 (Daemon) 。&lt;br /&gt;
在 Linux 中就是通过启动 httpd 进程来启动 apache 服务的。&lt;br /&gt;
也就是说，守护进程就是服务在后台运行的真实进程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image017.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Linux 中的服务按照安装方法不同可以分为 RPM 包默认安装的服务和源码包安装的服务两大类。&lt;/p&gt;
&lt;p&gt;区别:&lt;/p&gt;
&lt;p&gt;RPM 包安装到系统默认位置，可以被服务管理命令识别；但是源码包安装到手工指定位置，当然就不能被服务管理命令识别了 (可以手工修改为被服务管理命令识别)。&lt;/p&gt;
&lt;h2 id=&#34;启动服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动服务&#34;&gt;#&lt;/a&gt; 启动服务&lt;/h2&gt;
&lt;p&gt;启动服务方式:&lt;/p&gt;
&lt;p&gt;1) 使用 /etc/init.d/ 目录中的启动脚本来启动独立的服务&lt;/p&gt;
&lt;p&gt;2) 使用 service 命令来启动独立的服务&lt;/p&gt;
&lt;p&gt;1) 使用 /etc/init.d/ 目录中的启动脚本来启动独立的服务&lt;/p&gt;
&lt;p&gt;所有独立服务的启动脚本都存放在 /etc/init.d/ 目录中，调用脚本就可以启动独立的服务了。&lt;/p&gt;
&lt;p&gt;命令格式如下:&lt;/p&gt;
&lt;p&gt;/etc/init.d/ 独立服务名参数参数:&lt;/p&gt;
&lt;p&gt;start: 启动服务；&lt;br /&gt;
stop: 停止服务；&lt;br /&gt;
status: 查看服务状态；&lt;br /&gt;
restart: 重启动服务；&lt;/p&gt;
&lt;p&gt;2) 使用 service 命令来启动独立的服务&lt;/p&gt;
&lt;p&gt;在 CentOS 系统中，我们还可以依赖 service 命令来启动独立的服务。service 命令实际上只是一个脚本，这个脚本仍然需要调用 /etc/init.d/ 中的启动脚本来启动独立的服务。&lt;/p&gt;
&lt;p&gt;service 命令格式如下:&lt;/p&gt;
&lt;p&gt;service 独立服务名 start|stop|restart|..&lt;/p&gt;
&lt;p&gt;&lt;code&gt;service --status-all 查看所有服务&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务的自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务的自启动&#34;&gt;#&lt;/a&gt; 服务的自启动&lt;/h2&gt;
&lt;p&gt;使用 chkconfig 服务自启动管理命令&lt;/p&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;p&gt;查看所有服务的自启动状态&lt;br /&gt;
 chkconfig -list&lt;/p&gt;
&lt;p&gt;设置某服务的自启动状态&lt;/p&gt;
&lt;p&gt;chkconfig [--level 运行级别][独立服务名][on|off]&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image018.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;想把某个已经安装了的服务添加为系统服务，可以执行以下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chkconfig --add 服务名称&lt;/code&gt;           (首先，添加为系统服务，注意 add 前面有两个横杠)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chkconfig -leve 启动级别 服务名 on&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载与安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载与安装&#34;&gt;#&lt;/a&gt; 下载与安装&lt;/h1&gt;
&lt;h2 id=&#34;wget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wget&#34;&gt;#&lt;/a&gt; wget&lt;/h2&gt;
&lt;p&gt;wget 是一个下载文件的工具，它用在命令行下&lt;/p&gt;
&lt;p&gt;语法：wget [选项] url&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-V 显示 wget 版本信息并退出。&lt;br /&gt;
-h 打印此帮助&lt;br /&gt;
 - O 指定下载文件的别名。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image019.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;rpm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rpm&#34;&gt;#&lt;/a&gt; rpm&lt;/h2&gt;
&lt;p&gt;Linux rpm 命令用于管理套件，增强了程序安装卸载的管理。&lt;/p&gt;
&lt;p&gt;RPM 的功能：打包、安装、查询、升级、卸载...&lt;/p&gt;
&lt;p&gt;缺点: RPM 无法解决软件包的依赖关系&lt;/p&gt;
&lt;p&gt;RPM 包的命名规范: name-version-release.os.arch.rpm&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image020.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;!{}(image021.png)&lt;/p&gt;
&lt;h2 id=&#34;yum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yum&#34;&gt;#&lt;/a&gt; yum&lt;/h2&gt;
&lt;p&gt;yum 基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包和安装&lt;/p&gt;
&lt;p&gt;优点：可以自动处理关联关系，并且一次安装所有依赖的软件包，无须繁琐地一次下载，安装。&lt;/p&gt;
&lt;p&gt;语法 ：&lt;br /&gt;
yum [选项] [包……]&lt;/p&gt;
&lt;p&gt;选项：&lt;br /&gt;
-h 帮助&lt;br /&gt;
 - y 当安装过程中提示选择全部为 “yes”&lt;br /&gt;
-q 不显示安装过程&lt;/p&gt;
&lt;p&gt;检测有没有安装 yum&lt;br /&gt;
yum -h&lt;br /&gt;
rpm -qa | grep yum&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;相关命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1・列出所有可更新的软件清单命令: yum check-update&lt;br /&gt;
2 更新所有软件命令: yum update&lt;br /&gt;
3 仅安装指定的软件命令: yum install 包名称&lt;br /&gt;
 4 仅更新指定的软件命令: yum update 包名称&lt;br /&gt;
 5 列出所有可安装的软件清单命令: yum list&lt;br /&gt;
6 删除删除命令: yum remove 包名称&lt;br /&gt;
 7 清除缓存命令:&lt;br /&gt;
 清除缓存目录 (/var/cache/yum) 下的软件包&lt;br /&gt;
命令：yum clean packages&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下的 headers&lt;br /&gt;
 命令：yum clean headers&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下旧的 headers&lt;br /&gt;
 命令：yum clean oldheaders&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下的软件包及旧的 headers&lt;br /&gt;
 命令：yum clean, yum clean all (= yum clean packages; yum clean oldheaders)&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;yum list 相关命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;iamge022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安装应用程序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法: yum [-y] install 包 1 包 2…… 包 n&lt;br /&gt;
yum install wget    使用安装 wget&lt;/p&gt;
&lt;p&gt;升级软件包&lt;/p&gt;
&lt;p&gt;命令格式: yum update 包 1 包 2…… 包 n&lt;br /&gt;
yum check-update 检测可升级的包&lt;/p&gt;
&lt;p&gt;卸载软件包&lt;/p&gt;
&lt;p&gt;命令格式: yum remove 包 1 包 2…… 包 n&lt;br /&gt;
 注意：卸载时注意依赖关系&lt;/p&gt;
&lt;h1 id=&#34;文件打包和解压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件打包和解压缩&#34;&gt;#&lt;/a&gt; 文件打包和解压缩&lt;/h1&gt;
&lt;p&gt;linux 中常用的五种压缩格式: .zip .gz .tar.gz .bz2 .tar.bz2&lt;/p&gt;
&lt;p&gt;打包和压缩:&lt;/p&gt;
&lt;p&gt;打包是指将一大堆文件或目录什么的变成一个总的文件&lt;br /&gt;
压缩则是将一个大的文件通过一些压缩算法变成一个小文件&lt;/p&gt;
&lt;h2 id=&#34;tar命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tar命令&#34;&gt;#&lt;/a&gt; tar 命令&lt;/h2&gt;
&lt;p&gt;Linux 中的很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你就得先借助另它的工具将这一大堆文件先打成一个包，然后再就原来的压缩程序进行压缩。&lt;/p&gt;
&lt;p&gt;Liunx 下最常用的打包命令是 tar, 使用 tar 程序打出来的包我们常称为 tar 包，tar 包文件的命通常都是以.tar 结尾的。&lt;br /&gt;
生成 tar 包后，就可以用其它的程序来进行压缩了，所以首先就来讲讲 tar 命令的基本用法&lt;/p&gt;
&lt;p&gt;语法:&lt;br /&gt;
tar 【选项】 打包文件包 源文件&lt;br /&gt;
选项:&lt;br /&gt;
-c: 打包&lt;br /&gt;
 - v: 显示详细过程&lt;br /&gt;
 - x: 解打包 / 压缩&lt;br /&gt;
 - z: 通过 gzip 压缩 / 解压文件&lt;br /&gt;
 - j: 通过 bz2 压缩 / 解压文件&lt;br /&gt;
 - C: 解压到指定目录&lt;br /&gt;
 - f filename: 指定打包后的文件名 (必选，这个参数是最后一个参数，后面只能接文件名)&lt;/p&gt;
&lt;p&gt;常用命令:&lt;br /&gt;
tar -cf all.tar *.jpg  #将所有.jpg 的文件打成一个名为 all.tar 的包&lt;br /&gt;
 tar -xvf all.tar  #解出 all.tar 包中所有文件，-x 是解开的意思&lt;/p&gt;
&lt;p&gt;为了方便用户在打包解包的同时可以压缩或解压文件，tar 提供了一种特殊的功能 -- 就是 tar 可以在打包或解包的同时调用其它的压缩程序，比如调用 gzip.bzip2 等。&lt;/p&gt;
&lt;h2 id=&#34;解压缩与压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解压缩与压缩&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label info&#34;&gt;解压缩与压缩&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;zip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zip&#34;&gt;#&lt;/a&gt; zip&lt;/h2&gt;
&lt;p&gt;zip 【选项】 【压缩文件】&lt;/p&gt;
&lt;p&gt;选项:&lt;br /&gt;
-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。&lt;br /&gt;
-q 不显示指令执行过程。&lt;br /&gt;
-r 递归处理，将指定目录下的所有文件和子目录一并处理。&lt;br /&gt;
-v 显示指令执行过程或显示版本信息。&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;p&gt;将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip:&lt;/p&gt;
&lt;p&gt;zip-qr html.zip /home/html&lt;/p&gt;
&lt;h2 id=&#34;unzip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unzip&#34;&gt;#&lt;/a&gt; unzip&lt;/h2&gt;
&lt;p&gt;unzip 【选项】 【压缩文件】&lt;/p&gt;
&lt;p&gt;选项:&lt;/p&gt;
&lt;p&gt;-l 显示压缩文件内所包含的文件 - V 执行是时显示详细的信息。&lt;br /&gt;
-q 执行时不显示任何信息。&lt;br /&gt;
-d &amp;lt;目录&amp;gt; 指定文件解压缩后所要存储的目录。&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;p&gt;解压文件&lt;br /&gt;
 &lt;code&gt;unzip abc.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看压缩文件中包含的文件:&lt;br /&gt;
 &lt;code&gt;unzip-l abc.zip&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;gzip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gzip&#34;&gt;#&lt;/a&gt; gzip&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;tar 调用 gzipgzip 是 GNU 组织开发的一个压缩程序，.gz 结尾的文件就是 gzip 压缩的结果。与 gzip 相对的解压程序是 gunzip.&lt;br /&gt;
tar 中使用 - z 这个参数来调用 gzip 常用命令:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;tar-czf all.tar.gz *.jpg&lt;/code&gt;   #将所有.jpg 的文件打成一个 tar 包，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包 all.tar.gz&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar-xzf all.tar.gz&lt;/code&gt;   #将包 all.tar.z 解开&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;tar 调用 bzip2bzip2 是一个压缩能力更强的压缩程序，.bz2 结尾的文件就是 bzip2 压缩的结果。与 bzip2 相对的解压程序是 bunzip&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tar 中使用 - j 这个参数来调用 bzip2&lt;/p&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;p&gt;tar -cjfall.tar.bz2 *.jpg #将所有.jpg 的文件打成一个 tar 包，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，包名为 all.tar.bz2&lt;/p&gt;
&lt;p&gt;tar -xjf all.tar.bz2  #将上面产生的包解开&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://self-ferry.github.io/2021/02/07/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</guid>
            <title>初识python测试驱动开发</title>
            <link>https://self-ferry.github.io/2021/02/07/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</link>
            <pubDate>Sun, 07 Feb 2021 20:20:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;label success&#34;&gt;✔️Music！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;media-container&#34;&gt;&lt;div class=&#34;player&#34; data-type=&#34;audio&#34; data-src=&#39;[{&#34;title&#34;:&#34;列表 1&#34;,&#34;list&#34;:[&#34;https://music.163.com/#/song?id=1384407086&#34;]}]&#39;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&#34;导读&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导读&#34;&gt;#&lt;/a&gt; 导读&lt;/h1&gt;
&lt;p&gt;本章主要介绍敏捷开发模式。敏捷开发是 20 世纪 90 年代兴起的一种新型软件开发方法，能快速应对需求的变化。他需要分析人员与程序开发人员紧密协作，采用面对面的有效沟通方式频繁交付新的软件版本。测试驱动是敏捷开发的重要组成部分，python 是敏捷开发项目常采用的一种语言。本章重点介绍测试驱动开发的特点、步骤和环境建立，以及 Python 单元测试，doctest 和 Epydoc 的使用。&lt;/p&gt;
&lt;h1 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h1&gt;
&lt;h2 id=&#34;测试驱动开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试驱动开发&#34;&gt;#&lt;/a&gt; 测试驱动开发&lt;/h2&gt;
&lt;p&gt;测试驱动开发 (Test-Driven-Development)，简称 TDD，是一种有别于传统开发的新型开发方法。它要求在编写某个功能的代码之前先编写测试代码，让后编写是测试通过的代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，以便加速开发进程。&lt;/p&gt;
&lt;h3 id=&#34;测试驱动开发模式tdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试驱动开发模式tdd&#34;&gt;#&lt;/a&gt; 测试驱动开发模式 (TDD)&lt;/h3&gt;
&lt;p&gt;当下科技高速发展，软件规模越来越大，软件开发人员也越来越多，因此软件开发过程必须要有知道开发的软件模式。一些小项目也许可以采用边做边改的开发模式，项目一旦做大，这样的开发模式就不能满足需求了。&lt;/p&gt;
&lt;p&gt;瀑布模型作为传统的开发模式，曾一度受到追捧，它将软件生命周期划外为制定计划，需求分析、软件设计、程序开发、软件测试和运行维护六个阶段，这六个阶段的各项活动严格按照线性方式进行，每一个阶段的工作成果都需要进行验证，验证通过才能进入下一阶段，否则返回修改。&lt;/p&gt;
&lt;p&gt;传统的开发模型除了瀑布模型外，还有造代模型、快速原型模型、增量模型、螺旋模型，但这些模型都有自身的缺点，如何适应瞬息万变的需求变化，如何高效地实施软件开发，是每个软件行业人员必须思考的问题。&lt;/p&gt;
&lt;p&gt;敏捷开发在这样的环境下应运而生，它是一种以人为核心、迭代、循序渐进的开发方法，开发过程中，软件项目的构建被切分成多个子项目，各个子项目既相对独立又相互联系，可以分别完成，开发过程中软件一直处于可使用状态。&lt;/p&gt;
&lt;p&gt;测试驱动开发模式 TDD 是敏捷开发的重要组成部分，也是一种设计方法论，其基本思想就是在开发某个功能代码前，先编写测试代码，然后编写功能代码并用测试代码进行验证，如此循环直到完成全部功能的开发。&lt;/p&gt;
&lt;p&gt;测试模型中的 V 模型和 X 模型都是 TDD 的最好体现方式，V 模型如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;V 模型在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都考虑相对应的测试工作，完成相关的测试用例设计和测试脚本编写。&lt;/p&gt;
&lt;p&gt;X 模型是对详细阶段和编码阶段进行建模，针对某个功能进行对应的测试驱动开发。X 模型的左侧描述的是针对单独程序片段所进行的相互分离的编码和测试，此后进行频繁的集成，通过集成最终成为可执行的程序，然后再对这些可执行程序进行测试. X 模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误。&lt;/p&gt;
&lt;p&gt;X 模型如图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;TDD 的优点：节省了调试程序及挑错的时间，在任意一个开发节点都可以拿出一个可以使用含少量 bug 并具有一定功能和能够发布的产品。&lt;br /&gt;
TDD 的缺点：增加代码量，测试代码是系统代码的两倍或更多倍。&lt;/p&gt;
&lt;h3 id=&#34;tdd使用步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tdd使用步骤&#34;&gt;#&lt;/a&gt; TDD 使用步骤&lt;/h3&gt;
&lt;p&gt;TDD 在满足软件开发目标的同时，也要实现代码的简单整洁。&lt;br /&gt;
在明确软件需求后，对一个新功能的开发过程包括以下步骤，如图 4-3 所示。&lt;br /&gt;
步骤 01: 明确当前代码要完成的功能。可以记录成一个列表，必要时需写相关接口。&lt;br /&gt;
步骤 02: 快速新增对要完成功能的测试。&lt;br /&gt;
步骤 03 : 运行测试，判断测试代码是否通过，通过则执行步骤 06, 不通过则执行步骤 04。&lt;br /&gt;
步骤 04: 编写对应的功能代码。&lt;br /&gt;
步骤 05 : 重新运行测试，保证全部通过。&lt;br /&gt;
步骤 06: 对代码进行重构，优化代码结构。&lt;br /&gt;
步骤 07: 循环完成所有功能的开发。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;tips&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tips&#34;&gt;#&lt;/a&gt; Tips&lt;/h3&gt;
&lt;p&gt;要完成一个系统，代码的功能点可能很多，需求也可能随时变化，任何阶段想添加功能，都应吧相关的功能点加到测试列表中，避免疏漏。&lt;/p&gt;
&lt;h2 id=&#34;unittest测试框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unittest测试框架&#34;&gt;#&lt;/a&gt; unittest 测试框架&lt;/h2&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veW91bGl4aXNoaS9hcnRpY2xlcy8zNTUxOTkyLmh0bWw=&#34;&gt;https://www.cnblogs.com/youlixishi/articles/3551992.html&lt;/span&gt;&lt;br /&gt;
《python 网络编程从入门到精通》&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
